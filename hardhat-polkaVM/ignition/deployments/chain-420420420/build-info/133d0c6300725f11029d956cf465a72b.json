{
  "id": "133d0c6300725f11029d956cf465a72b",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "input": {
    "language": "Solidity",
    "sources": {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "contracts/MintableERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MintableERC20 is ERC20 {\n    // Variables\n    mapping(address => uint) public lastMintTime;\n    uint256 public interval;\n    address public owner;\n\n    constructor(\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {\n        _mint(msg.sender, 100000000000000000000000);\n\n        owner = msg.sender;\n        interval = 3600;\n    }\n\n    function mintToken() public {\n        require(\n            lastMintTime[msg.sender] == 0 ||\n                block.timestamp > lastMintTime[msg.sender] + interval,\n            \"You need to wait an hour between mints\"\n        );\n        _mint(msg.sender, 100000000000000000000);\n        lastMintTime[msg.sender] = block.timestamp;\n    }\n\n    function ownerMint(address _target, uint256 _amount) public onlyOwner {\n        _mint(_target, _amount);\n    }\n\n    function canMint(address _address) public view returns (bool) {\n        return\n            lastMintTime[_address] == 0 ||\n            block.timestamp > lastMintTime[_address] + interval;\n    }\n\n    function setInterval(uint _newInterval) public onlyOwner {\n        interval = _newInterval;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "parameters": "z"
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [],
    "version": "0.8.30",
    "long_version": "0.8.30+commit.73712a01.Emscripten.clang",
    "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
    "sources": {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
        "id": 0,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
          "exportedSymbols": {
            "IERC1155Errors": [
              136
            ],
            "IERC20Errors": [
              41
            ],
            "IERC721Errors": [
              89
            ]
          },
          "id": 137,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "112:24:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC20Errors",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "138:141:0",
                "text": " @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."
              },
              "fullyImplemented": true,
              "id": 41,
              "linearizedBaseContracts": [
                41
              ],
              "name": "IERC20Errors",
              "nameLocation": "290:12:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "309:309:0",
                    "text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
                  },
                  "errorSelector": "e450d38c",
                  "id": 11,
                  "name": "ERC20InsufficientBalance",
                  "nameLocation": "629:24:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 10,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 5,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "662:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 11,
                        "src": "654:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "654:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 7,
                        "mutability": "mutable",
                        "name": "balance",
                        "nameLocation": "678:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 11,
                        "src": "670:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 6,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "670:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 9,
                        "mutability": "mutable",
                        "name": "needed",
                        "nameLocation": "695:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 11,
                        "src": "687:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 8,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "687:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "653:49:0"
                  },
                  "src": "623:80:0"
                },
                {
                  "documentation": {
                    "id": 12,
                    "nodeType": "StructuredDocumentation",
                    "src": "709:152:0",
                    "text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
                  },
                  "errorSelector": "96c6fd1e",
                  "id": 16,
                  "name": "ERC20InvalidSender",
                  "nameLocation": "872:18:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 15,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 14,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "899:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 16,
                        "src": "891:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 13,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "891:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "890:16:0"
                  },
                  "src": "866:41:0"
                },
                {
                  "documentation": {
                    "id": 17,
                    "nodeType": "StructuredDocumentation",
                    "src": "913:159:0",
                    "text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
                  },
                  "errorSelector": "ec442f05",
                  "id": 21,
                  "name": "ERC20InvalidReceiver",
                  "nameLocation": "1083:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 20,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 19,
                        "mutability": "mutable",
                        "name": "receiver",
                        "nameLocation": "1112:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 21,
                        "src": "1104:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 18,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1104:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1103:18:0"
                  },
                  "src": "1077:45:0"
                },
                {
                  "documentation": {
                    "id": 22,
                    "nodeType": "StructuredDocumentation",
                    "src": "1128:345:0",
                    "text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
                  },
                  "errorSelector": "fb8f41b2",
                  "id": 30,
                  "name": "ERC20InsufficientAllowance",
                  "nameLocation": "1484:26:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 29,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 24,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "1519:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 30,
                        "src": "1511:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 23,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1511:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 26,
                        "mutability": "mutable",
                        "name": "allowance",
                        "nameLocation": "1536:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 30,
                        "src": "1528:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 25,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1528:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 28,
                        "mutability": "mutable",
                        "name": "needed",
                        "nameLocation": "1555:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 30,
                        "src": "1547:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 27,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1547:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1510:52:0"
                  },
                  "src": "1478:85:0"
                },
                {
                  "documentation": {
                    "id": 31,
                    "nodeType": "StructuredDocumentation",
                    "src": "1569:174:0",
                    "text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
                  },
                  "errorSelector": "e602df05",
                  "id": 35,
                  "name": "ERC20InvalidApprover",
                  "nameLocation": "1754:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 34,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 33,
                        "mutability": "mutable",
                        "name": "approver",
                        "nameLocation": "1783:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 35,
                        "src": "1775:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 32,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1775:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1774:18:0"
                  },
                  "src": "1748:45:0"
                },
                {
                  "documentation": {
                    "id": 36,
                    "nodeType": "StructuredDocumentation",
                    "src": "1799:195:0",
                    "text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
                  },
                  "errorSelector": "94280d62",
                  "id": 40,
                  "name": "ERC20InvalidSpender",
                  "nameLocation": "2005:19:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 39,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 38,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2033:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 40,
                        "src": "2025:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 37,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2025:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2024:17:0"
                  },
                  "src": "1999:43:0"
                }
              ],
              "scope": 137,
              "src": "280:1764:0",
              "usedErrors": [
                11,
                16,
                21,
                30,
                35,
                40
              ],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC721Errors",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 42,
                "nodeType": "StructuredDocumentation",
                "src": "2046:143:0",
                "text": " @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."
              },
              "fullyImplemented": true,
              "id": 89,
              "linearizedBaseContracts": [
                89
              ],
              "name": "IERC721Errors",
              "nameLocation": "2200:13:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 43,
                    "nodeType": "StructuredDocumentation",
                    "src": "2220:219:0",
                    "text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
                  },
                  "errorSelector": "89c62b64",
                  "id": 47,
                  "name": "ERC721InvalidOwner",
                  "nameLocation": "2450:18:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 46,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 45,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "2477:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 47,
                        "src": "2469:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 44,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2469:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2468:15:0"
                  },
                  "src": "2444:40:0"
                },
                {
                  "documentation": {
                    "id": 48,
                    "nodeType": "StructuredDocumentation",
                    "src": "2490:132:0",
                    "text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
                  },
                  "errorSelector": "7e273289",
                  "id": 52,
                  "name": "ERC721NonexistentToken",
                  "nameLocation": "2633:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 51,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 50,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2664:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 52,
                        "src": "2656:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 49,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2656:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2655:17:0"
                  },
                  "src": "2627:46:0"
                },
                {
                  "documentation": {
                    "id": 53,
                    "nodeType": "StructuredDocumentation",
                    "src": "2679:289:0",
                    "text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
                  },
                  "errorSelector": "64283d7b",
                  "id": 61,
                  "name": "ERC721IncorrectOwner",
                  "nameLocation": "2979:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 60,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 55,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "3008:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "3000:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 54,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3000:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 57,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3024:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "3016:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 56,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3016:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 59,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "3041:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "3033:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 58,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3033:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2999:48:0"
                  },
                  "src": "2973:75:0"
                },
                {
                  "documentation": {
                    "id": 62,
                    "nodeType": "StructuredDocumentation",
                    "src": "3054:152:0",
                    "text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
                  },
                  "errorSelector": "73c6ac6e",
                  "id": 66,
                  "name": "ERC721InvalidSender",
                  "nameLocation": "3217:19:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 65,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 64,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "3245:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 66,
                        "src": "3237:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 63,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3237:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3236:16:0"
                  },
                  "src": "3211:42:0"
                },
                {
                  "documentation": {
                    "id": 67,
                    "nodeType": "StructuredDocumentation",
                    "src": "3259:159:0",
                    "text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
                  },
                  "errorSelector": "64a0ae92",
                  "id": 71,
                  "name": "ERC721InvalidReceiver",
                  "nameLocation": "3429:21:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 70,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 69,
                        "mutability": "mutable",
                        "name": "receiver",
                        "nameLocation": "3459:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 71,
                        "src": "3451:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 68,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3451:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3450:18:0"
                  },
                  "src": "3423:46:0"
                },
                {
                  "documentation": {
                    "id": 72,
                    "nodeType": "StructuredDocumentation",
                    "src": "3475:247:0",
                    "text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
                  },
                  "errorSelector": "177e802f",
                  "id": 78,
                  "name": "ERC721InsufficientApproval",
                  "nameLocation": "3733:26:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 77,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 74,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "3768:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 78,
                        "src": "3760:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 73,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3760:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 76,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3786:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 78,
                        "src": "3778:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 75,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3778:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3759:35:0"
                  },
                  "src": "3727:68:0"
                },
                {
                  "documentation": {
                    "id": 79,
                    "nodeType": "StructuredDocumentation",
                    "src": "3801:174:0",
                    "text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
                  },
                  "errorSelector": "a9fbf51f",
                  "id": 83,
                  "name": "ERC721InvalidApprover",
                  "nameLocation": "3986:21:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 82,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 81,
                        "mutability": "mutable",
                        "name": "approver",
                        "nameLocation": "4016:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 83,
                        "src": "4008:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 80,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4008:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4007:18:0"
                  },
                  "src": "3980:46:0"
                },
                {
                  "documentation": {
                    "id": 84,
                    "nodeType": "StructuredDocumentation",
                    "src": "4032:197:0",
                    "text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
                  },
                  "errorSelector": "5b08ba18",
                  "id": 88,
                  "name": "ERC721InvalidOperator",
                  "nameLocation": "4240:21:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 87,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 86,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "4270:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 88,
                        "src": "4262:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 85,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4262:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4261:18:0"
                  },
                  "src": "4234:46:0"
                }
              ],
              "scope": 137,
              "src": "2190:2092:0",
              "usedErrors": [
                47,
                52,
                61,
                66,
                71,
                78,
                83,
                88
              ],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC1155Errors",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 90,
                "nodeType": "StructuredDocumentation",
                "src": "4284:145:0",
                "text": " @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."
              },
              "fullyImplemented": true,
              "id": 136,
              "linearizedBaseContracts": [
                136
              ],
              "name": "IERC1155Errors",
              "nameLocation": "4440:14:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 91,
                    "nodeType": "StructuredDocumentation",
                    "src": "4461:361:0",
                    "text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
                  },
                  "errorSelector": "03dee4c5",
                  "id": 101,
                  "name": "ERC1155InsufficientBalance",
                  "nameLocation": "4833:26:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 100,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 93,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "4868:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 101,
                        "src": "4860:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 92,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4860:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 95,
                        "mutability": "mutable",
                        "name": "balance",
                        "nameLocation": "4884:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 101,
                        "src": "4876:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 94,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4876:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 97,
                        "mutability": "mutable",
                        "name": "needed",
                        "nameLocation": "4901:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 101,
                        "src": "4893:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 96,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4893:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 99,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4917:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 101,
                        "src": "4909:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 98,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4909:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4859:66:0"
                  },
                  "src": "4827:99:0"
                },
                {
                  "documentation": {
                    "id": 102,
                    "nodeType": "StructuredDocumentation",
                    "src": "4932:152:0",
                    "text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
                  },
                  "errorSelector": "01a83514",
                  "id": 106,
                  "name": "ERC1155InvalidSender",
                  "nameLocation": "5095:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 105,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 104,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "5124:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 106,
                        "src": "5116:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 103,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5116:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5115:16:0"
                  },
                  "src": "5089:43:0"
                },
                {
                  "documentation": {
                    "id": 107,
                    "nodeType": "StructuredDocumentation",
                    "src": "5138:159:0",
                    "text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
                  },
                  "errorSelector": "57f447ce",
                  "id": 111,
                  "name": "ERC1155InvalidReceiver",
                  "nameLocation": "5308:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 110,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 109,
                        "mutability": "mutable",
                        "name": "receiver",
                        "nameLocation": "5339:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 111,
                        "src": "5331:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 108,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5331:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5330:18:0"
                  },
                  "src": "5302:47:0"
                },
                {
                  "documentation": {
                    "id": 112,
                    "nodeType": "StructuredDocumentation",
                    "src": "5355:256:0",
                    "text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
                  },
                  "errorSelector": "e237d922",
                  "id": 118,
                  "name": "ERC1155MissingApprovalForAll",
                  "nameLocation": "5622:28:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 117,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 114,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "5659:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 118,
                        "src": "5651:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 113,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5651:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 116,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "5677:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 118,
                        "src": "5669:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 115,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5669:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5650:33:0"
                  },
                  "src": "5616:68:0"
                },
                {
                  "documentation": {
                    "id": 119,
                    "nodeType": "StructuredDocumentation",
                    "src": "5690:174:0",
                    "text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
                  },
                  "errorSelector": "3e31884e",
                  "id": 123,
                  "name": "ERC1155InvalidApprover",
                  "nameLocation": "5875:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 122,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 121,
                        "mutability": "mutable",
                        "name": "approver",
                        "nameLocation": "5906:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 123,
                        "src": "5898:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 120,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5898:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5897:18:0"
                  },
                  "src": "5869:47:0"
                },
                {
                  "documentation": {
                    "id": 124,
                    "nodeType": "StructuredDocumentation",
                    "src": "5922:197:0",
                    "text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
                  },
                  "errorSelector": "ced3e100",
                  "id": 128,
                  "name": "ERC1155InvalidOperator",
                  "nameLocation": "6130:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 127,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 126,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "6161:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 128,
                        "src": "6153:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 125,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6153:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6152:18:0"
                  },
                  "src": "6124:47:0"
                },
                {
                  "documentation": {
                    "id": 129,
                    "nodeType": "StructuredDocumentation",
                    "src": "6177:280:0",
                    "text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
                  },
                  "errorSelector": "5b059991",
                  "id": 135,
                  "name": "ERC1155InvalidArrayLength",
                  "nameLocation": "6468:25:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 134,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 131,
                        "mutability": "mutable",
                        "name": "idsLength",
                        "nameLocation": "6502:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 135,
                        "src": "6494:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 130,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6494:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 133,
                        "mutability": "mutable",
                        "name": "valuesLength",
                        "nameLocation": "6521:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 135,
                        "src": "6513:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 132,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6513:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6493:41:0"
                  },
                  "src": "6462:73:0"
                }
              ],
              "scope": 137,
              "src": "4430:2107:0",
              "usedErrors": [
                101,
                106,
                111,
                118,
                123,
                128,
                135
              ],
              "usedEvents": []
            }
          ],
          "src": "112:6426:0"
        }
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "id": 1,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
          "exportedSymbols": {
            "Context": [
              785
            ],
            "ERC20": [
              651
            ],
            "IERC20": [
              729
            ],
            "IERC20Errors": [
              41
            ],
            "IERC20Metadata": [
              755
            ]
          },
          "id": 652,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 138,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "105:24:1"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
              "file": "./IERC20.sol",
              "id": 140,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 652,
              "sourceUnit": 730,
              "src": "131:36:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 139,
                    "name": "IERC20",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 729,
                    "src": "139:6:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
              "file": "./extensions/IERC20Metadata.sol",
              "id": 142,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 652,
              "sourceUnit": 756,
              "src": "168:63:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 141,
                    "name": "IERC20Metadata",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 755,
                    "src": "176:14:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
              "file": "../../utils/Context.sol",
              "id": 144,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 652,
              "sourceUnit": 786,
              "src": "232:48:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 143,
                    "name": "Context",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 785,
                    "src": "240:7:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
              "file": "../../interfaces/draft-IERC6093.sol",
              "id": 146,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 652,
              "sourceUnit": 137,
              "src": "281:65:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 145,
                    "name": "IERC20Errors",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 41,
                    "src": "289:12:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 148,
                    "name": "Context",
                    "nameLocations": [
                      "1133:7:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 785,
                    "src": "1133:7:1"
                  },
                  "id": 149,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1133:7:1"
                },
                {
                  "baseName": {
                    "id": 150,
                    "name": "IERC20",
                    "nameLocations": [
                      "1142:6:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 729,
                    "src": "1142:6:1"
                  },
                  "id": 151,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1142:6:1"
                },
                {
                  "baseName": {
                    "id": 152,
                    "name": "IERC20Metadata",
                    "nameLocations": [
                      "1150:14:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 755,
                    "src": "1150:14:1"
                  },
                  "id": 153,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1150:14:1"
                },
                {
                  "baseName": {
                    "id": 154,
                    "name": "IERC20Errors",
                    "nameLocations": [
                      "1166:12:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 41,
                    "src": "1166:12:1"
                  },
                  "id": 155,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1166:12:1"
                }
              ],
              "canonicalName": "ERC20",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 147,
                "nodeType": "StructuredDocumentation",
                "src": "348:757:1",
                "text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."
              },
              "fullyImplemented": true,
              "id": 651,
              "linearizedBaseContracts": [
                651,
                41,
                755,
                729,
                785
              ],
              "name": "ERC20",
              "nameLocation": "1124:5:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 159,
                  "mutability": "mutable",
                  "name": "_balances",
                  "nameLocation": "1229:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1185:53:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 158,
                    "keyName": "account",
                    "keyNameLocation": "1201:7:1",
                    "keyType": {
                      "id": 156,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1193:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1185:35:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 157,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1212:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 165,
                  "mutability": "mutable",
                  "name": "_allowances",
                  "nameLocation": "1317:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1245:83:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "typeName": {
                    "id": 164,
                    "keyName": "account",
                    "keyNameLocation": "1261:7:1",
                    "keyType": {
                      "id": 160,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1253:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1245:63:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(address => uint256))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 163,
                      "keyName": "spender",
                      "keyNameLocation": "1288:7:1",
                      "keyType": {
                        "id": 161,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1280:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "1272:35:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 162,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1299:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 167,
                  "mutability": "mutable",
                  "name": "_totalSupply",
                  "nameLocation": "1351:12:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1335:28:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 166,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1335:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 169,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1385:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1370:20:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 168,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1370:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 171,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1411:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1396:22:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 170,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1396:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 187,
                    "nodeType": "Block",
                    "src": "1638:57:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 181,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 179,
                            "name": "_name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 169,
                            "src": "1648:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 180,
                            "name": "name_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 174,
                            "src": "1656:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "1648:13:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 182,
                        "nodeType": "ExpressionStatement",
                        "src": "1648:13:1"
                      },
                      {
                        "expression": {
                          "id": 185,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 183,
                            "name": "_symbol",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 171,
                            "src": "1671:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 184,
                            "name": "symbol_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 176,
                            "src": "1681:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "1671:17:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 186,
                        "nodeType": "ExpressionStatement",
                        "src": "1671:17:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 172,
                    "nodeType": "StructuredDocumentation",
                    "src": "1425:152:1",
                    "text": " @dev Sets the values for {name} and {symbol}.\n Both values are immutable: they can only be set once during construction."
                  },
                  "id": 188,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 177,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 174,
                        "mutability": "mutable",
                        "name": "name_",
                        "nameLocation": "1608:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 188,
                        "src": "1594:19:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 173,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1594:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 176,
                        "mutability": "mutable",
                        "name": "symbol_",
                        "nameLocation": "1629:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 188,
                        "src": "1615:21:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 175,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1615:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1593:44:1"
                  },
                  "returnParameters": {
                    "id": 178,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1638:0:1"
                  },
                  "scope": 651,
                  "src": "1582:113:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "baseFunctions": [
                    742
                  ],
                  "body": {
                    "id": 196,
                    "nodeType": "Block",
                    "src": "1820:29:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 194,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 169,
                          "src": "1837:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 193,
                        "id": 195,
                        "nodeType": "Return",
                        "src": "1830:12:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 189,
                    "nodeType": "StructuredDocumentation",
                    "src": "1701:54:1",
                    "text": " @dev Returns the name of the token."
                  },
                  "functionSelector": "06fdde03",
                  "id": 197,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "name",
                  "nameLocation": "1769:4:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 190,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1773:2:1"
                  },
                  "returnParameters": {
                    "id": 193,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 192,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 197,
                        "src": "1805:13:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 191,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1805:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1804:15:1"
                  },
                  "scope": 651,
                  "src": "1760:89:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    748
                  ],
                  "body": {
                    "id": 205,
                    "nodeType": "Block",
                    "src": "2024:31:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 203,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 171,
                          "src": "2041:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 202,
                        "id": 204,
                        "nodeType": "Return",
                        "src": "2034:14:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 198,
                    "nodeType": "StructuredDocumentation",
                    "src": "1855:102:1",
                    "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
                  },
                  "functionSelector": "95d89b41",
                  "id": 206,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "symbol",
                  "nameLocation": "1971:6:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 199,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1977:2:1"
                  },
                  "returnParameters": {
                    "id": 202,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 201,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 206,
                        "src": "2009:13:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 200,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2009:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2008:15:1"
                  },
                  "scope": 651,
                  "src": "1962:93:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    754
                  ],
                  "body": {
                    "id": 214,
                    "nodeType": "Block",
                    "src": "2744:26:1",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "3138",
                          "id": 212,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2761:2:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_18_by_1",
                            "typeString": "int_const 18"
                          },
                          "value": "18"
                        },
                        "functionReturnParameters": 211,
                        "id": 213,
                        "nodeType": "Return",
                        "src": "2754:9:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 207,
                    "nodeType": "StructuredDocumentation",
                    "src": "2061:622:1",
                    "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
                  },
                  "functionSelector": "313ce567",
                  "id": 215,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "decimals",
                  "nameLocation": "2697:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 208,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2705:2:1"
                  },
                  "returnParameters": {
                    "id": 211,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 210,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 215,
                        "src": "2737:5:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 209,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "2737:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2736:7:1"
                  },
                  "scope": 651,
                  "src": "2688:82:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    678
                  ],
                  "body": {
                    "id": 223,
                    "nodeType": "Block",
                    "src": "2891:36:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 221,
                          "name": "_totalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 167,
                          "src": "2908:12:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 220,
                        "id": 222,
                        "nodeType": "Return",
                        "src": "2901:19:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 216,
                    "nodeType": "StructuredDocumentation",
                    "src": "2776:49:1",
                    "text": " @dev See {IERC20-totalSupply}."
                  },
                  "functionSelector": "18160ddd",
                  "id": 224,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "2839:11:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 217,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2850:2:1"
                  },
                  "returnParameters": {
                    "id": 220,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 219,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 224,
                        "src": "2882:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 218,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2882:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2881:9:1"
                  },
                  "scope": 651,
                  "src": "2830:97:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    686
                  ],
                  "body": {
                    "id": 236,
                    "nodeType": "Block",
                    "src": "3059:42:1",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 232,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 159,
                            "src": "3076:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 234,
                          "indexExpression": {
                            "id": 233,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 227,
                            "src": "3086:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3076:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 231,
                        "id": 235,
                        "nodeType": "Return",
                        "src": "3069:25:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 225,
                    "nodeType": "StructuredDocumentation",
                    "src": "2933:47:1",
                    "text": " @dev See {IERC20-balanceOf}."
                  },
                  "functionSelector": "70a08231",
                  "id": 237,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "2994:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 228,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 227,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "3012:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "3004:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 226,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3004:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3003:17:1"
                  },
                  "returnParameters": {
                    "id": 231,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 230,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "3050:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 229,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3050:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3049:9:1"
                  },
                  "scope": 651,
                  "src": "2985:116:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    696
                  ],
                  "body": {
                    "id": 260,
                    "nodeType": "Block",
                    "src": "3371:103:1",
                    "statements": [
                      {
                        "assignments": [
                          248
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 248,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "3389:5:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 260,
                            "src": "3381:13:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 247,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3381:7:1",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 251,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 249,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "3397:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 250,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3397:12:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3381:28:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 253,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 248,
                              "src": "3429:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 254,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 240,
                              "src": "3436:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 255,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 242,
                              "src": "3440:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 252,
                            "name": "_transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "3419:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 256,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3419:27:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 257,
                        "nodeType": "ExpressionStatement",
                        "src": "3419:27:1"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 258,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3463:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 246,
                        "id": 259,
                        "nodeType": "Return",
                        "src": "3456:11:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 238,
                    "nodeType": "StructuredDocumentation",
                    "src": "3107:184:1",
                    "text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
                  },
                  "functionSelector": "a9059cbb",
                  "id": 261,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "3305:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 243,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 240,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3322:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 261,
                        "src": "3314:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 239,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3314:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 242,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "3334:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 261,
                        "src": "3326:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 241,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3326:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3313:27:1"
                  },
                  "returnParameters": {
                    "id": 246,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 245,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 261,
                        "src": "3365:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 244,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3365:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3364:6:1"
                  },
                  "scope": 651,
                  "src": "3296:178:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    706
                  ],
                  "body": {
                    "id": 277,
                    "nodeType": "Block",
                    "src": "3621:51:1",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 271,
                              "name": "_allowances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 165,
                              "src": "3638:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 273,
                            "indexExpression": {
                              "id": 272,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 264,
                              "src": "3650:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3638:18:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 275,
                          "indexExpression": {
                            "id": 274,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 266,
                            "src": "3657:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3638:27:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 270,
                        "id": 276,
                        "nodeType": "Return",
                        "src": "3631:34:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 262,
                    "nodeType": "StructuredDocumentation",
                    "src": "3480:47:1",
                    "text": " @dev See {IERC20-allowance}."
                  },
                  "functionSelector": "dd62ed3e",
                  "id": 278,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nameLocation": "3541:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 267,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 264,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "3559:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 278,
                        "src": "3551:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 263,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3551:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 266,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "3574:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 278,
                        "src": "3566:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 265,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3566:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3550:32:1"
                  },
                  "returnParameters": {
                    "id": 270,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 269,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 278,
                        "src": "3612:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 268,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3612:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3611:9:1"
                  },
                  "scope": 651,
                  "src": "3532:140:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    716
                  ],
                  "body": {
                    "id": 301,
                    "nodeType": "Block",
                    "src": "4058:107:1",
                    "statements": [
                      {
                        "assignments": [
                          289
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 289,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "4076:5:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 301,
                            "src": "4068:13:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 288,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4068:7:1",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 292,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 290,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "4084:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 291,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4084:12:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4068:28:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 294,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 289,
                              "src": "4115:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 295,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 281,
                              "src": "4122:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 296,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 283,
                              "src": "4131:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 293,
                            "name": "_approve",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              542,
                              602
                            ],
                            "referencedDeclaration": 542,
                            "src": "4106:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 297,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4106:31:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 298,
                        "nodeType": "ExpressionStatement",
                        "src": "4106:31:1"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 299,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4154:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 287,
                        "id": 300,
                        "nodeType": "Return",
                        "src": "4147:11:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 279,
                    "nodeType": "StructuredDocumentation",
                    "src": "3678:296:1",
                    "text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 302,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "3988:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 284,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 281,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "4004:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 302,
                        "src": "3996:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 280,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3996:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 283,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4021:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 302,
                        "src": "4013:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 282,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4013:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3995:32:1"
                  },
                  "returnParameters": {
                    "id": 287,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 286,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 302,
                        "src": "4052:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 285,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4052:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4051:6:1"
                  },
                  "scope": 651,
                  "src": "3979:186:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    728
                  ],
                  "body": {
                    "id": 333,
                    "nodeType": "Block",
                    "src": "4850:151:1",
                    "statements": [
                      {
                        "assignments": [
                          315
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 315,
                            "mutability": "mutable",
                            "name": "spender",
                            "nameLocation": "4868:7:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 333,
                            "src": "4860:15:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 314,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4860:7:1",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 318,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 316,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "4878:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 317,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4878:12:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4860:30:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 320,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 305,
                              "src": "4916:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 321,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 315,
                              "src": "4922:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 322,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 309,
                              "src": "4931:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 319,
                            "name": "_spendAllowance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 650,
                            "src": "4900:15:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 323,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4900:37:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 324,
                        "nodeType": "ExpressionStatement",
                        "src": "4900:37:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 326,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 305,
                              "src": "4957:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 327,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 307,
                              "src": "4963:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 328,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 309,
                              "src": "4967:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 325,
                            "name": "_transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "4947:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 329,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4947:26:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 330,
                        "nodeType": "ExpressionStatement",
                        "src": "4947:26:1"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 331,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4990:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 313,
                        "id": 332,
                        "nodeType": "Return",
                        "src": "4983:11:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 303,
                    "nodeType": "StructuredDocumentation",
                    "src": "4171:581:1",
                    "text": " @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
                  },
                  "functionSelector": "23b872dd",
                  "id": 334,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "4766:12:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 310,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 305,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "4787:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 334,
                        "src": "4779:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 304,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4779:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 307,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "4801:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 334,
                        "src": "4793:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 306,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4793:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 309,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4813:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 334,
                        "src": "4805:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 308,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4805:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4778:41:1"
                  },
                  "returnParameters": {
                    "id": 313,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 312,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 334,
                        "src": "4844:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 311,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4844:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4843:6:1"
                  },
                  "scope": 651,
                  "src": "4757:244:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 380,
                    "nodeType": "Block",
                    "src": "5443:231:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 349,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 344,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 337,
                            "src": "5457:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 347,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5473:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 346,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5465:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 345,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5465:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5465:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5457:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 358,
                        "nodeType": "IfStatement",
                        "src": "5453:86:1",
                        "trueBody": {
                          "id": 357,
                          "nodeType": "Block",
                          "src": "5477:62:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 353,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "5525:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 352,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "5517:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 351,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "5517:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 354,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5517:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 350,
                                  "name": "ERC20InvalidSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 16,
                                  "src": "5498:18:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 355,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5498:30:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 356,
                              "nodeType": "RevertStatement",
                              "src": "5491:37:1"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 364,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 359,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 339,
                            "src": "5552:2:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 362,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5566:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 361,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5558:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 360,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5558:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 363,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5558:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5552:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 373,
                        "nodeType": "IfStatement",
                        "src": "5548:86:1",
                        "trueBody": {
                          "id": 372,
                          "nodeType": "Block",
                          "src": "5570:64:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 368,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "5620:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 367,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "5612:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 366,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "5612:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 369,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5612:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 365,
                                  "name": "ERC20InvalidReceiver",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 21,
                                  "src": "5591:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 370,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5591:32:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 371,
                              "nodeType": "RevertStatement",
                              "src": "5584:39:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 375,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 337,
                              "src": "5651:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 376,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 339,
                              "src": "5657:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 377,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 341,
                              "src": "5661:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 374,
                            "name": "_update",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "5643:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 378,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5643:24:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 379,
                        "nodeType": "ExpressionStatement",
                        "src": "5643:24:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 335,
                    "nodeType": "StructuredDocumentation",
                    "src": "5007:362:1",
                    "text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
                  },
                  "id": 381,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_transfer",
                  "nameLocation": "5383:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 342,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 337,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "5401:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 381,
                        "src": "5393:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 336,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5393:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 339,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "5415:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 381,
                        "src": "5407:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 338,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5407:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 341,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "5427:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 381,
                        "src": "5419:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 340,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5419:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5392:41:1"
                  },
                  "returnParameters": {
                    "id": 343,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5443:0:1"
                  },
                  "scope": 651,
                  "src": "5374:300:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 457,
                    "nodeType": "Block",
                    "src": "6064:1032:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 391,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 384,
                            "src": "6078:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 394,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6094:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 393,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6086:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 392,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "6086:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 395,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6086:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "6078:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 428,
                          "nodeType": "Block",
                          "src": "6252:362:1",
                          "statements": [
                            {
                              "assignments": [
                                403
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 403,
                                  "mutability": "mutable",
                                  "name": "fromBalance",
                                  "nameLocation": "6274:11:1",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 428,
                                  "src": "6266:19:1",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 402,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6266:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 407,
                              "initialValue": {
                                "baseExpression": {
                                  "id": 404,
                                  "name": "_balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 159,
                                  "src": "6288:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 406,
                                "indexExpression": {
                                  "id": 405,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 384,
                                  "src": "6298:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6288:15:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "6266:37:1"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 410,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 408,
                                  "name": "fromBalance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 403,
                                  "src": "6321:11:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 409,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 388,
                                  "src": "6335:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6321:19:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 418,
                              "nodeType": "IfStatement",
                              "src": "6317:115:1",
                              "trueBody": {
                                "id": 417,
                                "nodeType": "Block",
                                "src": "6342:90:1",
                                "statements": [
                                  {
                                    "errorCall": {
                                      "arguments": [
                                        {
                                          "id": 412,
                                          "name": "from",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 384,
                                          "src": "6392:4:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 413,
                                          "name": "fromBalance",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 403,
                                          "src": "6398:11:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "id": 414,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 388,
                                          "src": "6411:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 411,
                                        "name": "ERC20InsufficientBalance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 11,
                                        "src": "6367:24:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
                                          "typeString": "function (address,uint256,uint256) pure returns (error)"
                                        }
                                      },
                                      "id": 415,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "6367:50:1",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_error",
                                        "typeString": "error"
                                      }
                                    },
                                    "id": 416,
                                    "nodeType": "RevertStatement",
                                    "src": "6360:57:1"
                                  }
                                ]
                              }
                            },
                            {
                              "id": 427,
                              "nodeType": "UncheckedBlock",
                              "src": "6445:159:1",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 425,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "baseExpression": {
                                        "id": 419,
                                        "name": "_balances",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 159,
                                        "src": "6552:9:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                          "typeString": "mapping(address => uint256)"
                                        }
                                      },
                                      "id": 421,
                                      "indexExpression": {
                                        "id": 420,
                                        "name": "from",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 384,
                                        "src": "6562:4:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "nodeType": "IndexAccess",
                                      "src": "6552:15:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 424,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 422,
                                        "name": "fromBalance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 403,
                                        "src": "6570:11:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "id": 423,
                                        "name": "value",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 388,
                                        "src": "6584:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "6570:19:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "6552:37:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 426,
                                  "nodeType": "ExpressionStatement",
                                  "src": "6552:37:1"
                                }
                              ]
                            }
                          ]
                        },
                        "id": 429,
                        "nodeType": "IfStatement",
                        "src": "6074:540:1",
                        "trueBody": {
                          "id": 401,
                          "nodeType": "Block",
                          "src": "6098:148:1",
                          "statements": [
                            {
                              "expression": {
                                "id": 399,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 397,
                                  "name": "_totalSupply",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 167,
                                  "src": "6214:12:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "id": 398,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 388,
                                  "src": "6230:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6214:21:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 400,
                              "nodeType": "ExpressionStatement",
                              "src": "6214:21:1"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 435,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 430,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 386,
                            "src": "6628:2:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 433,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6642:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 432,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6634:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 431,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "6634:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 434,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6634:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "6628:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 449,
                          "nodeType": "Block",
                          "src": "6843:206:1",
                          "statements": [
                            {
                              "id": 448,
                              "nodeType": "UncheckedBlock",
                              "src": "6857:182:1",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 446,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "baseExpression": {
                                        "id": 442,
                                        "name": "_balances",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 159,
                                        "src": "7002:9:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                          "typeString": "mapping(address => uint256)"
                                        }
                                      },
                                      "id": 444,
                                      "indexExpression": {
                                        "id": 443,
                                        "name": "to",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 386,
                                        "src": "7012:2:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "nodeType": "IndexAccess",
                                      "src": "7002:13:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "id": 445,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 388,
                                      "src": "7019:5:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "7002:22:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 447,
                                  "nodeType": "ExpressionStatement",
                                  "src": "7002:22:1"
                                }
                              ]
                            }
                          ]
                        },
                        "id": 450,
                        "nodeType": "IfStatement",
                        "src": "6624:425:1",
                        "trueBody": {
                          "id": 441,
                          "nodeType": "Block",
                          "src": "6646:191:1",
                          "statements": [
                            {
                              "id": 440,
                              "nodeType": "UncheckedBlock",
                              "src": "6660:167:1",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 438,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 436,
                                      "name": "_totalSupply",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 167,
                                      "src": "6791:12:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "-=",
                                    "rightHandSide": {
                                      "id": 437,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 388,
                                      "src": "6807:5:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "6791:21:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 439,
                                  "nodeType": "ExpressionStatement",
                                  "src": "6791:21:1"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 452,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 384,
                              "src": "7073:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 453,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 386,
                              "src": "7079:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 454,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 388,
                              "src": "7083:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 451,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 663,
                            "src": "7064:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 455,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7064:25:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 456,
                        "nodeType": "EmitStatement",
                        "src": "7059:30:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 382,
                    "nodeType": "StructuredDocumentation",
                    "src": "5680:304:1",
                    "text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
                  },
                  "id": 458,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_update",
                  "nameLocation": "5998:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 389,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 384,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "6014:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 458,
                        "src": "6006:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 383,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6006:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 386,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "6028:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 458,
                        "src": "6020:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 385,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6020:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 388,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "6040:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 458,
                        "src": "6032:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 387,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6032:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6005:41:1"
                  },
                  "returnParameters": {
                    "id": 390,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6064:0:1"
                  },
                  "scope": 651,
                  "src": "5989:1107:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 490,
                    "nodeType": "Block",
                    "src": "7495:152:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 471,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 466,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 461,
                            "src": "7509:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 469,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7528:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 468,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7520:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 467,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "7520:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 470,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7520:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "7509:21:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 480,
                        "nodeType": "IfStatement",
                        "src": "7505:91:1",
                        "trueBody": {
                          "id": 479,
                          "nodeType": "Block",
                          "src": "7532:64:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 475,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7582:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 474,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "7574:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 473,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "7574:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 476,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "7574:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 472,
                                  "name": "ERC20InvalidReceiver",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 21,
                                  "src": "7553:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 477,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7553:32:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 478,
                              "nodeType": "RevertStatement",
                              "src": "7546:39:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 484,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7621:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 483,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "7613:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 482,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "7613:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 485,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7613:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 486,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 461,
                              "src": "7625:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 487,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 463,
                              "src": "7634:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 481,
                            "name": "_update",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "7605:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 488,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7605:35:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 489,
                        "nodeType": "ExpressionStatement",
                        "src": "7605:35:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 459,
                    "nodeType": "StructuredDocumentation",
                    "src": "7102:332:1",
                    "text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
                  },
                  "id": 491,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_mint",
                  "nameLocation": "7448:5:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 464,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 461,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "7462:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 491,
                        "src": "7454:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 460,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7454:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 463,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "7479:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 491,
                        "src": "7471:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 462,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7471:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7453:32:1"
                  },
                  "returnParameters": {
                    "id": 465,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7495:0:1"
                  },
                  "scope": 651,
                  "src": "7439:208:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 523,
                    "nodeType": "Block",
                    "src": "8021:150:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 504,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 499,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 494,
                            "src": "8035:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 502,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8054:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 501,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "8046:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 500,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "8046:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 503,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8046:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "8035:21:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 513,
                        "nodeType": "IfStatement",
                        "src": "8031:89:1",
                        "trueBody": {
                          "id": 512,
                          "nodeType": "Block",
                          "src": "8058:62:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 508,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8106:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 507,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "8098:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 506,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "8098:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 509,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "8098:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 505,
                                  "name": "ERC20InvalidSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 16,
                                  "src": "8079:18:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 510,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8079:30:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 511,
                              "nodeType": "RevertStatement",
                              "src": "8072:37:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 515,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 494,
                              "src": "8137:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 518,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8154:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 517,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8146:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 516,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "8146:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 519,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8146:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 520,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 496,
                              "src": "8158:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 514,
                            "name": "_update",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "8129:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 521,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8129:35:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 522,
                        "nodeType": "ExpressionStatement",
                        "src": "8129:35:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 492,
                    "nodeType": "StructuredDocumentation",
                    "src": "7653:307:1",
                    "text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
                  },
                  "id": 524,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_burn",
                  "nameLocation": "7974:5:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 497,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 494,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "7988:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 524,
                        "src": "7980:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 493,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7980:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 496,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "8005:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 524,
                        "src": "7997:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 495,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7997:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7979:32:1"
                  },
                  "returnParameters": {
                    "id": 498,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8021:0:1"
                  },
                  "scope": 651,
                  "src": "7965:206:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 541,
                    "nodeType": "Block",
                    "src": "8781:54:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 535,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 527,
                              "src": "8800:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 536,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "8807:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 537,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 531,
                              "src": "8816:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "74727565",
                              "id": 538,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8823:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 534,
                            "name": "_approve",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              542,
                              602
                            ],
                            "referencedDeclaration": 602,
                            "src": "8791:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
                              "typeString": "function (address,address,uint256,bool)"
                            }
                          },
                          "id": 539,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8791:37:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 540,
                        "nodeType": "ExpressionStatement",
                        "src": "8791:37:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 525,
                    "nodeType": "StructuredDocumentation",
                    "src": "8177:525:1",
                    "text": " @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
                  },
                  "id": 542,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_approve",
                  "nameLocation": "8716:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 532,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 527,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "8733:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 542,
                        "src": "8725:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 526,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8725:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 529,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "8748:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 542,
                        "src": "8740:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 528,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8740:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 531,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "8765:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 542,
                        "src": "8757:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 530,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8757:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8724:47:1"
                  },
                  "returnParameters": {
                    "id": 533,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8781:0:1"
                  },
                  "scope": 651,
                  "src": "8707:128:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 601,
                    "nodeType": "Block",
                    "src": "9780:334:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 559,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 554,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 545,
                            "src": "9794:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 557,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9811:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 556,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9803:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 555,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9803:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 558,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9803:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "9794:19:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 568,
                        "nodeType": "IfStatement",
                        "src": "9790:89:1",
                        "trueBody": {
                          "id": 567,
                          "nodeType": "Block",
                          "src": "9815:64:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 563,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "9865:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 562,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "9857:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 561,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "9857:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 564,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "9857:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 560,
                                  "name": "ERC20InvalidApprover",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 35,
                                  "src": "9836:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 565,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9836:32:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 566,
                              "nodeType": "RevertStatement",
                              "src": "9829:39:1"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 574,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 569,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 547,
                            "src": "9892:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 572,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9911:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 571,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9903:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 570,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9903:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 573,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9903:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "9892:21:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 583,
                        "nodeType": "IfStatement",
                        "src": "9888:90:1",
                        "trueBody": {
                          "id": 582,
                          "nodeType": "Block",
                          "src": "9915:63:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 578,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "9964:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 577,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "9956:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 576,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "9956:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 579,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "9956:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 575,
                                  "name": "ERC20InvalidSpender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 40,
                                  "src": "9936:19:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 580,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9936:31:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 581,
                              "nodeType": "RevertStatement",
                              "src": "9929:38:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 590,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 584,
                                "name": "_allowances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 165,
                                "src": "9987:11:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 587,
                              "indexExpression": {
                                "id": 585,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 545,
                                "src": "9999:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9987:18:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 588,
                            "indexExpression": {
                              "id": 586,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 547,
                              "src": "10006:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9987:27:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 589,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 549,
                            "src": "10017:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9987:35:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 591,
                        "nodeType": "ExpressionStatement",
                        "src": "9987:35:1"
                      },
                      {
                        "condition": {
                          "id": 592,
                          "name": "emitEvent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 551,
                          "src": "10036:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 600,
                        "nodeType": "IfStatement",
                        "src": "10032:76:1",
                        "trueBody": {
                          "id": 599,
                          "nodeType": "Block",
                          "src": "10047:61:1",
                          "statements": [
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 594,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 545,
                                    "src": "10075:5:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 595,
                                    "name": "spender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 547,
                                    "src": "10082:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 596,
                                    "name": "value",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 549,
                                    "src": "10091:5:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 593,
                                  "name": "Approval",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 672,
                                  "src": "10066:8:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,address,uint256)"
                                  }
                                },
                                "id": 597,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "10066:31:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 598,
                              "nodeType": "EmitStatement",
                              "src": "10061:36:1"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 543,
                    "nodeType": "StructuredDocumentation",
                    "src": "8841:836:1",
                    "text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
                  },
                  "id": 602,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_approve",
                  "nameLocation": "9691:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 552,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 545,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "9708:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "9700:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 544,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9700:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 547,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "9723:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "9715:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 546,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9715:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 549,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "9740:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "9732:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 548,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9732:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 551,
                        "mutability": "mutable",
                        "name": "emitEvent",
                        "nameLocation": "9752:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "9747:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 550,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "9747:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9699:63:1"
                  },
                  "returnParameters": {
                    "id": 553,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9780:0:1"
                  },
                  "scope": 651,
                  "src": "9682:432:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 649,
                    "nodeType": "Block",
                    "src": "10485:387:1",
                    "statements": [
                      {
                        "assignments": [
                          613
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 613,
                            "mutability": "mutable",
                            "name": "currentAllowance",
                            "nameLocation": "10503:16:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 649,
                            "src": "10495:24:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 612,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10495:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 618,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 615,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 605,
                              "src": "10532:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 616,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 607,
                              "src": "10539:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 614,
                            "name": "allowance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 278,
                            "src": "10522:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address,address) view returns (uint256)"
                            }
                          },
                          "id": 617,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10522:25:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10495:52:1"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 625,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 619,
                            "name": "currentAllowance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 613,
                            "src": "10561:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 622,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "10585:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  },
                                  "typeName": {
                                    "id": 621,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "10585:7:1",
                                    "typeDescriptions": {}
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  }
                                ],
                                "id": 620,
                                "name": "type",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967269,
                                "src": "10580:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 623,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10580:13:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_meta_type_t_uint256",
                                "typeString": "type(uint256)"
                              }
                            },
                            "id": 624,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "10594:3:1",
                            "memberName": "max",
                            "nodeType": "MemberAccess",
                            "src": "10580:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10561:36:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 648,
                        "nodeType": "IfStatement",
                        "src": "10557:309:1",
                        "trueBody": {
                          "id": 647,
                          "nodeType": "Block",
                          "src": "10599:267:1",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 628,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 626,
                                  "name": "currentAllowance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 613,
                                  "src": "10617:16:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 627,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 609,
                                  "src": "10636:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "10617:24:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 636,
                              "nodeType": "IfStatement",
                              "src": "10613:130:1",
                              "trueBody": {
                                "id": 635,
                                "nodeType": "Block",
                                "src": "10643:100:1",
                                "statements": [
                                  {
                                    "errorCall": {
                                      "arguments": [
                                        {
                                          "id": 630,
                                          "name": "spender",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 607,
                                          "src": "10695:7:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 631,
                                          "name": "currentAllowance",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 613,
                                          "src": "10704:16:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "id": 632,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 609,
                                          "src": "10722:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 629,
                                        "name": "ERC20InsufficientAllowance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 30,
                                        "src": "10668:26:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
                                          "typeString": "function (address,uint256,uint256) pure returns (error)"
                                        }
                                      },
                                      "id": 633,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "10668:60:1",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_error",
                                        "typeString": "error"
                                      }
                                    },
                                    "id": 634,
                                    "nodeType": "RevertStatement",
                                    "src": "10661:67:1"
                                  }
                                ]
                              }
                            },
                            {
                              "id": 646,
                              "nodeType": "UncheckedBlock",
                              "src": "10756:100:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 638,
                                        "name": "owner",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 605,
                                        "src": "10793:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "id": 639,
                                        "name": "spender",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 607,
                                        "src": "10800:7:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 642,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 640,
                                          "name": "currentAllowance",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 613,
                                          "src": "10809:16:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "-",
                                        "rightExpression": {
                                          "id": 641,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 609,
                                          "src": "10828:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "10809:24:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      {
                                        "hexValue": "66616c7365",
                                        "id": 643,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10835:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "false"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      ],
                                      "id": 637,
                                      "name": "_approve",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [
                                        542,
                                        602
                                      ],
                                      "referencedDeclaration": 602,
                                      "src": "10784:8:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
                                        "typeString": "function (address,address,uint256,bool)"
                                      }
                                    },
                                    "id": 644,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "10784:57:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 645,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10784:57:1"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 603,
                    "nodeType": "StructuredDocumentation",
                    "src": "10120:271:1",
                    "text": " @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
                  },
                  "id": 650,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_spendAllowance",
                  "nameLocation": "10405:15:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 610,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 605,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "10429:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 650,
                        "src": "10421:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 604,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10421:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 607,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "10444:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 650,
                        "src": "10436:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 606,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10436:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 609,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "10461:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 650,
                        "src": "10453:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 608,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10453:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10420:47:1"
                  },
                  "returnParameters": {
                    "id": 611,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10485:0:1"
                  },
                  "scope": 651,
                  "src": "10396:476:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 652,
              "src": "1106:9768:1",
              "usedErrors": [
                11,
                16,
                21,
                30,
                35,
                40
              ],
              "usedEvents": [
                663,
                672
              ]
            }
          ],
          "src": "105:10770:1"
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "id": 2,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
          "exportedSymbols": {
            "IERC20": [
              729
            ]
          },
          "id": 730,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 653,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "106:24:2"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC20",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 654,
                "nodeType": "StructuredDocumentation",
                "src": "132:71:2",
                "text": " @dev Interface of the ERC-20 standard as defined in the ERC."
              },
              "fullyImplemented": false,
              "id": 729,
              "linearizedBaseContracts": [
                729
              ],
              "name": "IERC20",
              "nameLocation": "214:6:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 655,
                    "nodeType": "StructuredDocumentation",
                    "src": "227:158:2",
                    "text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
                  },
                  "eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                  "id": 663,
                  "name": "Transfer",
                  "nameLocation": "396:8:2",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 662,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 657,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "421:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 663,
                        "src": "405:20:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 656,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "405:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 659,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "443:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 663,
                        "src": "427:18:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 658,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "427:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 661,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "455:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 663,
                        "src": "447:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 660,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "447:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "404:57:2"
                  },
                  "src": "390:72:2"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 664,
                    "nodeType": "StructuredDocumentation",
                    "src": "468:148:2",
                    "text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
                  },
                  "eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
                  "id": 672,
                  "name": "Approval",
                  "nameLocation": "627:8:2",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 671,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 666,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "652:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 672,
                        "src": "636:21:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 665,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "636:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 668,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "675:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 672,
                        "src": "659:23:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 667,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "659:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 670,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "692:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 672,
                        "src": "684:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 669,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "684:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "635:63:2"
                  },
                  "src": "621:78:2"
                },
                {
                  "documentation": {
                    "id": 673,
                    "nodeType": "StructuredDocumentation",
                    "src": "705:65:2",
                    "text": " @dev Returns the value of tokens in existence."
                  },
                  "functionSelector": "18160ddd",
                  "id": 678,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "784:11:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 674,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "795:2:2"
                  },
                  "returnParameters": {
                    "id": 677,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 676,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 678,
                        "src": "821:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 675,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "821:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "820:9:2"
                  },
                  "scope": 729,
                  "src": "775:55:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 679,
                    "nodeType": "StructuredDocumentation",
                    "src": "836:71:2",
                    "text": " @dev Returns the value of tokens owned by `account`."
                  },
                  "functionSelector": "70a08231",
                  "id": 686,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "921:9:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 682,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 681,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "939:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 686,
                        "src": "931:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 680,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "931:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "930:17:2"
                  },
                  "returnParameters": {
                    "id": 685,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 684,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 686,
                        "src": "971:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 683,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "971:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "970:9:2"
                  },
                  "scope": 729,
                  "src": "912:68:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 687,
                    "nodeType": "StructuredDocumentation",
                    "src": "986:213:2",
                    "text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "a9059cbb",
                  "id": 696,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "1213:8:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 692,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 689,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "1230:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 696,
                        "src": "1222:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 688,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1222:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 691,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1242:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 696,
                        "src": "1234:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 690,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1234:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1221:27:2"
                  },
                  "returnParameters": {
                    "id": 695,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 694,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 696,
                        "src": "1267:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 693,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1267:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1266:6:2"
                  },
                  "scope": 729,
                  "src": "1204:69:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 697,
                    "nodeType": "StructuredDocumentation",
                    "src": "1279:264:2",
                    "text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
                  },
                  "functionSelector": "dd62ed3e",
                  "id": 706,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nameLocation": "1557:9:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 702,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 699,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1575:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 706,
                        "src": "1567:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 698,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1567:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 701,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "1590:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 706,
                        "src": "1582:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 700,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1582:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1566:32:2"
                  },
                  "returnParameters": {
                    "id": 705,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 704,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 706,
                        "src": "1622:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 703,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1622:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1621:9:2"
                  },
                  "scope": 729,
                  "src": "1548:83:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 707,
                    "nodeType": "StructuredDocumentation",
                    "src": "1637:667:2",
                    "text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 716,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "2318:7:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 712,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 709,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2334:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 716,
                        "src": "2326:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 708,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2326:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 711,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "2351:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 716,
                        "src": "2343:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 710,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2343:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2325:32:2"
                  },
                  "returnParameters": {
                    "id": 715,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 714,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 716,
                        "src": "2376:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 713,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2376:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2375:6:2"
                  },
                  "scope": 729,
                  "src": "2309:73:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 717,
                    "nodeType": "StructuredDocumentation",
                    "src": "2388:297:2",
                    "text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "23b872dd",
                  "id": 728,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "2699:12:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 724,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 719,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "2720:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "2712:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 718,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2712:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 721,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2734:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "2726:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 720,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2726:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 723,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "2746:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "2738:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 722,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2738:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2711:41:2"
                  },
                  "returnParameters": {
                    "id": 727,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 726,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "2771:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 725,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2771:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2770:6:2"
                  },
                  "scope": 729,
                  "src": "2690:87:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 730,
              "src": "204:2575:2",
              "usedErrors": [],
              "usedEvents": [
                663,
                672
              ]
            }
          ],
          "src": "106:2674:2"
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "id": 3,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
          "exportedSymbols": {
            "IERC20": [
              729
            ],
            "IERC20Metadata": [
              755
            ]
          },
          "id": 756,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 731,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "125:24:3"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
              "file": "../IERC20.sol",
              "id": 733,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 756,
              "sourceUnit": 730,
              "src": "151:37:3",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 732,
                    "name": "IERC20",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 729,
                    "src": "159:6:3",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 735,
                    "name": "IERC20",
                    "nameLocations": [
                      "306:6:3"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 729,
                    "src": "306:6:3"
                  },
                  "id": 736,
                  "nodeType": "InheritanceSpecifier",
                  "src": "306:6:3"
                }
              ],
              "canonicalName": "IERC20Metadata",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 734,
                "nodeType": "StructuredDocumentation",
                "src": "190:87:3",
                "text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
              },
              "fullyImplemented": false,
              "id": 755,
              "linearizedBaseContracts": [
                755,
                729
              ],
              "name": "IERC20Metadata",
              "nameLocation": "288:14:3",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 737,
                    "nodeType": "StructuredDocumentation",
                    "src": "319:54:3",
                    "text": " @dev Returns the name of the token."
                  },
                  "functionSelector": "06fdde03",
                  "id": 742,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "name",
                  "nameLocation": "387:4:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 738,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "391:2:3"
                  },
                  "returnParameters": {
                    "id": 741,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 740,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 742,
                        "src": "417:13:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 739,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "417:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "416:15:3"
                  },
                  "scope": 755,
                  "src": "378:54:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 743,
                    "nodeType": "StructuredDocumentation",
                    "src": "438:56:3",
                    "text": " @dev Returns the symbol of the token."
                  },
                  "functionSelector": "95d89b41",
                  "id": 748,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "symbol",
                  "nameLocation": "508:6:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 744,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "514:2:3"
                  },
                  "returnParameters": {
                    "id": 747,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 746,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 748,
                        "src": "540:13:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 745,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "540:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "539:15:3"
                  },
                  "scope": 755,
                  "src": "499:56:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 749,
                    "nodeType": "StructuredDocumentation",
                    "src": "561:65:3",
                    "text": " @dev Returns the decimals places of the token."
                  },
                  "functionSelector": "313ce567",
                  "id": 754,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "decimals",
                  "nameLocation": "640:8:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 750,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "648:2:3"
                  },
                  "returnParameters": {
                    "id": 753,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 752,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 754,
                        "src": "674:5:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 751,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "674:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "673:7:3"
                  },
                  "scope": 755,
                  "src": "631:50:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 756,
              "src": "278:405:3",
              "usedErrors": [],
              "usedEvents": [
                663,
                672
              ]
            }
          ],
          "src": "125:559:3"
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "id": 4,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
          "exportedSymbols": {
            "Context": [
              785
            ]
          },
          "id": 786,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 757,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "101:24:4"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "canonicalName": "Context",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 758,
                "nodeType": "StructuredDocumentation",
                "src": "127:496:4",
                "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
              },
              "fullyImplemented": true,
              "id": 785,
              "linearizedBaseContracts": [
                785
              ],
              "name": "Context",
              "nameLocation": "642:7:4",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 766,
                    "nodeType": "Block",
                    "src": "718:34:4",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 763,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "735:3:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 764,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "739:6:4",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "735:10:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 762,
                        "id": 765,
                        "nodeType": "Return",
                        "src": "728:17:4"
                      }
                    ]
                  },
                  "id": 767,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "665:10:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 759,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "675:2:4"
                  },
                  "returnParameters": {
                    "id": 762,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 761,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 767,
                        "src": "709:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 760,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "709:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "708:9:4"
                  },
                  "scope": 785,
                  "src": "656:96:4",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 775,
                    "nodeType": "Block",
                    "src": "825:32:4",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 772,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "842:3:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 773,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "846:4:4",
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "src": "842:8:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 771,
                        "id": 774,
                        "nodeType": "Return",
                        "src": "835:15:4"
                      }
                    ]
                  },
                  "id": 776,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "767:8:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 768,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "775:2:4"
                  },
                  "returnParameters": {
                    "id": 771,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 770,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 776,
                        "src": "809:14:4",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 769,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "809:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "808:16:4"
                  },
                  "scope": 785,
                  "src": "758:99:4",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 783,
                    "nodeType": "Block",
                    "src": "935:25:4",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "30",
                          "id": 781,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "952:1:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 780,
                        "id": 782,
                        "nodeType": "Return",
                        "src": "945:8:4"
                      }
                    ]
                  },
                  "id": 784,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_contextSuffixLength",
                  "nameLocation": "872:20:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 777,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "892:2:4"
                  },
                  "returnParameters": {
                    "id": 780,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 779,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 784,
                        "src": "926:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 778,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "926:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "925:9:4"
                  },
                  "scope": 785,
                  "src": "863:97:4",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 786,
              "src": "624:338:4",
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "src": "101:862:4"
        }
      },
      "contracts/MintableERC20.sol": {
        "id": 5,
        "ast": {
          "absolutePath": "contracts/MintableERC20.sol",
          "exportedSymbols": {
            "Context": [
              785
            ],
            "ERC20": [
              651
            ],
            "IERC20": [
              729
            ],
            "IERC20Errors": [
              41
            ],
            "IERC20Metadata": [
              755
            ],
            "MintableERC20": [
              926
            ]
          },
          "id": 927,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 787,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".28"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:5"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
              "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
              "id": 788,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 927,
              "sourceUnit": 652,
              "src": "58:55:5",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 789,
                    "name": "ERC20",
                    "nameLocations": [
                      "141:5:5"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 651,
                    "src": "141:5:5"
                  },
                  "id": 790,
                  "nodeType": "InheritanceSpecifier",
                  "src": "141:5:5"
                }
              ],
              "canonicalName": "MintableERC20",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 926,
              "linearizedBaseContracts": [
                926,
                651,
                41,
                755,
                729,
                785
              ],
              "name": "MintableERC20",
              "nameLocation": "124:13:5",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "6aa71d18",
                  "id": 794,
                  "mutability": "mutable",
                  "name": "lastMintTime",
                  "nameLocation": "202:12:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 926,
                  "src": "170:44:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 793,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 791,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "178:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "170:24:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 792,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "189:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "947a36fb",
                  "id": 796,
                  "mutability": "mutable",
                  "name": "interval",
                  "nameLocation": "235:8:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 926,
                  "src": "220:23:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 795,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "220:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "8da5cb5b",
                  "id": 798,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "264:5:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 926,
                  "src": "249:20:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 797,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "249:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 824,
                    "nodeType": "Block",
                    "src": "376:114:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 810,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "392:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 811,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "396:6:5",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "392:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "313030303030303030303030303030303030303030303030",
                              "id": 812,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "404:24:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100000000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000000"
                              },
                              "value": "100000000000000000000000"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_rational_100000000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000000"
                              }
                            ],
                            "id": 809,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 491,
                            "src": "386:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 813,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "386:43:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 814,
                        "nodeType": "ExpressionStatement",
                        "src": "386:43:5"
                      },
                      {
                        "expression": {
                          "id": 818,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 815,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 798,
                            "src": "440:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 816,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "448:3:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 817,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "452:6:5",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "448:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "440:18:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 819,
                        "nodeType": "ExpressionStatement",
                        "src": "440:18:5"
                      },
                      {
                        "expression": {
                          "id": 822,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 820,
                            "name": "interval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 796,
                            "src": "468:8:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "33363030",
                            "id": 821,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "479:4:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3600_by_1",
                              "typeString": "int_const 3600"
                            },
                            "value": "3600"
                          },
                          "src": "468:15:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 823,
                        "nodeType": "ExpressionStatement",
                        "src": "468:15:5"
                      }
                    ]
                  },
                  "id": 825,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 805,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 800,
                          "src": "360:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        {
                          "id": 806,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 802,
                          "src": "367:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "id": 807,
                      "kind": "baseConstructorSpecifier",
                      "modifierName": {
                        "id": 804,
                        "name": "ERC20",
                        "nameLocations": [
                          "354:5:5"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 651,
                        "src": "354:5:5"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "354:21:5"
                    }
                  ],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 803,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 800,
                        "mutability": "mutable",
                        "name": "_name",
                        "nameLocation": "311:5:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 825,
                        "src": "297:19:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 799,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "297:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 802,
                        "mutability": "mutable",
                        "name": "_symbol",
                        "nameLocation": "340:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 825,
                        "src": "326:21:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 801,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "326:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "287:66:5"
                  },
                  "returnParameters": {
                    "id": 808,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "376:0:5"
                  },
                  "scope": 926,
                  "src": "276:214:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 862,
                    "nodeType": "Block",
                    "src": "524:306:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 844,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 834,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "baseExpression": {
                                    "id": 829,
                                    "name": "lastMintTime",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 794,
                                    "src": "555:12:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 832,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 830,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "568:3:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 831,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "572:6:5",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "568:10:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "555:24:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 833,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "583:1:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "555:29:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 843,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 835,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967292,
                                    "src": "604:5:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 836,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "610:9:5",
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "604:15:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 842,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "baseExpression": {
                                      "id": 837,
                                      "name": "lastMintTime",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 794,
                                      "src": "622:12:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                        "typeString": "mapping(address => uint256)"
                                      }
                                    },
                                    "id": 840,
                                    "indexExpression": {
                                      "expression": {
                                        "id": 838,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4294967281,
                                        "src": "635:3:5",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 839,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "639:6:5",
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "635:10:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "622:24:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "id": 841,
                                    "name": "interval",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 796,
                                    "src": "649:8:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "622:35:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "604:53:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "555:102:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "596f75206e65656420746f207761697420616e20686f7572206265747765656e206d696e7473",
                              "id": 845,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "671:40:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_22b188f3c154fd21f132dd6187819a8549f822533761a9bc0591bd47e122f9f6",
                                "typeString": "literal_string \"You need to wait an hour between mints\""
                              },
                              "value": "You need to wait an hour between mints"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_22b188f3c154fd21f132dd6187819a8549f822533761a9bc0591bd47e122f9f6",
                                "typeString": "literal_string \"You need to wait an hour between mints\""
                              }
                            ],
                            "id": 828,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "534:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 846,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "534:187:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 847,
                        "nodeType": "ExpressionStatement",
                        "src": "534:187:5"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 849,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "737:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 850,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "741:6:5",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "737:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "313030303030303030303030303030303030303030",
                              "id": 851,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "749:21:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000"
                              },
                              "value": "100000000000000000000"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_rational_100000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000"
                              }
                            ],
                            "id": 848,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 491,
                            "src": "731:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 852,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "731:40:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 853,
                        "nodeType": "ExpressionStatement",
                        "src": "731:40:5"
                      },
                      {
                        "expression": {
                          "id": 860,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 854,
                              "name": "lastMintTime",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 794,
                              "src": "781:12:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 857,
                            "indexExpression": {
                              "expression": {
                                "id": 855,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "794:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 856,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "798:6:5",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "794:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "781:24:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 858,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967292,
                              "src": "808:5:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 859,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "814:9:5",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "808:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "781:42:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 861,
                        "nodeType": "ExpressionStatement",
                        "src": "781:42:5"
                      }
                    ]
                  },
                  "functionSelector": "2004ffd9",
                  "id": 863,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mintToken",
                  "nameLocation": "505:9:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 826,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "514:2:5"
                  },
                  "returnParameters": {
                    "id": 827,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "524:0:5"
                  },
                  "scope": 926,
                  "src": "496:334:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 877,
                    "nodeType": "Block",
                    "src": "906:40:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 873,
                              "name": "_target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 865,
                              "src": "922:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 874,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 867,
                              "src": "931:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 872,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 491,
                            "src": "916:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 875,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "916:23:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 876,
                        "nodeType": "ExpressionStatement",
                        "src": "916:23:5"
                      }
                    ]
                  },
                  "functionSelector": "484b973c",
                  "id": 878,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 870,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 869,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "896:9:5"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 925,
                        "src": "896:9:5"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "896:9:5"
                    }
                  ],
                  "name": "ownerMint",
                  "nameLocation": "845:9:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 868,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 865,
                        "mutability": "mutable",
                        "name": "_target",
                        "nameLocation": "863:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 878,
                        "src": "855:15:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 864,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "855:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 867,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "880:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 878,
                        "src": "872:15:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 866,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "872:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "854:34:5"
                  },
                  "returnParameters": {
                    "id": 871,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "906:0:5"
                  },
                  "scope": 926,
                  "src": "836:110:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 900,
                    "nodeType": "Block",
                    "src": "1014:130:5",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 898,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 889,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "id": 885,
                                "name": "lastMintTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 794,
                                "src": "1043:12:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 887,
                              "indexExpression": {
                                "id": 886,
                                "name": "_address",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 880,
                                "src": "1056:8:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1043:22:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 888,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1069:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "1043:27:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 897,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 890,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967292,
                                "src": "1086:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 891,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1092:9:5",
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "1086:15:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 896,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 892,
                                  "name": "lastMintTime",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 794,
                                  "src": "1104:12:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 894,
                                "indexExpression": {
                                  "id": 893,
                                  "name": "_address",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 880,
                                  "src": "1117:8:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1104:22:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "id": 895,
                                "name": "interval",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 796,
                                "src": "1129:8:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1104:33:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "1086:51:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "1043:94:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 884,
                        "id": 899,
                        "nodeType": "Return",
                        "src": "1024:113:5"
                      }
                    ]
                  },
                  "functionSelector": "c2ba4744",
                  "id": 901,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "canMint",
                  "nameLocation": "961:7:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 881,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 880,
                        "mutability": "mutable",
                        "name": "_address",
                        "nameLocation": "977:8:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 901,
                        "src": "969:16:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 879,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "969:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "968:18:5"
                  },
                  "returnParameters": {
                    "id": 884,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 883,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 901,
                        "src": "1008:4:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 882,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1008:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1007:6:5"
                  },
                  "scope": 926,
                  "src": "952:192:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 912,
                    "nodeType": "Block",
                    "src": "1207:40:5",
                    "statements": [
                      {
                        "expression": {
                          "id": 910,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 908,
                            "name": "interval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 796,
                            "src": "1217:8:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 909,
                            "name": "_newInterval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 903,
                            "src": "1228:12:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1217:23:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 911,
                        "nodeType": "ExpressionStatement",
                        "src": "1217:23:5"
                      }
                    ]
                  },
                  "functionSelector": "22a90082",
                  "id": 913,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 906,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 905,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "1197:9:5"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 925,
                        "src": "1197:9:5"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1197:9:5"
                    }
                  ],
                  "name": "setInterval",
                  "nameLocation": "1159:11:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 904,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 903,
                        "mutability": "mutable",
                        "name": "_newInterval",
                        "nameLocation": "1176:12:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 913,
                        "src": "1171:17:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 902,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1171:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1170:19:5"
                  },
                  "returnParameters": {
                    "id": 907,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1207:0:5"
                  },
                  "scope": 926,
                  "src": "1150:97:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 924,
                    "nodeType": "Block",
                    "src": "1274:69:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 919,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 916,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "1292:3:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 917,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1296:6:5",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "1292:10:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 918,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 798,
                                "src": "1306:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1292:19:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f74206f776e6572",
                              "id": 920,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1313:11:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682",
                                "typeString": "literal_string \"Not owner\""
                              },
                              "value": "Not owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682",
                                "typeString": "literal_string \"Not owner\""
                              }
                            ],
                            "id": 915,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1284:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 921,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1284:41:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 922,
                        "nodeType": "ExpressionStatement",
                        "src": "1284:41:5"
                      },
                      {
                        "id": 923,
                        "nodeType": "PlaceholderStatement",
                        "src": "1335:1:5"
                      }
                    ]
                  },
                  "id": 925,
                  "name": "onlyOwner",
                  "nameLocation": "1262:9:5",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 914,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1271:2:5"
                  },
                  "src": "1253:90:5",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 927,
              "src": "115:1230:5",
              "usedErrors": [
                11,
                16,
                21,
                30,
                35,
                40
              ],
              "usedEvents": [
                663,
                672
              ]
            }
          ],
          "src": "32:1314:5"
        }
      }
    },
    "contracts": {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
        "IERC1155Errors": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ERC1155InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC1155InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "idsLength",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "valuesLength",
                  "type": "uint256"
                }
              ],
              "name": "ERC1155InvalidArrayLength",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "ERC1155InvalidOperator",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC1155InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC1155InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "ERC1155MissingApprovalForAll",
              "type": "error"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        },
        "IERC20Errors": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allowance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientAllowance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSpender",
              "type": "error"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        },
        "IERC721Errors": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "ERC721IncorrectOwner",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ERC721InsufficientApproval",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidOperator",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidOwner",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ERC721NonexistentToken",
              "type": "error"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "ERC20": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allowance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientAllowance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSpender",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decimals()": "313ce567",
              "name()": "06fdde03",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "IERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "IERC20Metadata": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decimals()": "313ce567",
              "name()": "06fdde03",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "Context": {
          "abi": [],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        }
      },
      "contracts/MintableERC20.sol": {
        "MintableERC20": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "_name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "_symbol",
                  "type": "string"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allowance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientAllowance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSpender",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "canMint",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "interval",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "lastMintTime",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "mintToken",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_target",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "ownerMint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_newInterval",
                  "type": "uint256"
                }
              ],
              "name": "setInterval",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInterval\",\"type\":\"uint256\"}],\"name\":\"setInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintableERC20.sol\":\"MintableERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"contracts/MintableERC20.sol\":{\"keccak256\":\"0x0c61ac8d03457501eb9d53830afdcc1f44cae840b2a6f62ab70ce1ddeb4d43df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f1cd44daacd1bf1a29692bb513dd45ed41bd6827a106aff68febdcb9d73cedd3\",\"dweb:/ipfs/QmQkckg3EcmUjCtwxqCBnS2TRdQukzC6qM1Fa1j48GnfBE\"]}},\"version\":1}",
            "solc_version": "0.8.30+commit.73712a01.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 248/65840 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 7915\n// Code size = 27705 bytes\n\n      : @0 (gas: 1)\n     0: jump @14 if a0 == a1\n      : @1 (gas: 9)\n     3: a3 = a1 << 0x20\n     6: a3 = a3 >> 0x20\n     9: a4 = a0 << 0x20\n    12: a4 = a4 >> 0x20\n    15: a4 = a4 + a2\n    18: a3 = a3 - a4\n    21: a4 = a2 << 0x1\n    24: a4 = -a4\n    26: jump @7 if a4 >=u a3\n      : @2 (gas: 1)\n    29: jump @11 if a0 >=u a1\n      : @3 (gas: 1)\n    32: jump @14 if a2 == 0\n      : @4 (gas: 3)\n    35: a2 = a2 + a0\n    38: a3 = a0\n    40: fallthrough\n      : @5 (gas: 6)\n    41: a4 = u8 [a1]\n    43: a1 = a1 + 0x1\n    46: a5 = a3 + 0x1\n    49: u8 [a3] = a4\n    51: a3 = a5\n    53: jump @5 if a5 != a2\n      : @6 (gas: 1)\n    56: jump @14\n      : @7 (gas: 1)\n    58: jump @14 if a2 == 0\n      : @8 (gas: 3)\n    61: a2 = a2 + a0\n    64: a3 = a0\n    66: fallthrough\n      : @9 (gas: 6)\n    67: a4 = u8 [a1]\n    69: a1 = a1 + 0x1\n    72: a5 = a3 + 0x1\n    75: u8 [a3] = a4\n    77: a3 = a5\n    79: jump @9 if a5 != a2\n      : @10 (gas: 1)\n    82: jump @14\n      : @11 (gas: 1)\n    84: jump @14 if a2 == 0\n      : @12 (gas: 2)\n    87: i32 a3 = a2 + 0xffffffffffffffff\n    90: fallthrough\n      : @13 (gas: 7)\n    91: a4 = a1 + a3\n    94: a4 = u8 [a4]\n    96: a2 = a2 + 0xffffffffffffffff\n    99: a5 = a0 + a3\n   102: u8 [a5] = a4\n   104: i32 a3 = a3 + 0xffffffffffffffff\n   107: jump @13 if a2 != 0\n      : @14 (gas: 1)\n   110: ret\n      : @15 (gas: 2)\n   112: a1 = i32 [0x20100]\n   117: jump @241 if a1 == 0\n      : @16 (gas: 4)\n   121: a0 = 0x30130\n   126: i32 a0 = a0 + 0\n   128: ecalli 9 // 'set_immutable_data'\n   130: jump @241\n      : @17 (gas: 8)\n   133: sp = sp + 0xfffffffffffffff0\n   136: u64 [sp + 0x8] = ra\n   139: u64 [sp] = s0\n   141: a2 = a1\n   143: s0 = a0\n   145: a1 = 0x20\n   148: a0 = a2\n   150: ra = 2, jump @26\n      : @18 [@dyn 1] (gas: 100)\n   155: a1 = u8 [a0 + 0x1]\n   158: a2 = u8 [a0]\n   160: a3 = u8 [a0 + 0x2]\n   163: a4 = u8 [a0 + 0x3]\n   166: a1 = a1 << 0x8\n   169: a1 = a1 | a2\n   172: a3 = a3 << 0x10\n   175: a4 = a4 << 0x18\n   178: a3 = a3 | a4\n   181: a1 = a1 | a3\n   184: a2 = u8 [a0 + 0x5]\n   187: a3 = u8 [a0 + 0x4]\n   190: a4 = u8 [a0 + 0x6]\n   193: a5 = u8 [a0 + 0x7]\n   196: a2 = a2 << 0x8\n   199: a2 = a2 | a3\n   202: a4 = a4 << 0x10\n   205: a5 = a5 << 0x18\n   208: a4 = a4 | a5\n   211: a2 = a2 | a4\n   214: a2 = a2 << 0x20\n   217: t0 = a2 | a1\n   220: a2 = u8 [a0 + 0x9]\n   223: a3 = u8 [a0 + 0x8]\n   226: a4 = u8 [a0 + 0xa]\n   229: a5 = u8 [a0 + 0xb]\n   232: a2 = a2 << 0x8\n   235: a2 = a2 | a3\n   238: a4 = a4 << 0x10\n   241: a5 = a5 << 0x18\n   244: a4 = a4 | a5\n   247: a2 = a2 | a4\n   250: a3 = u8 [a0 + 0xd]\n   253: a4 = u8 [a0 + 0xc]\n   256: a5 = u8 [a0 + 0xe]\n   259: a1 = u8 [a0 + 0xf]\n   262: a3 = a3 << 0x8\n   265: a3 = a3 | a4\n   268: a5 = a5 << 0x10\n   271: a1 = a1 << 0x18\n   274: a1 = a1 | a5\n   277: a1 = a1 | a3\n   280: a1 = a1 << 0x20\n   283: t1 = a1 | a2\n   286: a1 = u8 [a0 + 0x11]\n   289: a3 = u8 [a0 + 0x10]\n   292: a4 = u8 [a0 + 0x12]\n   295: a5 = u8 [a0 + 0x13]\n   298: a1 = a1 << 0x8\n   301: a1 = a1 | a3\n   304: a4 = a4 << 0x10\n   307: a5 = a5 << 0x18\n   310: a4 = a4 | a5\n   313: a1 = a1 | a4\n   316: a3 = u8 [a0 + 0x15]\n   319: a4 = u8 [a0 + 0x14]\n   322: a5 = u8 [a0 + 0x16]\n   325: a2 = u8 [a0 + 0x17]\n   328: a3 = a3 << 0x8\n   331: a3 = a3 | a4\n   334: a5 = a5 << 0x10\n   337: a2 = a2 << 0x18\n   340: a2 = a2 | a5\n   343: a2 = a2 | a3\n   346: a2 = a2 << 0x20\n   349: a3 = a2 | a1\n   352: a1 = u8 [a0 + 0x19]\n   355: a2 = u8 [a0 + 0x18]\n   358: a4 = u8 [a0 + 0x1a]\n   361: a5 = u8 [a0 + 0x1b]\n   364: a1 = a1 << 0x8\n   367: a1 = a1 | a2\n   370: a4 = a4 << 0x10\n   373: a5 = a5 << 0x18\n   376: a4 = a4 | a5\n   379: a1 = a1 | a4\n   382: a2 = u8 [a0 + 0x1d]\n   385: a4 = u8 [a0 + 0x1c]\n   388: a5 = u8 [a0 + 0x1e]\n   391: a0 = u8 [a0 + 0x1f]\n   394: a2 = a2 << 0x8\n   397: a2 = a2 | a4\n   400: a5 = a5 << 0x10\n   403: a0 = a0 << 0x18\n   406: a0 = a0 | a5\n   409: a0 = a0 | a2\n   412: a0 = a0 << 0x20\n   415: a0 = a0 | a1\n   418: a0 = reverse a0\n   420: a1 = reverse a3\n   422: a2 = reverse t1\n   424: a3 = reverse t0\n   426: u64 [s0 + 0x18] = a3\n   429: u64 [s0 + 0x10] = a2\n   432: u64 [s0 + 0x8] = a1\n   435: u64 [s0] = a0\n   437: ra = u64 [sp + 0x8]\n   440: s0 = u64 [sp]\n   442: sp = sp + 0x10\n   445: ret\n      : @19 (gas: 12)\n   447: sp = sp + 0xffffffffffffffd8\n   450: u64 [sp + 0x20] = ra\n   453: u64 [sp + 0x18] = s0\n   456: u64 [sp + 0x10] = s1\n   459: a2 = u64 [a1]\n   461: u64 [sp + 0x8] = a2\n   464: a2 = u64 [a1 + 0x8]\n   467: u64 [sp] = a2\n   469: s0 = u64 [a1 + 0x10]\n   472: s1 = u64 [a1 + 0x18]\n   475: a1 = 0x20\n   478: ra = 4, jump @26\n      : @20 [@dyn 2] (gas: 71)\n   483: a1 = reverse s1\n   485: a2 = reverse s0\n   487: a3 = u64 [sp]\n   489: a3 = reverse a3\n   491: a4 = u64 [sp + 0x8]\n   494: a4 = reverse a4\n   496: u8 [a0 + 0x18] = a4\n   499: u8 [a0 + 0x10] = a3\n   502: u8 [a0 + 0x8] = a2\n   505: u8 [a0] = a1\n   507: a5 = a4 >> 0x38\n   510: u8 [a0 + 0x1f] = a5\n   513: a5 = a4 >> 0x30\n   516: u8 [a0 + 0x1e] = a5\n   519: a5 = a4 >> 0x28\n   522: u8 [a0 + 0x1d] = a5\n   525: a5 = a4 >> 0x20\n   528: u8 [a0 + 0x1c] = a5\n   531: a5 = a4 >> 0x18\n   534: u8 [a0 + 0x1b] = a5\n   537: a5 = a4 >> 0x10\n   540: u8 [a0 + 0x1a] = a5\n   543: a4 = a4 >> 0x8\n   546: u8 [a0 + 0x19] = a4\n   549: a4 = a3 >> 0x38\n   552: u8 [a0 + 0x17] = a4\n   555: a4 = a3 >> 0x30\n   558: u8 [a0 + 0x16] = a4\n   561: a4 = a3 >> 0x28\n   564: u8 [a0 + 0x15] = a4\n   567: a4 = a3 >> 0x20\n   570: u8 [a0 + 0x14] = a4\n   573: a4 = a3 >> 0x18\n   576: u8 [a0 + 0x13] = a4\n   579: a4 = a3 >> 0x10\n   582: u8 [a0 + 0x12] = a4\n   585: a3 = a3 >> 0x8\n   588: u8 [a0 + 0x11] = a3\n   591: a3 = a2 >> 0x38\n   594: u8 [a0 + 0xf] = a3\n   597: a3 = a2 >> 0x30\n   600: u8 [a0 + 0xe] = a3\n   603: a3 = a2 >> 0x28\n   606: u8 [a0 + 0xd] = a3\n   609: a3 = a2 >> 0x20\n   612: u8 [a0 + 0xc] = a3\n   615: a3 = a2 >> 0x18\n   618: u8 [a0 + 0xb] = a3\n   621: a3 = a2 >> 0x10\n   624: u8 [a0 + 0xa] = a3\n   627: a2 = a2 >> 0x8\n   630: u8 [a0 + 0x9] = a2\n   633: a2 = a1 >> 0x38\n   636: u8 [a0 + 0x7] = a2\n   639: a2 = a1 >> 0x30\n   642: u8 [a0 + 0x6] = a2\n   645: a2 = a1 >> 0x28\n   648: u8 [a0 + 0x5] = a2\n   651: a2 = a1 >> 0x20\n   654: u8 [a0 + 0x4] = a2\n   657: a2 = a1 >> 0x18\n   660: u8 [a0 + 0x3] = a2\n   663: a2 = a1 >> 0x10\n   666: u8 [a0 + 0x2] = a2\n   669: a1 = a1 >> 0x8\n   672: u8 [a0 + 0x1] = a1\n   675: ra = u64 [sp + 0x20]\n   678: s0 = u64 [sp + 0x18]\n   681: s1 = u64 [sp + 0x10]\n   684: sp = sp + 0x28\n   687: ret\n      : @21 (gas: 48)\n   689: sp = sp + 0xffffffffffffffa0\n   692: u64 [sp + 0x58] = ra\n   695: u64 [sp + 0x50] = s0\n   698: u64 [sp + 0x48] = s1\n   701: s0 = sp + 0x60\n   704: sp = sp & 0xffffffffffffffe0\n   707: s1 = a0\n   709: a0 = u64 [a1 + 0x18]\n   712: a2 = u64 [a1 + 0x10]\n   715: a3 = u64 [a1 + 0x8]\n   718: a1 = u64 [a1]\n   720: a0 = reverse a0\n   722: a2 = reverse a2\n   724: a3 = reverse a3\n   726: a1 = reverse a1\n   728: u64 [sp + 0x18] = a1\n   731: u64 [sp + 0x10] = a3\n   734: u64 [sp + 0x8] = a2\n   737: u64 [sp] = a0\n   739: u64 [sp + 56] = 0\n   742: u64 [sp + 48] = 0\n   745: u64 [sp + 40] = 0\n   748: u64 [sp + 32] = 0\n   751: u32 [sp + 64] = 0x20\n   755: i32 a1 = sp + 0\n   757: i32 a3 = sp + 0x20\n   760: i32 a4 = sp + 0x40\n   763: a2 = 0xffffffffffffffff\n   766: a0 = 0\n   768: ecalli 5 // 'get_storage'\n   770: a0 = u64 [sp + 0x38]\n   773: a1 = u64 [sp + 0x30]\n   776: a2 = u64 [sp + 0x28]\n   779: a3 = u64 [sp + 0x20]\n   782: a0 = reverse a0\n   784: a1 = reverse a1\n   786: a2 = reverse a2\n   788: a3 = reverse a3\n   790: u64 [s1 + 0x18] = a3\n   793: u64 [s1 + 0x10] = a2\n   796: u64 [s1 + 0x8] = a1\n   799: u64 [s1] = a0\n   801: sp = s0 + 0xffffffffffffffa0\n   804: ra = u64 [sp + 0x58]\n   807: s0 = u64 [sp + 0x50]\n   810: s1 = u64 [sp + 0x48]\n   813: sp = sp + 0x60\n   816: ret\n      : @22 (gas: 40)\n   818: sp = sp + 0xffffffffffffffa0\n   821: u64 [sp + 0x58] = ra\n   824: u64 [sp + 0x50] = s0\n   827: s0 = sp + 0x60\n   830: sp = sp & 0xffffffffffffffe0\n   833: t0 = u64 [a0]\n   835: a3 = u64 [a0 + 0x8]\n   838: a4 = u64 [a0 + 0x10]\n   841: a0 = u64 [a0 + 0x18]\n   844: t1 = u64 [a1]\n   846: a2 = u64 [a1 + 0x8]\n   849: a5 = u64 [a1 + 0x10]\n   852: a1 = u64 [a1 + 0x18]\n   855: t2 = reverse a0\n   857: a4 = reverse a4\n   859: a3 = reverse a3\n   861: a0 = reverse t0\n   863: t0 = reverse a1\n   865: a5 = reverse a5\n   867: a2 = reverse a2\n   869: a1 = reverse t1\n   871: u64 [sp + 0x18] = a0\n   874: u64 [sp + 0x10] = a3\n   877: u64 [sp + 0x8] = a4\n   880: u64 [sp] = t2\n   882: u64 [sp + 0x38] = a1\n   885: u64 [sp + 0x30] = a2\n   888: u64 [sp + 0x28] = a5\n   891: u64 [sp + 0x20] = t0\n   894: i32 a1 = sp + 0\n   896: i32 a3 = sp + 0x20\n   899: a2 = 0xffffffffffffffff\n   902: a4 = 0x20\n   905: a0 = 0\n   907: ecalli 10 // 'set_storage'\n   909: sp = s0 + 0xffffffffffffffa0\n   912: ra = u64 [sp + 0x58]\n   915: s0 = u64 [sp + 0x50]\n   918: sp = sp + 0x60\n   921: ret\n      : @23 (gas: 33)\n   923: sp = sp + 0xffffffffffffff20\n   927: u64 [sp + 0xd8] = ra\n   931: u64 [sp + 0xd0] = s0\n   935: u64 [sp + 0xc8] = s1\n   939: s0 = sp + 0xe0\n   943: sp = sp & 0xffffffffffffffe0\n   946: a5 = u64 [a4]\n   948: u64 [sp + 0x40] = a5\n   951: a5 = u64 [a4 + 0x8]\n   954: u64 [sp + 0x48] = a5\n   957: a5 = u64 [a4 + 0x10]\n   960: u64 [sp + 0x50] = a5\n   963: a4 = u64 [a4 + 0x18]\n   966: u64 [sp + 0x58] = a4\n   969: t0 = 0x6\n   972: a4 = u64 [a3]\n   974: u64 [sp + 0x18] = a4\n   977: a4 = u64 [a3 + 0x8]\n   980: u64 [sp + 0x20] = a4\n   983: a4 = u64 [a3 + 0x10]\n   986: u64 [sp + 0x28] = a4\n   989: a3 = u64 [a3 + 0x18]\n   992: u64 [sp + 0x30] = a3\n   995: s1 = u64 [a2]\n   997: a3 = u64 [a2 + 0x8]\n  1000: u64 [sp] = a3\n  1002: a3 = u64 [a2 + 0x10]\n  1005: u64 [sp + 0x8] = a3\n  1008: a2 = u64 [a2 + 0x18]\n  1011: u64 [sp + 0x10] = a2\n  1014: u64 [sp + 56] = 0x20\n  1018: ra = 0x8\n  1021: jump @26\n      : @24 [@dyn 3] (gas: 2)\n  1024: u64 [sp + 0x38] = a1\n  1027: ra = 8, jump @26\n      : @25 [@dyn 4] (gas: 46)\n  1032: a1 = reverse s1\n  1034: u64 [sp + 0x78] = a1\n  1037: a1 = u64 [sp]\n  1039: a1 = reverse a1\n  1041: u64 [sp + 0x70] = a1\n  1044: a1 = u64 [sp + 0x8]\n  1047: a1 = reverse a1\n  1049: u64 [sp + 0x68] = a1\n  1052: a1 = u64 [sp + 0x10]\n  1055: a1 = reverse a1\n  1057: u64 [sp + 0x60] = a1\n  1060: a1 = u64 [sp + 0x18]\n  1063: a1 = reverse a1\n  1065: u64 [sp + 0x98] = a1\n  1069: a1 = u64 [sp + 0x20]\n  1072: a1 = reverse a1\n  1074: u64 [sp + 0x90] = a1\n  1078: a1 = u64 [sp + 0x28]\n  1081: a1 = reverse a1\n  1083: u64 [sp + 0x88] = a1\n  1087: a1 = u64 [sp + 0x30]\n  1090: a1 = reverse a1\n  1092: u64 [sp + 0x80] = a1\n  1096: a1 = u64 [sp + 0x40]\n  1099: a1 = reverse a1\n  1101: u64 [sp + 0xb8] = a1\n  1105: a1 = u64 [sp + 0x48]\n  1108: a1 = reverse a1\n  1110: u64 [sp + 0xb0] = a1\n  1114: a1 = u64 [sp + 0x50]\n  1117: a1 = reverse a1\n  1119: u64 [sp + 0xa8] = a1\n  1123: a1 = u64 [sp + 0x58]\n  1126: a1 = reverse a1\n  1128: u64 [sp + 0xa0] = a1\n  1132: i32 a2 = a0 + 0\n  1134: a3 = i32 [sp + 0x38]\n  1137: i32 a0 = sp + 0x60\n  1140: a1 = 0x3\n  1143: ecalli 4 // 'deposit_event'\n  1145: sp = s0 + 0xffffffffffffff20\n  1149: ra = u64 [sp + 0xd8]\n  1153: s0 = u64 [sp + 0xd0]\n  1157: s1 = u64 [sp + 0xc8]\n  1161: sp = sp + 0xe0\n  1165: ret\n      : @26 (gas: 2)\n  1167: i32 a2 = a0 >> 0x10\n  1170: jump @31 if a2 != 0\n      : @27 (gas: 4)\n  1173: a1 = a1 + a0\n  1176: i32 a1 = a1 + 0x1f\n  1179: a1 = a1 & 0xffffffffffffffe0\n  1182: jump @31 if a1 >u 65536\n      : @28 (gas: 3)\n  1188: a2 = 0x200fc\n  1193: a3 = i32 [0x200fc]\n  1198: jump @30 if a3 >=u a1\n      : @29 (gas: 2)\n  1201: u32 [0x200fc] = a1\n  1206: fallthrough\n      : @30 (gas: 4)\n  1207: a1 = 0x20110\n  1212: i32 a0 = a0 + 0\n  1214: a0 = a0 + a1\n  1217: ret\n      : @31 (gas: 1)\n  1219: trap\n      : @32 (gas: 6)\n  1220: sp = sp + 0xfffffffffffffff0\n  1223: u64 [sp + 0x8] = ra\n  1226: u64 [sp] = s0\n  1228: s0 = a0 & 0x1\n  1231: ecalli 2 // 'call_data_size'\n  1233: fallthrough\n      : @33 (gas: 2)\n  1234: u32 [0x200f8] = a0\n  1239: jump @35 if s0 == 0\n      : @34 (gas: 1)\n  1242: ra = 10, jump @36\n      : @35 [@dyn 5] (gas: 18)\n  1246: ra = 0xc\n  1249: sp = sp + 0xfffffffffffffe10\n  1253: u64 [sp + 0x1e8] = ra\n  1257: u64 [sp + 0x1e0] = s0\n  1261: u64 [sp + 0x1d8] = s1\n  1265: s0 = sp + 0x1f0\n  1269: sp = sp + 0xffffffffffffe870\n  1273: sp = sp & 0xffffffffffffffe0\n  1276: s1 = sp\n  1278: a2 = s1 + 0x1078\n  1282: u64 [a2 + 832] = 0\n  1286: u64 [a2 + 824] = 0\n  1290: u64 [a2 + 808] = 0x80\n  1296: a0 = 0x40\n  1299: a1 = s1 + 0x13a0\n  1303: u64 [a2 + 816] = 0\n  1307: ra = 0xee\n  1311: jump @19\n      : @36 [@dyn 6] (gas: 16)\n  1314: sp = sp + 0xfffffffffffff808\n  1318: a0 = sp + 0x700\n  1322: u64 [a0 + 0xf0] = ra\n  1326: u64 [a0 + 0xe8] = s0\n  1330: u64 [a0 + 0xe0] = s1\n  1334: s0 = sp + 0x7f8\n  1338: sp = sp + 0xfffffffffffffd98\n  1342: sp = sp & 0xffffffffffffffe0\n  1345: s1 = sp\n  1347: u64 [s1 + 1816] = 0\n  1351: u64 [s1 + 1808] = 0\n  1355: u64 [s1 + 1792] = 0x80\n  1361: a0 = 0x40\n  1364: a1 = s1 + 0x700\n  1368: u64 [s1 + 1800] = 0\n  1372: ra = 14, jump @19\n      : @37 [@dyn 7] (gas: 7)\n  1377: u64 [s1 + 1848] = 0\n  1381: u64 [s1 + 1840] = 0\n  1385: u64 [s1 + 1832] = 0\n  1389: u64 [s1 + 1824] = 0\n  1393: i32 a0 = s1 + 0x720\n  1397: ecalli 11 // 'value_transferred'\n  1399: fallthrough\n      : @38 (gas: 9)\n  1400: a4 = s1 + 0x700\n  1404: a0 = u64 [a4 + 0x30]\n  1407: a1 = u64 [a4 + 0x38]\n  1410: a2 = u64 [a4 + 0x28]\n  1413: a3 = u64 [a4 + 0x20]\n  1416: a1 = a1 | a2\n  1419: a0 = a0 | a3\n  1422: a0 = a0 | a1\n  1425: jump @40 if a0 == 0\n      : @39 (gas: 1)\n  1428: jump @199\n      : @40 (gas: 9)\n  1431: a2 = u32 [0x200f8]\n  1436: u64 [s1 + 1752] = 0\n  1440: u64 [s1 + 1744] = 0\n  1444: u64 [s1 + 1736] = 0\n  1448: a0 = s1 + 0x6e0\n  1452: a1 = s1 + 0x6c0\n  1456: u64 [s1 + 0x118] = a2\n  1460: u64 [s1 + 0x6c0] = a2\n  1464: ra = 16, jump @757\n      : @41 [@dyn 8] (gas: 17)\n  1469: a4 = s1 + 0x600\n  1473: a3 = u64 [a4 + 0xf8]\n  1477: a2 = u64 [a4 + 0xf0]\n  1481: a1 = u64 [a4 + 0xe8]\n  1485: a0 = u64 [a4 + 0xe0]\n  1489: a4 = s1 + 0x100\n  1493: u64 [a4 + 0x10] = a3\n  1496: u64 [a4] = a1\n  1498: a3 = a3 | a1\n  1501: a1 = a0 | a2\n  1504: a1 = a1 | a3\n  1507: a1 = a1 >> 0x20\n  1510: u64 [a4 + 0x8] = a2\n  1513: a2 = a2 | a3\n  1516: a2 = a2 << 0x20\n  1519: a1 = a1 | a2\n  1522: jump @43 if a1 == 0\n      : @42 (gas: 1)\n  1525: jump @198\n      : @43 (gas: 3)\n  1528: u64 [s1 + 0xf8] = a0\n  1532: a1 = u64 [s1 + 0x118]\n  1536: ra = 18, jump @26\n      : @44 [@dyn 9] (gas: 5)\n  1541: i32 a0 = a0 + 0\n  1543: a1 = i32 [s1 + 0x118]\n  1547: a2 = 0\n  1549: ecalli 0 // 'call_data_copy'\n  1550: fallthrough\n      : @45 (gas: 2)\n  1551: a1 = u64 [s1 + 0x118]\n  1555: jump @47 if a1 >u 63\n      : @46 (gas: 1)\n  1559: jump @200\n      : @47 (gas: 3)\n  1562: a0 = s1 + 0x6a0\n  1566: a1 = u64 [s1 + 0xf8]\n  1570: ra = 20, jump @17\n      : @48 [@dyn 10] (gas: 8)\n  1575: a0 = u64 [s1 + 0x6b8]\n  1579: t0 = u64 [s1 + 0x6b0]\n  1583: a4 = u64 [s1 + 0x6a8]\n  1587: u64 [s1 + 0xf0] = a0\n  1591: a2 = t0 | a0\n  1594: a3 = a4 <u 0x1\n  1597: a3 = 0 if a2 != 0\n  1599: jump @50 if a3 != 0\n      : @49 (gas: 1)\n  1602: jump @201\n      : @50 (gas: 50)\n  1605: a3 = u64 [s1 + 0x6a0]\n  1609: t1 = u64 [s1 + 0xf8]\n  1613: t2 = u64 [s1 + 0x118]\n  1617: t2 = t2 + t1\n  1620: a1 = t2 <u t1\n  1623: t1 = t1 + a3\n  1626: u64 [s1 + 0x118] = t1\n  1630: a3 = t1 <u a3\n  1633: a2 = u64 [s1 + 0x100]\n  1637: a0 = a4 + a2\n  1640: a5 = a2\n  1642: t1 = a0 + a3\n  1645: a2 = t1 ^ a4\n  1648: a4 = t1 <u a4\n  1651: a4 = a3 if a2 == 0\n  1654: a2 = a5\n  1656: a5 = a5 + a1\n  1659: a2 = a5 <u a2\n  1662: a2 = a1 if a1 == 0\n  1665: a1 = u64 [s1 + 0x108]\n  1669: a3 = t0 + a1\n  1672: ra = a3 <u t0\n  1675: a0 = u64 [s1 + 0x110]\n  1679: t0 = u64 [s1 + 0xf0]\n  1683: t0 = t0 + a0\n  1686: ra = ra + t0\n  1689: t0 = a1 + a2\n  1692: a4 = a4 + a3\n  1695: a2 = a4 <u a3\n  1698: a3 = ra + a2\n  1701: a1 = t0 <u a1\n  1704: a1 = a1 + a0\n  1707: u64 [s1 + 0xf0] = t2\n  1711: u64 [s1 + 0x640] = t2\n  1715: u64 [s1 + 0xe8] = a5\n  1719: u64 [s1 + 0x648] = a5\n  1723: a0 = u64 [s1 + 0x118]\n  1727: a5 = s1 + 0x600\n  1731: u64 [a5 + 0x60] = a0\n  1734: u64 [s1 + 0x118] = t0\n  1738: u64 [s1 + 0x650] = t0\n  1742: u64 [s1 + 0xe0] = a1\n  1746: u64 [a5 + 0x58] = a1\n  1749: u64 [s1 + 0x668] = t1\n  1753: u64 [a5 + 0x70] = a4\n  1756: a0 = s1 + 0x680\n  1760: a1 = s1 + 0x660\n  1764: a2 = s1 + 0x640\n  1768: u64 [a5 + 0x78] = a3\n  1771: ra = 22, jump @768\n      : @51 [@dyn 11] (gas: 11)\n  1776: a2 = u64 [s1 + 0xf8]\n  1780: a4 = s1 + 0x100\n  1784: a0 = u64 [a4 + 0x8]\n  1787: a1 = u64 [a4 + 0x10]\n  1790: a0 = a0 | a1\n  1793: a1 = 0xffffffe0\n  1803: a1 = a2 <u a1\n  1806: a3 = u64 [a4]\n  1808: a1 = 0 if a3 != 0\n  1810: a1 = 0 if a0 != 0\n  1812: jump @53 if a1 != 0\n      : @52 (gas: 1)\n  1815: jump @198\n      : @53 (gas: 11)\n  1818: a0 = u64 [s1 + 0x698]\n  1822: u64 [s1 + 0xa0] = a0\n  1826: a0 = u64 [s1 + 0x690]\n  1830: u64 [s1 + 0x98] = a0\n  1834: a0 = u64 [s1 + 0x688]\n  1838: u64 [s1 + 0xa8] = a0\n  1842: a0 = u64 [s1 + 0x680]\n  1846: u64 [s1 + 0xb0] = a0\n  1850: i32 a1 = a2 + 0x20\n  1853: a0 = s1 + 0x620\n  1857: ra = 24, jump @17\n      : @54 [@dyn 12] (gas: 7)\n  1862: t0 = u64 [s1 + 0x638]\n  1866: a1 = u64 [s1 + 0x630]\n  1870: a2 = u64 [s1 + 0x628]\n  1874: a3 = a1 | t0\n  1877: a4 = a2 <u 0x1\n  1880: a4 = 0 if a3 != 0\n  1882: jump @56 if a4 != 0\n      : @55 (gas: 1)\n  1885: jump @202\n      : @56 (gas: 36)\n  1888: a3 = u64 [s1 + 0x620]\n  1892: a4 = u64 [s1 + 0xf8]\n  1896: a4 = a4 + a3\n  1899: a3 = a4 <u a3\n  1902: a5 = u64 [s1 + 0x100]\n  1906: a5 = a5 + a2\n  1909: a5 = a5 + a3\n  1912: a0 = a5 ^ a2\n  1915: a2 = a5 <u a2\n  1918: a2 = a3 if a0 == 0\n  1921: a0 = u64 [s1 + 0x108]\n  1925: a0 = a0 + a1\n  1928: a2 = a2 + a0\n  1931: a3 = a2 <u a0\n  1934: a0 = a0 <u a1\n  1937: a1 = u64 [s1 + 0x110]\n  1941: t0 = t0 + a1\n  1944: a0 = a0 + t0\n  1947: a3 = a3 + a0\n  1950: a0 = u64 [s1 + 0xf0]\n  1954: u64 [s1 + 0x5c0] = a0\n  1958: a0 = u64 [s1 + 0xe8]\n  1962: u64 [s1 + 0x5c8] = a0\n  1966: u64 [s1 + 0x5e0] = a4\n  1970: a0 = u64 [s1 + 0x118]\n  1974: a4 = s1 + 0x500\n  1978: u64 [a4 + 0xd0] = a0\n  1982: a0 = u64 [s1 + 0xe0]\n  1986: u64 [a4 + 0xd8] = a0\n  1990: u64 [a4 + 0xe8] = a5\n  1994: u64 [a4 + 0xf0] = a2\n  1998: a0 = s1 + 0x600\n  2002: a1 = s1 + 0x5e0\n  2006: a2 = s1 + 0x5c0\n  2010: u64 [a4 + 0xf8] = a3\n  2014: ra = 26, jump @768\n      : @57 [@dyn 13] (gas: 12)\n  2019: a2 = u64 [s1 + 0x98]\n  2023: a4 = u64 [s1 + 0xb0]\n  2027: a0 = a4 | a2\n  2030: a1 = u64 [s1 + 0xa0]\n  2034: a3 = u64 [s1 + 0xa8]\n  2038: a1 = a1 | a3\n  2041: a0 = a0 | a1\n  2044: a0 = a0 >> 0x20\n  2047: a1 = a1 | a2\n  2050: a1 = a1 << 0x20\n  2053: a0 = a0 | a1\n  2056: jump @59 if a0 == 0\n      : @58 (gas: 1)\n  2059: jump @198\n      : @59 (gas: 12)\n  2062: a1 = a4\n  2064: a2 = s1 + 0x600\n  2068: a0 = u64 [a2 + 0x18]\n  2071: u64 [s1 + 0x78] = a0\n  2074: a0 = u64 [a2 + 0x10]\n  2077: u64 [s1 + 0x70] = a0\n  2080: a0 = u64 [a2 + 0x8]\n  2083: u64 [s1 + 0x80] = a0\n  2087: a0 = u64 [a2]\n  2089: u64 [s1 + 0x88] = a0\n  2093: a0 = s1 + 0x5a0\n  2097: ra = 28, jump @17\n      : @60 [@dyn 14] (gas: 17)\n  2102: a0 = s1 + 0x500\n  2106: a3 = u64 [a0 + 0xb8]\n  2110: a1 = u64 [a0 + 0xb0]\n  2114: a2 = u64 [a0 + 0xa8]\n  2118: a0 = a3 >u 0\n  2120: a4 = a1 >u 0\n  2122: a4 = a0 if a3 != 0\n  2125: u64 [s1 + 0xd0] = a2\n  2129: a0 = a2 >u 0\n  2131: u64 [s1 + 0x60] = a1\n  2134: u64 [s1 + 0xc8] = a3\n  2138: a1 = a1 | a3\n  2141: u64 [s1 + 0x58] = a0\n  2144: u64 [s1 + 0x90] = a4\n  2148: u64 [s1 + 0xc0] = a1\n  2152: a0 = a4 if a1 != 0\n  2155: jump @62 if a0 == 0\n      : @61 (gas: 1)\n  2158: jump @203\n      : @62 (gas: 9)\n  2161: a0 = u64 [s1 + 0x5a0]\n  2165: u64 [s1 + 0x68] = a0\n  2168: u64 [s1 + 1880] = 0\n  2172: u64 [s1 + 1872] = 0\n  2176: u64 [s1 + 1864] = 0\n  2180: u64 [s1 + 1856] = 0x3\n  2185: a0 = s1 + 0x580\n  2189: a1 = s1 + 0x740\n  2193: ra = 30, jump @21\n      : @63 [@dyn 15] (gas: 6)\n  2198: a4 = s1 + 0x500\n  2202: a0 = u64 [a4 + 0x90]\n  2206: a1 = u64 [a4 + 0x88]\n  2210: a2 = u64 [a4 + 0x80]\n  2214: a3 = u64 [a4 + 0x98]\n  2218: t0 = 32, jump @927\n      : @64 [@dyn 16] (gas: 12)\n  2223: t0 = a2 <u 0x1\n  2226: ra = a1 & 0x7f\n  2229: t2 = a5 & a0\n  2232: a4 = a5 & t1\n  2235: ra = a1 if a2 != 0\n  2238: a1 = ra <u 0x20\n  2241: a5 = a5 & a3\n  2244: a2 = a1\n  2246: a2 = 0 if a4 != 0\n  2248: a0 = t2 | a5\n  2251: a2 = 0 if a0 != 0\n  2253: jump @66 if t0 == a2\n      : @65 (gas: 1)\n  2256: jump @209\n      : @66 (gas: 1)\n  2259: t0 = 34, jump @933\n      : @67 [@dyn 17] (gas: 4)\n  2264: a0 = u64 [s1 + 0x68]\n  2267: a0 = a0 <u 0x20\n  2270: u64 [s1 + 0xb8] = a0\n  2274: jump @76 if a3 == 0\n      : @68 (gas: 11)\n  2278: u64 [s1 + 0xf0] = a4\n  2282: u64 [s1 + 0xf8] = ra\n  2286: u64 [s1 + 0x100] = a5\n  2290: u64 [s1 + 0x110] = t2\n  2294: u64 [s1 + 1400] = 0\n  2298: u64 [s1 + 1392] = 0\n  2302: u64 [s1 + 1384] = 0\n  2306: a1 = s1 + 0x560\n  2310: u64 [s1 + 1376] = 0x3\n  2315: a0 = 0\n  2317: ra = 36, jump @19\n      : @69 [@dyn 18] (gas: 2)\n  2322: a1 = i32 [0x200fc]\n  2327: jump @71 if a1 >u 31\n      : @70 (gas: 2)\n  2331: u32 [0x200fc] = 0x20\n  2337: fallthrough\n      : @71 (gas: 87)\n  2338: a0 = sp + 0xffffffffffffffe0\n  2341: a2 = a0 & 0xffffffffffffffe0\n  2344: u64 [s1 + 0x108] = a2\n  2348: sp = a2\n  2350: a0 = 0x20110\n  2355: i32 a0 = a0 + 0\n  2357: i32 a2 = a2 + 0\n  2359: a1 = 0x20\n  2362: ecalli 6 // 'hash_keccak_256'\n  2364: a0 = u64 [s1 + 0x68]\n  2367: a1 = a0 + 0x1f\n  2370: a0 = a1 <u a0\n  2373: a5 = u64 [s1 + 0xd0]\n  2377: a2 = a5 + a0\n  2380: a3 = a2 <u a5\n  2383: a3 = a0 if a0 == 0\n  2386: a4 = u64 [s1 + 0x60]\n  2389: a3 = a3 + a4\n  2392: u64 [s1 + 0xe8] = a3\n  2396: a3 = a3 << 0x3b\n  2399: a4 = a2 >> 0x5\n  2402: a4 = a4 | a3\n  2405: a0 = u64 [s1 + 0x108]\n  2409: t1 = u64 [a0 + 0x18]\n  2412: a2 = a2 << 0x3b\n  2415: a3 = u64 [a0 + 0x10]\n  2418: a1 = a1 >> 0x5\n  2421: a0 = a1 | a2\n  2424: t2 = reverse t1\n  2426: a2 = reverse a3\n  2428: a1 = u64 [s1 + 0xb8]\n  2432: a1 = 0 if a5 != 0\n  2434: a3 = u64 [s1 + 0xc0]\n  2438: a1 = 0 if a3 != 0\n  2440: a4 = 0 if a1 != 0\n  2442: a0 = 0 if a1 != 0\n  2444: t0 = t2 + a0\n  2447: a0 = t0 <u t2\n  2450: a5 = a2 + a0\n  2453: a4 = a4 + a5\n  2456: u64 [s1 + 0x118] = a4\n  2460: a5 = a4 ^ a2\n  2463: a3 = a4 <u a2\n  2466: a3 = a0 if a5 == 0\n  2469: u64 [s1 + 0xe0] = a3\n  2473: a0 = u64 [s1 + 0xf8]\n  2477: ra = a0 + 0x1f\n  2480: a4 = ra <u a0\n  2483: a3 = u64 [s1 + 0xf0]\n  2487: a0 = a3 + a4\n  2490: a5 = a0 <u a3\n  2493: a5 = a4 if a4 == 0\n  2496: t1 = u64 [s1 + 0x110]\n  2500: t1 = t1 + a5\n  2503: a4 = t1 << 0x3b\n  2506: a3 = a0 >> 0x5\n  2509: a3 = a3 | a4\n  2512: a0 = a0 << 0x3b\n  2515: a4 = ra >> 0x5\n  2518: a0 = a0 | a4\n  2521: a0 = a0 + t2\n  2524: u64 [s1 + 0xf8] = a0\n  2528: a0 = a0 <u t2\n  2531: t2 = t0\n  2533: a4 = a2 + a0\n  2536: a4 = a4 + a3\n  2539: a3 = a4 ^ a2\n  2542: u64 [s1 + 0xf0] = a4\n  2546: a2 = a4 <u a2\n  2549: a2 = a0 if a3 == 0\n  2552: a4 = u64 [s1 + 0xe8]\n  2556: a0 = u64 [s1 + 0x60]\n  2559: a0 = a4 <u a0\n  2562: a3 = u64 [s1 + 0xc8]\n  2566: a0 = a0 + a3\n  2569: a3 = a4 >> 0x5\n  2572: a4 = a0 << 0x3b\n  2575: a3 = a3 | a4\n  2578: a4 = u64 [s1 + 0x108]\n  2582: t0 = u64 [a4]\n  2584: a4 = u64 [a4 + 0x8]\n  2587: a0 = a0 >> 0x5\n  2590: a3 = 0 if a1 != 0\n  2592: a0 = 0 if a1 != 0\n  2594: a1 = reverse a4\n  2596: a4 = reverse t0\n  2598: t0 = 38, jump @947\n      : @72 [@dyn 19] (gas: 24)\n  2603: t0 = a0 + a3\n  2606: a0 = u64 [s1 + 0x110]\n  2610: a0 = t1 <u a0\n  2613: a3 = u64 [s1 + 0x100]\n  2617: a0 = a0 + a3\n  2620: a3 = t1 >> 0x5\n  2623: a5 = a0 << 0x3b\n  2626: a3 = a3 | a5\n  2629: a0 = a0 >> 0x5\n  2632: a0 = a0 + a4\n  2635: a4 = u64 [s1 + 0x118]\n  2639: a3 = a3 + a1\n  2642: a1 = a3 <u a1\n  2645: a0 = a0 + a1\n  2648: a2 = a2 + a3\n  2651: u64 [s1 + 0xe8] = a2\n  2655: a1 = a2 <u a3\n  2658: a0 = a0 + a1\n  2661: u64 [s1 + 0xe0] = a0\n  2665: a0 = sp + 0xffffffffffffffe0\n  2668: t1 = a0 & 0xffffffffffffffe0\n  2671: sp = t1\n  2673: u64 [s1 + 0xd8] = t1\n  2677: fallthrough\n      : @73 (gas: 20)\n  2678: a0 = u64 [s1 + 0xf8]\n  2682: a0 = t2 <u a0\n  2685: a2 = u64 [s1 + 0xf0]\n  2689: a1 = a4 ^ a2\n  2692: a2 = a4 <u a2\n  2695: a2 = a0 if a1 == 0\n  2698: a5 = u64 [s1 + 0xe8]\n  2702: a0 = ra <u a5\n  2705: a3 = u64 [s1 + 0xe0]\n  2709: a1 = t0 ^ a3\n  2712: a3 = t0 <u a3\n  2715: a3 = a0 if a1 == 0\n  2718: a0 = ra ^ a5\n  2721: a0 = a0 | a1\n  2724: a3 = a2 if a0 == 0\n  2727: u64 [t1] = t2\n  2729: u64 [t1 + 0x8] = a4\n  2732: u64 [t1 + 0x10] = ra\n  2735: u64 [t1 + 0x18] = t0\n  2738: jump @76 if a3 == 0\n      : @74 (gas: 11)\n  2741: u64 [s1 + 1912] = 0\n  2745: u64 [s1 + 1904] = 0\n  2749: u64 [s1 + 1896] = 0\n  2753: u64 [s1 + 1888] = 0\n  2757: a1 = s1 + 0x760\n  2761: a0 = t1\n  2763: u64 [s1 + 0x110] = t2\n  2767: u64 [s1 + 0x118] = a4\n  2771: u64 [s1 + 0x108] = t0\n  2775: u64 [s1 + 0x100] = ra\n  2779: ra = 40, jump @22\n      : @75 [@dyn 20] (gas: 15)\n  2784: t1 = u64 [s1 + 0xd8]\n  2788: t0 = u64 [s1 + 0x108]\n  2792: a4 = u64 [s1 + 0x118]\n  2796: t2 = u64 [s1 + 0x110]\n  2800: t2 = t2 + 0x1\n  2803: a0 = t2 <u 0x1\n  2806: a4 = a4 + a0\n  2809: a0 = t2 | a4\n  2812: a0 = a0 <u 0x1\n  2815: a1 = u64 [s1 + 0x100]\n  2819: a0 = a0 + a1\n  2822: a1 = a0 <u a1\n  2825: t0 = t0 + a1\n  2828: ra = a0\n  2830: jump @73\n      : @76 (gas: 23)\n  2833: a0 = u64 [s1 + 0xb8]\n  2837: a0 = a0 ^ 0x1\n  2840: a5 = u64 [s1 + 0xd0]\n  2844: a1 = u64 [s1 + 0x58]\n  2847: a0 = a1 if a5 != 0\n  2850: a1 = u64 [s1 + 0x90]\n  2854: a2 = u64 [s1 + 0xc0]\n  2858: a0 = a1 if a2 != 0\n  2861: ra = u64 [s1 + 0xc8]\n  2865: a4 = a5 | ra\n  2868: a1 = u64 [s1 + 0x60]\n  2871: t2 = a1 >> 0x3f\n  2874: ra = ra << 0x1\n  2877: a2 = a5 >> 0x3f\n  2880: u64 [s1 + 0x58] = a2\n  2883: a2 = a1 << 0x1\n  2886: u64 [s1 + 0x48] = a2\n  2889: a3 = u64 [s1 + 0x68]\n  2892: t0 = a3 >> 0x3f\n  2895: a2 = a5 << 0x1\n  2898: u64 [s1 + 0x50] = a2\n  2901: a2 = a3 << 0x1\n  2904: jump @88 if a0 == 0\n      : @77 (gas: 14)\n  2908: u64 [s1 + 0x20] = a4\n  2911: u64 [s1 + 0x30] = t0\n  2914: u64 [s1 + 0x38] = ra\n  2917: u64 [s1 + 0x28] = t2\n  2920: u64 [s1 + 0x40] = a2\n  2923: a3 = a3 & 0xffffffffffffffe0\n  2926: u64 [s1 + 0x90] = a3\n  2930: u64 [s1 + 1336] = 0\n  2934: u64 [s1 + 1328] = 0\n  2938: u64 [s1 + 1320] = 0\n  2942: a1 = s1 + 0x520\n  2946: u64 [s1 + 1312] = 0x3\n  2951: a0 = 0\n  2953: ra = 42, jump @19\n      : @78 [@dyn 21] (gas: 7)\n  2958: a0 = sp + 0xffffffffffffffe0\n  2961: a0 = a0 & 0xffffffffffffffe0\n  2964: u64 [s1 + 0xf0] = a0\n  2968: sp = a0\n  2970: a1 = 0x20\n  2973: a0 = 0\n  2975: ra = 44, jump @26\n      : @79 [@dyn 22] (gas: 1)\n  2980: t0 = 46, jump @955\n      : @80 [@dyn 23] (gas: 5)\n  2985: ecalli 6 // 'hash_keccak_256'\n  2987: u64 [s1 + 280] = 0x20\n  2992: a5 = 0\n  2994: u64 [s1 + 272] = 0\n  2998: t0 = 48, jump @939\n      : @81 [@dyn 24] (gas: 15)\n  3003: t0 = u64 [a3]\n  3005: t1 = reverse a0\n  3007: a1 = reverse a1\n  3009: a3 = reverse a2\n  3011: a2 = reverse t0\n  3013: t0 = a2\n  3015: a0 = u64 [s1 + 0xf0]\n  3019: u64 [a0 + 0x18] = a2\n  3022: u64 [s1 + 0xd0] = a3\n  3026: u64 [a0 + 0x10] = a3\n  3029: u64 [s1 + 0xe8] = a1\n  3033: u64 [a0 + 0x8] = a1\n  3036: a3 = t1\n  3038: u64 [a0] = t1\n  3040: fallthrough\n      : @82 (gas: 25)\n  3041: t2 = t0\n  3043: t1 = a3\n  3045: a0 = u64 [s1 + 0x90]\n  3049: u64 [s1 + 0xe0] = a4\n  3053: a0 = a4 <u a0\n  3056: a4 = a0 ^ 0x1\n  3059: u64 [s1 + 0xd8] = ra\n  3063: a4 = 0x1 if ra != 0\n  3066: a0 = u64 [s1 + 0x100]\n  3070: a2 = u64 [s1 + 0xf8]\n  3074: a0 = a0 | a2\n  3077: a4 = 0x1 if a0 != 0\n  3080: a1 = u64 [s1 + 0xb0]\n  3084: a0 = u64 [s1 + 0x118]\n  3088: a1 = a1 + a0\n  3091: a3 = u64 [s1 + 0xa8]\n  3095: t0 = a5\n  3097: a3 = a3 + a5\n  3100: a2 = u64 [s1 + 0x98]\n  3104: a0 = u64 [s1 + 0x110]\n  3108: a2 = a2 + a0\n  3111: a0 = u64 [s1 + 0xa0]\n  3115: a5 = u64 [s1 + 0x108]\n  3119: a0 = a0 + a5\n  3122: jump @90 if a4 != 0\n      : @83 (gas: 23)\n  3126: a4 = u64 [s1 + 0x118]\n  3130: a4 = a1 <u a4\n  3133: ra = a3 + a4\n  3136: a3 = t0\n  3138: t0 = ra ^ t0\n  3141: a5 = ra <u a3\n  3144: a5 = a4 if t0 == 0\n  3147: a5 = a5 + a2\n  3150: t0 = a5 <u a2\n  3153: a4 = u64 [s1 + 0x110]\n  3157: a2 = a2 <u a4\n  3160: a0 = a0 + a2\n  3163: a0 = a0 + t0\n  3166: a2 = a1 | a5\n  3169: a0 = ra | a0\n  3172: a2 = a2 | a0\n  3175: a2 = a2 >> 0x20\n  3178: a0 = a0 | a5\n  3181: a0 = a0 << 0x20\n  3184: a0 = a0 | a2\n  3187: u64 [s1 + 0xc8] = t1\n  3191: u64 [s1 + 0xc0] = t2\n  3195: jump @85 if a0 == 0\n      : @84 (gas: 1)\n  3198: jump @198\n      : @85 (gas: 3)\n  3201: a0 = s1 + 0x1a0\n  3205: u64 [s1 + 0xb8] = a3\n  3209: ra = 50, jump @17\n      : @86 [@dyn 25] (gas: 12)\n  3214: a0 = u64 [s1 + 0x1b8]\n  3218: a1 = u64 [s1 + 0x1b0]\n  3222: a2 = u64 [s1 + 0x1a8]\n  3226: a3 = u64 [s1 + 0x1a0]\n  3230: a4 = s1 + 0x700\n  3234: u64 [a4 + 0x98] = a0\n  3238: u64 [a4 + 0x90] = a1\n  3242: u64 [a4 + 0x88] = a2\n  3246: u64 [a4 + 0x80] = a3\n  3250: a1 = s1 + 0x780\n  3254: a0 = u64 [s1 + 0xf0]\n  3258: ra = 52, jump @22\n      : @87 [@dyn 26] (gas: 57)\n  3263: ra = u64 [s1 + 0xc8]\n  3267: ra = ra + 0x1\n  3270: a0 = ra <u 0x1\n  3273: t0 = u64 [s1 + 0xe8]\n  3277: t0 = t0 + a0\n  3280: a0 = ra | t0\n  3283: a0 = a0 <u 0x1\n  3286: a1 = u64 [s1 + 0xd0]\n  3290: t1 = a1 + a0\n  3293: a1 = t1 <u a1\n  3296: a0 = u64 [s1 + 0xc0]\n  3300: a0 = a0 + a1\n  3303: a1 = u64 [s1 + 0x118]\n  3307: a2 = a1 + 0x20\n  3310: u64 [s1 + 0xc8] = a2\n  3314: a3 = a2 <u a1\n  3317: a1 = u64 [s1 + 0xb8]\n  3321: a2 = a1 + a3\n  3324: u64 [s1 + 0xc0] = a2\n  3328: a4 = a2 <u a1\n  3331: a4 = a3 if a3 == 0\n  3334: a1 = u64 [s1 + 0x110]\n  3338: t2 = a1 + a4\n  3341: a4 = t2 <u a1\n  3344: a1 = u64 [s1 + 0x108]\n  3348: a1 = a1 + a4\n  3351: u64 [s1 + 0x108] = a1\n  3355: a1 = u64 [s1 + 0xe0]\n  3359: a4 = a1 + 0x20\n  3362: a5 = a4 <u a1\n  3365: a2 = u64 [s1 + 0xd8]\n  3369: a1 = a2 + a5\n  3372: a2 = a1 <u a2\n  3375: a2 = a5 if a5 == 0\n  3378: a3 = u64 [s1 + 0xf8]\n  3382: a2 = a2 + a3\n  3385: a5 = a2 <u a3\n  3388: a3 = u64 [s1 + 0x100]\n  3392: a3 = a3 + a5\n  3395: u64 [s1 + 0x100] = a3\n  3399: a3 = t0\n  3401: u64 [s1 + 0xe8] = a3\n  3405: a5 = u64 [s1 + 0xf0]\n  3409: u64 [a5 + 0x8] = a3\n  3412: a3 = ra\n  3414: u64 [a5] = ra\n  3416: u64 [a5 + 0x10] = t1\n  3419: t0 = a0\n  3421: u64 [a5 + 0x18] = a0\n  3424: u64 [s1 + 0xd0] = t1\n  3428: a0 = u64 [s1 + 0xc8]\n  3432: u64 [s1 + 0x118] = a0\n  3436: a5 = u64 [s1 + 0xc0]\n  3440: u64 [s1 + 0x110] = t2\n  3444: ra = a1\n  3446: u64 [s1 + 0xf8] = a2\n  3450: jump @82\n      : @88 (gas: 7)\n  3453: a0 = a3 | a1\n  3456: a0 = a0 | a4\n  3459: a4 = u64 [s1 + 0xb0]\n  3463: t1 = u64 [s1 + 0xa8]\n  3467: a1 = u64 [s1 + 0xa0]\n  3471: a5 = u64 [s1 + 0x98]\n  3475: jump @104 if a0 != 0\n      : @89 (gas: 6)\n  3479: u64 [s1 + 0x40] = a2\n  3482: u64 [s1 + 256] = 0\n  3486: u64 [s1 + 248] = 0\n  3490: u64 [s1 + 264] = 0\n  3494: u64 [s1 + 272] = 0\n  3498: jump @107\n      : @90 (gas: 11)\n  3501: ra = t0\n  3503: t1 = u64 [s1 + 0x68]\n  3506: a4 = u64 [s1 + 0x90]\n  3510: a4 = a4 ^ t1\n  3513: a5 = u64 [s1 + 0x60]\n  3516: a4 = a4 | a5\n  3519: a5 = u64 [s1 + 0x20]\n  3522: a4 = a4 | a5\n  3525: a5 = u64 [s1 + 0x38]\n  3528: t0 = u64 [s1 + 0x30]\n  3531: jump @103 if a4 == 0\n      : @91 (gas: 13)\n  3535: a4 = u64 [s1 + 0x118]\n  3539: a4 = a1 <u a4\n  3542: a3 = a3 + a4\n  3545: t0 = a3 ^ ra\n  3548: a5 = a3 <u ra\n  3551: a5 = a4 if t0 == 0\n  3554: a5 = a5 + a2\n  3557: t0 = a5 <u a2\n  3560: a4 = u64 [s1 + 0x110]\n  3564: a2 = a2 <u a4\n  3567: a0 = a0 + a2\n  3570: a0 = a0 + t0\n  3573: t0 = 54, jump @938\n      : @92 [@dyn 27] (gas: 1)\n  3578: jump @94 if a0 == 0\n      : @93 (gas: 1)\n  3581: jump @198\n      : @94 (gas: 2)\n  3584: a0 = s1 + 0x500\n  3588: ra = 56, jump @17\n      : @95 [@dyn 28] (gas: 11)\n  3593: a1 = s1 + 0x500\n  3597: a0 = u64 [a1 + 0x18]\n  3600: u64 [s1 + 0x110] = a0\n  3604: a0 = u64 [a1 + 0x10]\n  3607: u64 [s1 + 0x108] = a0\n  3611: a0 = u64 [a1 + 0x8]\n  3614: u64 [s1 + 0x100] = a0\n  3618: a0 = u64 [a1]\n  3620: u64 [s1 + 0xf8] = a0\n  3624: a0 = u64 [s1 + 0x68]\n  3627: t0 = 58, jump @941\n      : @96 [@dyn 29] (gas: 1)\n  3632: ra = 60, jump @961\n      : @97 [@dyn 30] (gas: 6)\n  3637: u64 [s1 + 0xe8] = a0\n  3641: u64 [s1 + 0xd0] = a1\n  3645: a0 = 0xffffffffffffffff\n  3648: a1 = 0xffffffffffffffff\n  3651: a2 = u64 [s1 + 0x118]\n  3655: ra = 62, jump @956\n      : @98 [@dyn 31] (gas: 1)\n  3660: t0 = 64, jump @943\n      : @99 [@dyn 32] (gas: 1)\n  3665: ra = 66, jump @956\n      : @100 [@dyn 33] (gas: 1)\n  3670: t0 = 68, jump @921\n      : @101 [@dyn 34] (gas: 8)\n  3675: a4 = s1 + 0x700\n  3679: u64 [a4 + 0xb8] = a3\n  3683: u64 [a4 + 0xb0] = a2\n  3687: u64 [a4 + 0xa8] = a1\n  3691: u64 [a4 + 0xa0] = a0\n  3695: a1 = s1 + 0x7a0\n  3699: a0 = u64 [s1 + 0xf0]\n  3703: ra = 70, jump @22\n      : @102 [@dyn 35] (gas: 3)\n  3708: t0 = u64 [s1 + 0x30]\n  3711: a5 = u64 [s1 + 0x38]\n  3714: fallthrough\n      : @103 (gas: 22)\n  3715: a0 = u64 [s1 + 0x28]\n  3718: a0 = a0 | a5\n  3721: a1 = u64 [s1 + 0x58]\n  3724: a2 = u64 [s1 + 0x48]\n  3727: a1 = a1 | a2\n  3730: a2 = u64 [s1 + 0x50]\n  3733: a2 = a2 | t0\n  3736: a3 = u64 [s1 + 0x40]\n  3739: a3 = a3 + 0x1\n  3742: u64 [s1 + 2008] = 0\n  3746: u64 [s1 + 2000] = 0\n  3750: u64 [s1 + 1992] = 0\n  3754: a5 = s1 + 0x700\n  3758: u64 [a5 + 192] = 0x3\n  3763: u64 [a5 + 0xe0] = a3\n  3767: u64 [a5 + 0xe8] = a2\n  3771: u64 [a5 + 0xf0] = a1\n  3775: u64 [a5 + 0xf8] = a0\n  3779: a0 = s1 + 0x7c0\n  3783: a1 = s1 + 0x7e0\n  3787: ra = 0x56\n  3790: jump @22\n      : @104 (gas: 6)\n  3793: a0 = a5 | a1\n  3796: a1 = 0xffffffe0\n  3806: a1 = a4 <u a1\n  3809: a1 = 0 if t1 != 0\n  3811: a1 = 0 if a0 != 0\n  3813: jump @198 if a1 == 0\n      : @105 (gas: 7)\n  3817: u64 [s1 + 0x40] = a2\n  3820: i32 a1 = a4 + 0x20\n  3823: a0 = s1 + 0x540\n  3827: u64 [s1 + 0x28] = t2\n  3830: u64 [s1 + 0x38] = ra\n  3833: u64 [s1 + 0x30] = t0\n  3836: ra = 72, jump @17\n      : @106 [@dyn 36] (gas: 15)\n  3841: t0 = u64 [s1 + 0x30]\n  3844: ra = u64 [s1 + 0x38]\n  3847: t2 = u64 [s1 + 0x28]\n  3850: a3 = u64 [s1 + 0x68]\n  3853: a1 = s1 + 0x500\n  3857: a0 = u64 [a1 + 0x58]\n  3860: a2 = s1 + 0x100\n  3864: u64 [a2 + 0x10] = a0\n  3867: a0 = u64 [a1 + 0x50]\n  3870: u64 [a2 + 0x8] = a0\n  3873: a0 = u64 [a1 + 0x48]\n  3876: u64 [s1 + 0xf8] = a0\n  3880: a0 = u64 [a1 + 0x40]\n  3883: u64 [a2] = a0\n  3885: fallthrough\n      : @107 (gas: 10)\n  3886: a0 = u64 [s1 + 0x58]\n  3889: a1 = u64 [s1 + 0x48]\n  3892: a0 = a0 | a1\n  3895: u64 [s1 + 0xf0] = a0\n  3899: a0 = ra | t2\n  3902: u64 [s1 + 0xe8] = a0\n  3906: a0 = u64 [s1 + 0x50]\n  3909: a0 = a0 | t0\n  3912: u64 [s1 + 0xe0] = a0\n  3916: t0 = 74, jump @950\n      : @108 [@dyn 37] (gas: 1)\n  3921: ra = 76, jump @961\n      : @109 [@dyn 38] (gas: 7)\n  3926: u64 [s1 + 0xc0] = a0\n  3930: u64 [s1 + 0xd8] = a1\n  3934: a0 = u64 [s1 + 0x68]\n  3937: i32 a2 = a0 << 0x3\n  3940: a0 = 0xffffffffffffffff\n  3943: a1 = 0xffffffffffffffff\n  3946: ra = 78, jump @956\n      : @110 [@dyn 39] (gas: 10)\n  3951: u64 [s1 + 0xd0] = a0\n  3955: u64 [s1 + 0xc8] = a1\n  3959: a1 = u64 [s1 + 0xc0]\n  3963: a0 = a0 | a1\n  3966: u64 [s1 + 0xc0] = a0\n  3970: a0 = u64 [s1 + 0x118]\n  3974: i32 a2 = a0 + 0xffffffffffffff80\n  3977: a0 = 0xffffffffffffffff\n  3980: a1 = 0xffffffffffffffff\n  3983: ra = 80, jump @956\n      : @111 [@dyn 40] (gas: 7)\n  3988: a4 = u64 [s1 + 0x118]\n  3992: a2 = a4 <u 0x80\n  3996: a3 = u64 [s1 + 0xc0]\n  4000: a0 = a3 if a2 != 0\n  4003: a5 = u64 [s1 + 0xc8]\n  4007: a3 = u64 [s1 + 0xd8]\n  4011: t0 = 82, jump @951\n      : @112 [@dyn 41] (gas: 2)\n  4016: a4 = u64 [s1 + 0xd0]\n  4020: t0 = 84, jump @928\n      : @113 [@dyn 42] (gas: 29)\n  4025: a4 = u64 [s1 + 0x40]\n  4028: a0 = a0 | a4\n  4031: a4 = u64 [s1 + 0xe0]\n  4035: a1 = a1 | a4\n  4038: a4 = u64 [s1 + 0xe8]\n  4042: a3 = a3 | a4\n  4045: a4 = u64 [s1 + 0xf0]\n  4049: a2 = a2 | a4\n  4052: a5 = s1 + 0x1000\n  4056: u64 [a5 + 4294965248] = 0x3\n  4061: a4 = s1 + 0x1000\n  4065: u64 [a4 + 0xfffffffffffff830] = a2\n  4069: a2 = s1 + 0x1000\n  4073: u64 [a2 + 0xfffffffffffff838] = a3\n  4077: a2 = s1 + 0x1000\n  4081: u64 [a2 + 0xfffffffffffff828] = a1\n  4085: a1 = s1 + 0x1000\n  4089: u64 [a1 + 0xfffffffffffff820] = a0\n  4093: a0 = s1 + 0x1000\n  4097: u64 [a0 + 4294965272] = 0\n  4101: a0 = s1 + 0x1000\n  4105: u64 [a0 + 4294965264] = 0\n  4109: a0 = s1 + 0x1000\n  4113: u64 [a0 + 4294965256] = 0\n  4117: a0 = s1 + 0x7ff\n  4121: a0 = a0 + 0x1\n  4124: a1 = s1 + 0x7ff\n  4128: a1 = a1 + 0x21\n  4131: ra = 86, jump @22\n      : @114 [@dyn 43] (gas: 12)\n  4136: a1 = u64 [s1 + 0x88]\n  4140: a4 = u64 [s1 + 0x70]\n  4143: a0 = a1 | a4\n  4146: a2 = u64 [s1 + 0x80]\n  4150: a3 = u64 [s1 + 0x78]\n  4153: a2 = a2 | a3\n  4156: a0 = a0 | a2\n  4159: a0 = a0 >> 0x20\n  4162: a2 = a2 | a4\n  4165: a2 = a2 << 0x20\n  4168: a0 = a0 | a2\n  4171: jump @198 if a0 != 0\n      : @115 (gas: 2)\n  4175: a0 = s1 + 0x4e0\n  4179: ra = 88, jump @17\n      : @116 [@dyn 44] (gas: 17)\n  4184: a0 = s1 + 0x400\n  4188: a3 = u64 [a0 + 0xf8]\n  4192: a2 = u64 [a0 + 0xf0]\n  4196: a1 = u64 [a0 + 0xe8]\n  4200: a0 = a3 >u 0\n  4202: a4 = a2 >u 0\n  4204: a4 = a0 if a3 != 0\n  4207: u64 [s1 + 0xa0] = a1\n  4211: a0 = a1 >u 0\n  4213: u64 [s1 + 0x98] = a2\n  4217: u64 [s1 + 0x90] = a3\n  4221: a2 = a2 | a3\n  4224: u64 [s1 + 0xb8] = a0\n  4228: u64 [s1 + 0xc0] = a4\n  4232: u64 [s1 + 0xd0] = a2\n  4236: a0 = a4 if a2 != 0\n  4239: jump @215 if a0 != 0\n      : @117 (gas: 14)\n  4243: a0 = u64 [s1 + 0x4e0]\n  4247: u64 [s1 + 0xa8] = a0\n  4251: a0 = s1 + 0x1000\n  4255: u64 [a0 + 4294965336] = 0\n  4259: a0 = s1 + 0x1000\n  4263: u64 [a0 + 4294965328] = 0\n  4267: a0 = s1 + 0x1000\n  4271: u64 [a0 + 4294965320] = 0\n  4275: a1 = s1 + 0x1000\n  4279: u64 [a1 + 4294965312] = 0x4\n  4284: a0 = s1 + 0x4c0\n  4288: a1 = s1 + 0x7ff\n  4292: a1 = a1 + 0x41\n  4295: ra = 90, jump @21\n      : @118 [@dyn 45] (gas: 6)\n  4300: a4 = s1 + 0x400\n  4304: a0 = u64 [a4 + 0xd0]\n  4308: a1 = u64 [a4 + 0xc8]\n  4312: a2 = u64 [a4 + 0xc0]\n  4316: a3 = u64 [a4 + 0xd8]\n  4320: t0 = 92, jump @927\n      : @119 [@dyn 46] (gas: 12)\n  4325: t0 = a2 <u 0x1\n  4328: ra = a1 & 0x7f\n  4331: t2 = a5 & a0\n  4334: a4 = a5 & t1\n  4337: ra = a1 if a2 != 0\n  4340: a1 = ra <u 0x20\n  4343: a5 = a5 & a3\n  4346: a2 = a1\n  4348: a2 = 0 if a4 != 0\n  4350: a0 = t2 | a5\n  4353: a2 = 0 if a0 != 0\n  4355: jump @221 if t0 != a2\n      : @120 (gas: 1)\n  4359: t0 = 94, jump @933\n      : @121 [@dyn 47] (gas: 4)\n  4364: a0 = u64 [s1 + 0xa8]\n  4368: a0 = a0 <u 0x20\n  4371: u64 [s1 + 0xc8] = a0\n  4375: jump @130 if a3 == 0\n      : @122 (gas: 11)\n  4379: u64 [s1 + 0xf0] = a4\n  4383: u64 [s1 + 0xf8] = ra\n  4387: u64 [s1 + 0x100] = a5\n  4391: u64 [s1 + 0x110] = t2\n  4395: u64 [s1 + 1208] = 0\n  4399: u64 [s1 + 1200] = 0\n  4403: u64 [s1 + 1192] = 0\n  4407: a1 = s1 + 0x4a0\n  4411: u64 [s1 + 1184] = 0x4\n  4416: a0 = 0\n  4418: ra = 96, jump @19\n      : @123 [@dyn 48] (gas: 2)\n  4423: a1 = i32 [0x200fc]\n  4428: jump @125 if a1 >u 31\n      : @124 (gas: 2)\n  4432: u32 [0x200fc] = 0x20\n  4438: fallthrough\n      : @125 (gas: 87)\n  4439: a0 = sp + 0xffffffffffffffe0\n  4442: a2 = a0 & 0xffffffffffffffe0\n  4445: u64 [s1 + 0x108] = a2\n  4449: sp = a2\n  4451: a0 = 0x20110\n  4456: i32 a0 = a0 + 0\n  4458: i32 a2 = a2 + 0\n  4460: a1 = 0x20\n  4463: ecalli 6 // 'hash_keccak_256'\n  4465: a0 = u64 [s1 + 0xa8]\n  4469: a1 = a0 + 0x1f\n  4472: a0 = a1 <u a0\n  4475: a5 = u64 [s1 + 0xa0]\n  4479: a2 = a5 + a0\n  4482: a3 = a2 <u a5\n  4485: a3 = a0 if a0 == 0\n  4488: a4 = u64 [s1 + 0x98]\n  4492: a3 = a3 + a4\n  4495: u64 [s1 + 0xe8] = a3\n  4499: a3 = a3 << 0x3b\n  4502: a4 = a2 >> 0x5\n  4505: a4 = a4 | a3\n  4508: a0 = u64 [s1 + 0x108]\n  4512: t0 = u64 [a0 + 0x18]\n  4515: a2 = a2 << 0x3b\n  4518: a0 = u64 [a0 + 0x10]\n  4521: a1 = a1 >> 0x5\n  4524: a2 = a2 | a1\n  4527: t2 = reverse t0\n  4529: a0 = reverse a0\n  4531: a1 = u64 [s1 + 0xc8]\n  4535: a1 = 0 if a5 != 0\n  4537: a3 = u64 [s1 + 0xd0]\n  4541: a1 = 0 if a3 != 0\n  4543: a4 = 0 if a1 != 0\n  4545: a2 = 0 if a1 != 0\n  4547: t0 = t2 + a2\n  4550: a2 = t0 <u t2\n  4553: a5 = a0 + a2\n  4556: a4 = a4 + a5\n  4559: u64 [s1 + 0x118] = a4\n  4563: a5 = a4 ^ a0\n  4566: a3 = a4 <u a0\n  4569: a3 = a2 if a5 == 0\n  4572: u64 [s1 + 0xe0] = a3\n  4576: a2 = u64 [s1 + 0xf8]\n  4580: ra = a2 + 0x1f\n  4583: a4 = ra <u a2\n  4586: a3 = u64 [s1 + 0xf0]\n  4590: a2 = a3 + a4\n  4593: a5 = a2 <u a3\n  4596: a5 = a4 if a4 == 0\n  4599: t1 = u64 [s1 + 0x110]\n  4603: t1 = t1 + a5\n  4606: a4 = t1 << 0x3b\n  4609: a3 = a2 >> 0x5\n  4612: a3 = a3 | a4\n  4615: a2 = a2 << 0x3b\n  4618: a4 = ra >> 0x5\n  4621: a2 = a2 | a4\n  4624: a2 = a2 + t2\n  4627: u64 [s1 + 0xf8] = a2\n  4631: a4 = a2 <u t2\n  4634: t2 = t0\n  4636: a2 = a0 + a4\n  4639: a2 = a2 + a3\n  4642: a3 = a2 ^ a0\n  4645: u64 [s1 + 0xf0] = a2\n  4649: a2 = a2 <u a0\n  4652: a2 = a4 if a3 == 0\n  4655: a4 = u64 [s1 + 0xe8]\n  4659: a0 = u64 [s1 + 0x98]\n  4663: a0 = a4 <u a0\n  4666: a3 = u64 [s1 + 0x90]\n  4670: a0 = a0 + a3\n  4673: a3 = a4 >> 0x5\n  4676: a4 = a0 << 0x3b\n  4679: a3 = a3 | a4\n  4682: a4 = u64 [s1 + 0x108]\n  4686: t0 = u64 [a4]\n  4688: a4 = u64 [a4 + 0x8]\n  4691: a0 = a0 >> 0x5\n  4694: a3 = 0 if a1 != 0\n  4696: a0 = 0 if a1 != 0\n  4698: a1 = reverse a4\n  4700: a4 = reverse t0\n  4702: t0 = 98, jump @947\n      : @126 [@dyn 49] (gas: 24)\n  4707: t0 = a0 + a3\n  4710: a0 = u64 [s1 + 0x110]\n  4714: a0 = t1 <u a0\n  4717: a3 = u64 [s1 + 0x100]\n  4721: a0 = a0 + a3\n  4724: a3 = t1 >> 0x5\n  4727: a5 = a0 << 0x3b\n  4730: a3 = a3 | a5\n  4733: a0 = a0 >> 0x5\n  4736: a0 = a0 + a4\n  4739: a4 = u64 [s1 + 0x118]\n  4743: a3 = a3 + a1\n  4746: a1 = a3 <u a1\n  4749: a0 = a0 + a1\n  4752: a2 = a2 + a3\n  4755: u64 [s1 + 0xe8] = a2\n  4759: a1 = a2 <u a3\n  4762: a0 = a0 + a1\n  4765: u64 [s1 + 0xe0] = a0\n  4769: a0 = sp + 0xffffffffffffffe0\n  4772: t1 = a0 & 0xffffffffffffffe0\n  4775: sp = t1\n  4777: u64 [s1 + 0xd8] = t1\n  4781: fallthrough\n      : @127 (gas: 20)\n  4782: a0 = u64 [s1 + 0xf8]\n  4786: a0 = t2 <u a0\n  4789: a2 = u64 [s1 + 0xf0]\n  4793: a1 = a4 ^ a2\n  4796: a2 = a4 <u a2\n  4799: a2 = a0 if a1 == 0\n  4802: a5 = u64 [s1 + 0xe8]\n  4806: a0 = ra <u a5\n  4809: a3 = u64 [s1 + 0xe0]\n  4813: a1 = t0 ^ a3\n  4816: a3 = t0 <u a3\n  4819: a3 = a0 if a1 == 0\n  4822: a0 = ra ^ a5\n  4825: a0 = a0 | a1\n  4828: a3 = a2 if a0 == 0\n  4831: u64 [t1] = t2\n  4833: u64 [t1 + 0x8] = a4\n  4836: u64 [t1 + 0x10] = ra\n  4839: u64 [t1 + 0x18] = t0\n  4842: jump @130 if a3 == 0\n      : @128 (gas: 16)\n  4845: a0 = s1 + 0x1000\n  4849: u64 [a0 + 4294965368] = 0\n  4853: a0 = s1 + 0x1000\n  4857: u64 [a0 + 4294965360] = 0\n  4861: a0 = s1 + 0x1000\n  4865: u64 [a0 + 4294965352] = 0\n  4869: a0 = s1 + 0x1000\n  4873: u64 [a0 + 4294965344] = 0\n  4877: a1 = s1 + 0x7ff\n  4881: a1 = a1 + 0x61\n  4884: a0 = t1\n  4886: u64 [s1 + 0x110] = t2\n  4890: u64 [s1 + 0x118] = a4\n  4894: u64 [s1 + 0x108] = t0\n  4898: u64 [s1 + 0x100] = ra\n  4902: ra = 100, jump @22\n      : @129 [@dyn 50] (gas: 15)\n  4907: t1 = u64 [s1 + 0xd8]\n  4911: t0 = u64 [s1 + 0x108]\n  4915: a4 = u64 [s1 + 0x118]\n  4919: t2 = u64 [s1 + 0x110]\n  4923: t2 = t2 + 0x1\n  4926: a0 = t2 <u 0x1\n  4929: a4 = a4 + a0\n  4932: a0 = t2 | a4\n  4935: a0 = a0 <u 0x1\n  4938: a1 = u64 [s1 + 0x100]\n  4942: a0 = a0 + a1\n  4945: a1 = a0 <u a1\n  4948: t0 = t0 + a1\n  4951: ra = a0\n  4953: jump @127\n      : @130 (gas: 9)\n  4956: a0 = u64 [s1 + 0xc8]\n  4960: a0 = a0 ^ 0x1\n  4963: a4 = u64 [s1 + 0xa0]\n  4967: a1 = u64 [s1 + 0xb8]\n  4971: a0 = a1 if a4 != 0\n  4974: a1 = u64 [s1 + 0xc0]\n  4978: a2 = u64 [s1 + 0xd0]\n  4982: a0 = a1 if a2 != 0\n  4985: jump @142 if a0 == 0\n      : @131 (gas: 10)\n  4989: a0 = u64 [s1 + 0xa8]\n  4993: a0 = a0 & 0xffffffffffffffe0\n  4996: u64 [s1 + 0xb0] = a0\n  5000: u64 [s1 + 1144] = 0\n  5004: u64 [s1 + 1136] = 0\n  5008: u64 [s1 + 1128] = 0\n  5012: a1 = s1 + 0x460\n  5016: u64 [s1 + 1120] = 0x4\n  5021: a0 = 0\n  5023: ra = 102, jump @19\n      : @132 [@dyn 51] (gas: 7)\n  5028: a0 = sp + 0xffffffffffffffe0\n  5031: a0 = a0 & 0xffffffffffffffe0\n  5034: u64 [s1 + 0xf0] = a0\n  5038: sp = a0\n  5040: a1 = 0x20\n  5043: a0 = 0\n  5045: ra = 104, jump @26\n      : @133 [@dyn 52] (gas: 1)\n  5050: t0 = 106, jump @955\n      : @134 [@dyn 53] (gas: 5)\n  5055: ecalli 6 // 'hash_keccak_256'\n  5057: u64 [s1 + 272] = 0x20\n  5062: a5 = 0\n  5064: u64 [s1 + 280] = 0\n  5068: t0 = 108, jump @939\n      : @135 [@dyn 54] (gas: 15)\n  5073: t0 = u64 [a3]\n  5075: t1 = reverse a0\n  5077: a1 = reverse a1\n  5079: a3 = reverse a2\n  5081: a2 = reverse t0\n  5083: t0 = a2\n  5085: a0 = u64 [s1 + 0xf0]\n  5089: u64 [a0 + 0x18] = a2\n  5092: u64 [s1 + 0xc8] = a3\n  5096: u64 [a0 + 0x10] = a3\n  5099: u64 [s1 + 0xe0] = a1\n  5103: u64 [a0 + 0x8] = a1\n  5106: a3 = t1\n  5108: u64 [a0] = t1\n  5110: fallthrough\n      : @136 (gas: 26)\n  5111: t1 = t0\n  5113: t2 = a3\n  5115: a0 = u64 [s1 + 0xb0]\n  5119: u64 [s1 + 0xd8] = a4\n  5123: a0 = a4 <u a0\n  5126: a4 = a0 ^ 0x1\n  5129: u64 [s1 + 0xd0] = ra\n  5133: a4 = 0x1 if ra != 0\n  5136: a0 = u64 [s1 + 0x100]\n  5140: a2 = u64 [s1 + 0xf8]\n  5144: a0 = a0 | a2\n  5147: a4 = 0x1 if a0 != 0\n  5150: a1 = u64 [s1 + 0x88]\n  5154: ra = u64 [s1 + 0x110]\n  5158: a1 = a1 + ra\n  5161: a3 = u64 [s1 + 0x80]\n  5165: t0 = a5\n  5167: a3 = a3 + a5\n  5170: a2 = u64 [s1 + 0x70]\n  5173: a0 = u64 [s1 + 0x118]\n  5177: a2 = a2 + a0\n  5180: a0 = u64 [s1 + 0x78]\n  5183: a5 = u64 [s1 + 0x108]\n  5187: a0 = a0 + a5\n  5190: u64 [s1 + 0xe8] = t0\n  5194: jump @144 if a4 != 0\n      : @137 (gas: 13)\n  5198: a4 = a1 <u ra\n  5201: a3 = a3 + a4\n  5204: a5 = t0\n  5206: t0 = a3 ^ t0\n  5209: a5 = a3 <u a5\n  5212: a5 = a4 if t0 == 0\n  5215: a5 = a5 + a2\n  5218: t0 = a5 <u a2\n  5221: a4 = u64 [s1 + 0x118]\n  5225: a2 = a2 <u a4\n  5228: a0 = a0 + a2\n  5231: a0 = a0 + t0\n  5234: t0 = 110, jump @938\n      : @138 [@dyn 55] (gas: 3)\n  5239: u64 [s1 + 0xc0] = t2\n  5243: u64 [s1 + 0xb8] = t1\n  5247: jump @198 if a0 != 0\n      : @139 (gas: 3)\n  5251: a0 = s1 + 0x240\n  5255: u64 [s1 + 0x110] = ra\n  5259: ra = 112, jump @17\n      : @140 [@dyn 56] (gas: 17)\n  5264: a4 = s1 + 0x200\n  5268: a0 = u64 [a4 + 0x58]\n  5271: a1 = u64 [a4 + 0x50]\n  5274: a2 = u64 [a4 + 0x48]\n  5277: a3 = u64 [a4 + 0x40]\n  5280: a4 = s1 + 0x7ff\n  5284: a4 = a4 + 0x99\n  5288: u64 [a4] = a0\n  5290: u64 [a4 + 0xfffffffffffffff8] = a1\n  5293: a0 = s1 + 0x1000\n  5297: u64 [a0 + 0xfffffffffffff888] = a2\n  5301: a0 = s1 + 0x1000\n  5305: u64 [a0 + 0xfffffffffffff880] = a3\n  5309: a1 = s1 + 0x7ff\n  5313: a1 = a1 + 0x81\n  5317: a0 = u64 [s1 + 0xf0]\n  5321: ra = 114, jump @22\n      : @141 [@dyn 57] (gas: 57)\n  5326: ra = u64 [s1 + 0xc0]\n  5330: ra = ra + 0x1\n  5333: a0 = ra <u 0x1\n  5336: t0 = u64 [s1 + 0xe0]\n  5340: t0 = t0 + a0\n  5343: a0 = ra | t0\n  5346: a0 = a0 <u 0x1\n  5349: a1 = u64 [s1 + 0xc8]\n  5353: t1 = a1 + a0\n  5356: a1 = t1 <u a1\n  5359: a0 = u64 [s1 + 0xb8]\n  5363: a0 = a0 + a1\n  5366: a1 = u64 [s1 + 0x110]\n  5370: a2 = a1 + 0x20\n  5373: u64 [s1 + 0xc0] = a2\n  5377: a3 = a2 <u a1\n  5380: a1 = u64 [s1 + 0xe8]\n  5384: a2 = a1 + a3\n  5387: u64 [s1 + 0xb8] = a2\n  5391: a4 = a2 <u a1\n  5394: a4 = a3 if a3 == 0\n  5397: a1 = u64 [s1 + 0x118]\n  5401: t2 = a1 + a4\n  5404: a4 = t2 <u a1\n  5407: a1 = u64 [s1 + 0x108]\n  5411: a1 = a1 + a4\n  5414: u64 [s1 + 0x108] = a1\n  5418: a1 = u64 [s1 + 0xd8]\n  5422: a4 = a1 + 0x20\n  5425: a5 = a4 <u a1\n  5428: a2 = u64 [s1 + 0xd0]\n  5432: a1 = a2 + a5\n  5435: a2 = a1 <u a2\n  5438: a2 = a5 if a5 == 0\n  5441: a3 = u64 [s1 + 0xf8]\n  5445: a2 = a2 + a3\n  5448: a5 = a2 <u a3\n  5451: a3 = u64 [s1 + 0x100]\n  5455: a3 = a3 + a5\n  5458: u64 [s1 + 0x100] = a3\n  5462: a3 = t0\n  5464: u64 [s1 + 0xe0] = a3\n  5468: a5 = u64 [s1 + 0xf0]\n  5472: u64 [a5 + 0x8] = a3\n  5475: a3 = ra\n  5477: u64 [a5] = ra\n  5479: u64 [a5 + 0x10] = t1\n  5482: t0 = a0\n  5484: u64 [a5 + 0x18] = a0\n  5487: u64 [s1 + 0xc8] = t1\n  5491: a0 = u64 [s1 + 0xc0]\n  5495: u64 [s1 + 0x110] = a0\n  5499: a5 = u64 [s1 + 0xb8]\n  5503: u64 [s1 + 0x118] = t2\n  5507: ra = a1\n  5509: u64 [s1 + 0xf8] = a2\n  5513: jump @136\n      : @142 (gas: 8)\n  5516: a3 = u64 [s1 + 0xa8]\n  5520: a5 = u64 [s1 + 0x98]\n  5524: a0 = a3 | a5\n  5527: a2 = u64 [s1 + 0x90]\n  5531: a1 = a4 | a2\n  5534: a0 = a0 | a1\n  5537: t0 = u64 [s1 + 0x88]\n  5541: jump @157 if a0 != 0\n      : @143 (gas: 5)\n  5545: u64 [s1 + 256] = 0\n  5549: u64 [s1 + 248] = 0\n  5553: u64 [s1 + 264] = 0\n  5557: u64 [s1 + 272] = 0\n  5561: jump @160\n      : @144 (gas: 10)\n  5564: t0 = u64 [s1 + 0xa8]\n  5568: a4 = u64 [s1 + 0xb0]\n  5572: a4 = a4 ^ t0\n  5575: t2 = u64 [s1 + 0x98]\n  5579: a4 = a4 | t2\n  5582: t1 = u64 [s1 + 0xa0]\n  5586: ra = u64 [s1 + 0x90]\n  5590: a5 = t1 | ra\n  5593: a4 = a4 | a5\n  5596: jump @156 if a4 == 0\n      : @145 (gas: 14)\n  5600: a4 = u64 [s1 + 0x110]\n  5604: a4 = a1 <u a4\n  5607: a3 = a3 + a4\n  5610: a5 = u64 [s1 + 0xe8]\n  5614: t0 = a3 ^ a5\n  5617: a5 = a3 <u a5\n  5620: a5 = a4 if t0 == 0\n  5623: a5 = a5 + a2\n  5626: t0 = a5 <u a2\n  5629: a4 = u64 [s1 + 0x118]\n  5633: a2 = a2 <u a4\n  5636: a0 = a0 + a2\n  5639: a0 = a0 + t0\n  5642: t0 = 116, jump @938\n      : @146 [@dyn 58] (gas: 1)\n  5647: jump @198 if a0 != 0\n      : @147 (gas: 2)\n  5651: a0 = s1 + 0x440\n  5655: ra = 118, jump @17\n      : @148 [@dyn 59] (gas: 11)\n  5660: a1 = s1 + 0x400\n  5664: a0 = u64 [a1 + 0x58]\n  5667: u64 [s1 + 0x110] = a0\n  5671: a0 = u64 [a1 + 0x50]\n  5674: u64 [s1 + 0x108] = a0\n  5678: a0 = u64 [a1 + 0x48]\n  5681: u64 [s1 + 0x100] = a0\n  5685: a0 = u64 [a1 + 0x40]\n  5688: u64 [s1 + 0xf8] = a0\n  5692: a0 = u64 [s1 + 0xa8]\n  5696: t0 = 120, jump @941\n      : @149 [@dyn 60] (gas: 1)\n  5701: ra = 122, jump @961\n      : @150 [@dyn 61] (gas: 6)\n  5706: u64 [s1 + 0xe8] = a0\n  5710: u64 [s1 + 0xd0] = a1\n  5714: a0 = 0xffffffffffffffff\n  5717: a1 = 0xffffffffffffffff\n  5720: a2 = u64 [s1 + 0x118]\n  5724: ra = 124, jump @956\n      : @151 [@dyn 62] (gas: 1)\n  5729: t0 = 126, jump @943\n      : @152 [@dyn 63] (gas: 1)\n  5734: ra = 128, jump @956\n      : @153 [@dyn 64] (gas: 1)\n  5740: t0 = 130, jump @921\n      : @154 [@dyn 65] (gas: 10)\n  5746: a4 = s1 + 0x7ff\n  5750: a4 = a4 + 0x99\n  5754: u64 [a4 + 0x20] = a3\n  5757: u64 [a4 + 0x18] = a2\n  5760: u64 [a4 + 0x10] = a1\n  5763: u64 [a4 + 0x8] = a0\n  5766: a1 = s1 + 0x7ff\n  5770: a1 = a1 + 0xa1\n  5774: a0 = u64 [s1 + 0xf0]\n  5778: ra = 132, jump @22\n      : @155 [@dyn 66] (gas: 5)\n  5784: t0 = u64 [s1 + 0xa8]\n  5788: t1 = u64 [s1 + 0xa0]\n  5792: t2 = u64 [s1 + 0x98]\n  5796: ra = u64 [s1 + 0x90]\n  5800: fallthrough\n      : @156 (gas: 27)\n  5801: a0 = t2 >> 0x3f\n  5804: a1 = ra << 0x1\n  5807: a0 = a0 | a1\n  5810: a1 = t1 >> 0x3f\n  5813: a2 = t2 << 0x1\n  5816: a1 = a1 | a2\n  5819: a2 = t0 >> 0x3f\n  5822: a3 = t1 << 0x1\n  5825: a2 = a2 | a3\n  5828: a3 = t0 << 0x1\n  5831: a3 = a3 + 0x1\n  5834: a5 = s1 + 0x7ff\n  5838: a5 = a5 + 0x99\n  5842: u64 [a5 + 64] = 0\n  5845: u64 [a5 + 56] = 0\n  5848: u64 [a5 + 48] = 0\n  5851: u64 [a5 + 40] = 0x4\n  5855: u64 [a5 + 0x48] = a3\n  5858: u64 [a5 + 0x50] = a2\n  5861: u64 [a5 + 0x58] = a1\n  5864: u64 [a5 + 0x60] = a0\n  5867: a0 = s1 + 0x7ff\n  5871: a0 = a0 + 0xc1\n  5875: a1 = s1 + 0x7ff\n  5879: a1 = a1 + 0xe1\n  5883: ra = 0x94\n  5887: jump @22\n      : @157 (gas: 9)\n  5890: a0 = u64 [s1 + 0x78]\n  5893: a1 = u64 [s1 + 0x70]\n  5896: a0 = a0 | a1\n  5899: a1 = 0xffffffe0\n  5909: a1 = t0 <u a1\n  5912: a3 = u64 [s1 + 0x80]\n  5916: a1 = 0 if a3 != 0\n  5918: a1 = 0 if a0 != 0\n  5920: jump @198 if a1 == 0\n      : @158 (gas: 3)\n  5924: i32 a1 = t0 + 0x20\n  5927: a0 = s1 + 0x480\n  5931: ra = 134, jump @17\n      : @159 [@dyn 67] (gas: 14)\n  5937: a2 = u64 [s1 + 0x90]\n  5941: a5 = u64 [s1 + 0x98]\n  5945: a4 = u64 [s1 + 0xa0]\n  5949: a3 = u64 [s1 + 0xa8]\n  5953: a1 = s1 + 0x400\n  5957: a0 = u64 [a1 + 0x98]\n  5961: u64 [s1 + 0x110] = a0\n  5965: a0 = u64 [a1 + 0x90]\n  5969: u64 [s1 + 0x108] = a0\n  5973: a0 = u64 [a1 + 0x88]\n  5977: u64 [s1 + 0xf8] = a0\n  5981: a0 = u64 [a1 + 0x80]\n  5985: u64 [s1 + 0x100] = a0\n  5989: fallthrough\n      : @160 (gas: 15)\n  5990: a0 = a4 >> 0x3f\n  5993: a1 = a5 << 0x1\n  5996: a0 = a0 | a1\n  5999: u64 [s1 + 0xf0] = a0\n  6003: a0 = a5 >> 0x3f\n  6006: a1 = a2 << 0x1\n  6009: a0 = a0 | a1\n  6012: u64 [s1 + 0xe8] = a0\n  6016: a0 = a3 >> 0x3f\n  6019: a1 = a4 << 0x1\n  6022: a0 = a0 | a1\n  6025: u64 [s1 + 0xe0] = a0\n  6029: a0 = a3 << 0x1\n  6032: u64 [s1 + 0xd8] = a0\n  6036: t0 = 136, jump @950\n      : @161 [@dyn 68] (gas: 1)\n  6042: ra = 138, jump @961\n      : @162 [@dyn 69] (gas: 7)\n  6048: u64 [s1 + 0xb8] = a0\n  6052: u64 [s1 + 0xd0] = a1\n  6056: a0 = u64 [s1 + 0xa8]\n  6060: i32 a2 = a0 << 0x3\n  6063: a0 = 0xffffffffffffffff\n  6066: a1 = 0xffffffffffffffff\n  6069: ra = 140, jump @956\n      : @163 [@dyn 70] (gas: 10)\n  6075: u64 [s1 + 0xc8] = a0\n  6079: u64 [s1 + 0xc0] = a1\n  6083: a1 = u64 [s1 + 0xb8]\n  6087: a0 = a0 | a1\n  6090: u64 [s1 + 0xb8] = a0\n  6094: a0 = u64 [s1 + 0x118]\n  6098: i32 a2 = a0 + 0xffffffffffffff80\n  6101: a0 = 0xffffffffffffffff\n  6104: a1 = 0xffffffffffffffff\n  6107: ra = 142, jump @956\n      : @164 [@dyn 71] (gas: 7)\n  6113: a4 = u64 [s1 + 0x118]\n  6117: a2 = a4 <u 0x80\n  6121: a3 = u64 [s1 + 0xb8]\n  6125: a0 = a3 if a2 != 0\n  6128: a5 = u64 [s1 + 0xc0]\n  6132: a3 = u64 [s1 + 0xd0]\n  6136: t0 = 144, jump @951\n      : @165 [@dyn 72] (gas: 2)\n  6142: a4 = u64 [s1 + 0xc8]\n  6146: t0 = 146, jump @928\n      : @166 [@dyn 73] (gas: 23)\n  6152: a4 = u64 [s1 + 0xd8]\n  6156: a0 = a0 | a4\n  6159: a4 = u64 [s1 + 0xe0]\n  6163: a1 = a1 | a4\n  6166: a4 = u64 [s1 + 0xe8]\n  6170: a3 = a3 | a4\n  6173: a4 = u64 [s1 + 0xf0]\n  6177: a2 = a2 | a4\n  6180: a5 = s1 + 0x7ff\n  6184: a5 = a5 + 0x99\n  6188: u64 [a5 + 104] = 0x4\n  6192: u64 [a5 + 0x98] = a2\n  6196: u64 [a5 + 0xa0] = a3\n  6200: u64 [a5 + 0x90] = a1\n  6204: u64 [a5 + 0x88] = a0\n  6208: u64 [a5 + 128] = 0\n  6212: u64 [a5 + 120] = 0\n  6215: u64 [a5 + 112] = 0\n  6218: a0 = s1 + 0x7ff\n  6222: a0 = a0 + 0x101\n  6226: a1 = s1 + 0x7ff\n  6230: a1 = a1 + 0x121\n  6234: ra = 148, jump @22\n      : @167 [@dyn 74] (gas: 9)\n  6240: a0 = 0x30110\n  6245: u64 [s1 + 0x118] = a0\n  6249: i32 a0 = a0 + 0\n  6251: u64 [s1 + 0x110] = a0\n  6255: ra = 0x96\n  6259: ecalli 3 // 'caller'\n  6261: a2 = u64 [s1 + 0x118]\n  6265: t0 = 0x98\n  6269: jump @944\n      : @168 [@dyn 75] (gas: 2)\n  6272: a2 = u64 [s1 + 0x118]\n  6276: t0 = 152, jump @944\n      : @169 [@dyn 76] (gas: 1)\n  6282: jump @227 if a0 == 0\n      : @170 (gas: 13)\n  6286: u64 [s1 + 264] = 0x152d\n  6292: a0 = 0x2c7e14af6800000\n  6302: u64 [s1 + 0x100] = a0\n  6306: a0 = s1 + 0x7ff\n  6310: a0 = a0 + 0x99\n  6314: u64 [a0 + 192] = 0\n  6318: u64 [a0 + 184] = 0\n  6322: u64 [a0 + 176] = 0\n  6326: u64 [a0 + 168] = 0x2\n  6331: a0 = s1 + 0x420\n  6335: a1 = s1 + 0x7ff\n  6339: a1 = a1 + 0x141\n  6343: ra = 154, jump @21\n      : @171 [@dyn 77] (gas: 34)\n  6349: a0 = u64 [s1 + 0x438]\n  6353: u64 [s1 + 0xf8] = a0\n  6357: t2 = u64 [s1 + 0x430]\n  6361: a3 = u64 [s1 + 0x428]\n  6365: ra = u64 [s1 + 0x420]\n  6369: a1 = sp + 0xffffffffffffffe0\n  6372: a1 = a1 & 0xffffffffffffffe0\n  6375: sp = a1\n  6377: t1 = u64 [s1 + 0x100]\n  6381: t1 = t1 + ra\n  6384: a0 = t1 <u ra\n  6387: a2 = u64 [s1 + 0x108]\n  6391: a2 = a2 + a3\n  6394: a2 = a2 + a0\n  6397: a4 = a2 ^ a3\n  6400: a5 = a2 <u a3\n  6403: a5 = a0 if a4 == 0\n  6406: t0 = u64 [0x20000]\n  6411: a0 = a3 ^ 0xffffffffffffead2\n  6415: a3 = a3 >u 0xffffffffffffead2\n  6419: a4 = t0 <u ra\n  6422: a4 = a3 if a0 != 0\n  6425: u64 [a1 + 0x8] = a2\n  6428: u64 [a1] = t1\n  6430: a5 = a5 + t2\n  6433: u64 [a1 + 0x10] = a5\n  6436: a0 = a5 <u t2\n  6439: a2 = u64 [s1 + 0xf8]\n  6443: a0 = a0 + a2\n  6446: a2 = t2 & a2\n  6449: a2 = a2 + 0x1\n  6452: a4 = 0 if a2 != 0\n  6454: u64 [a1 + 0x18] = a0\n  6457: jump @232 if a4 != 0\n      : @172 (gas: 9)\n  6461: a0 = s1 + 0x7ff\n  6465: a0 = a0 + 0x99\n  6469: u64 [a0 + 224] = 0\n  6473: u64 [a0 + 216] = 0\n  6477: u64 [a0 + 208] = 0\n  6481: u64 [a0 + 200] = 0x2\n  6486: a0 = s1 + 0x7ff\n  6490: a0 = a0 + 0x161\n  6494: ra = 156, jump @22\n      : @173 [@dyn 78] (gas: 6)\n  6500: a0 = u64 [s1 + 0x110]\n  6504: ra = 0x9e\n  6508: ecalli 3 // 'caller'\n  6510: a2 = u64 [s1 + 0x118]\n  6514: t0 = 0xa0\n  6518: jump @919\n      : @174 [@dyn 79] (gas: 2)\n  6521: a2 = u64 [s1 + 0x118]\n  6525: t0 = 160, jump @919\n      : @175 [@dyn 80] (gas: 8)\n  6531: u64 [s1 + 1048] = 0\n  6535: a2 = s1 + 0x400\n  6539: u64 [a2 + 0x10] = a1\n  6542: u64 [a2 + 0x8] = a0\n  6545: a1 = s1 + 0x400\n  6549: u64 [a2] = a3\n  6551: a0 = 0\n  6553: ra = 162, jump @19\n      : @176 [@dyn 81] (gas: 7)\n  6559: u64 [s1 + 1016] = 0\n  6563: u64 [s1 + 1008] = 0\n  6567: u64 [s1 + 1000] = 0\n  6571: a0 = 0x20\n  6574: a1 = s1 + 0x3e0\n  6578: u64 [s1 + 992] = 0\n  6582: ra = 164, jump @19\n      : @177 [@dyn 82] (gas: 6)\n  6588: a0 = sp + 0xffffffffffffffe0\n  6591: a0 = a0 & 0xffffffffffffffe0\n  6594: u64 [s1 + 0xf8] = a0\n  6598: sp = a0\n  6600: a1 = i32 [0x200fc]\n  6605: jump @179 if a1 >u 63\n      : @178 (gas: 2)\n  6609: u32 [0x200fc] = 0x40\n  6615: fallthrough\n      : @179 (gas: 13)\n  6616: a0 = sp + 0xffffffffffffffe0\n  6619: a2 = a0 & 0xffffffffffffffe0\n  6622: u64 [s1 + 0xf0] = a2\n  6626: sp = a2\n  6628: a0 = 0x20110\n  6633: i32 a0 = a0 + 0\n  6635: i32 a2 = a2 + 0\n  6637: a1 = 0x40\n  6640: ra = 0xa6\n  6644: ecalli 6 // 'hash_keccak_256'\n  6646: a3 = u64 [s1 + 0xf0]\n  6650: t0 = 0xa8\n  6654: jump @922\n      : @180 [@dyn 83] (gas: 2)\n  6657: a3 = u64 [s1 + 0xf0]\n  6661: t0 = 168, jump @922\n      : @181 [@dyn 84] (gas: 7)\n  6667: a1 = u64 [s1 + 0xf8]\n  6671: u64 [a1 + 0x18] = a3\n  6674: u64 [a1 + 0x10] = a2\n  6677: u64 [a1 + 0x8] = a4\n  6680: u64 [a1] = a0\n  6682: a0 = s1 + 0x3c0\n  6686: ra = 170, jump @21\n      : @182 [@dyn 85] (gas: 26)\n  6692: a0 = u64 [s1 + 0x3c8]\n  6696: a1 = u64 [s1 + 0x3c0]\n  6700: t0 = u64 [s1 + 0x3d8]\n  6704: a3 = u64 [s1 + 0x3d0]\n  6708: a4 = u64 [s1 + 0x108]\n  6712: a4 = a4 + a0\n  6715: a5 = u64 [s1 + 0x100]\n  6719: a5 = a5 + a1\n  6722: a1 = a5 <u a1\n  6725: a4 = a4 + a1\n  6728: a2 = a4 ^ a0\n  6731: a0 = a4 <u a0\n  6734: a0 = a1 if a2 == 0\n  6737: a0 = a0 + a3\n  6740: a1 = a0 <u a3\n  6743: a1 = a1 + t0\n  6746: a2 = s1 + 0x7ff\n  6750: a2 = a2 + 0x99\n  6754: u64 [a2 + 0xe8] = a5\n  6758: u64 [a2 + 0xf0] = a4\n  6762: u64 [a2 + 0xf8] = a0\n  6766: u64 [a2 + 0x100] = a1\n  6770: a1 = s1 + 0x7ff\n  6774: a1 = a1 + 0x181\n  6778: a0 = u64 [s1 + 0xf8]\n  6782: ra = 172, jump @22\n      : @183 [@dyn 86] (gas: 3)\n  6788: a0 = s1 + 0x3a0\n  6792: a1 = 0x40\n  6795: ra = 174, jump @17\n      : @184 [@dyn 87] (gas: 6)\n  6801: a4 = s1 + 0x300\n  6805: a0 = u64 [a4 + 0xb8]\n  6809: a1 = u64 [a4 + 0xb0]\n  6813: a2 = u64 [a4 + 0xa8]\n  6817: a3 = u64 [a4 + 0xa0]\n  6821: t0 = 176, jump @932\n      : @185 [@dyn 88] (gas: 1)\n  6827: jump @198 if a0 != 0\n      : @186 (gas: 9)\n  6831: u64 [s1 + 920] = 0\n  6835: u64 [s1 + 912] = 0\n  6839: u64 [s1 + 904] = 0x152d\n  6845: a0 = 0x2c7e14af6800000\n  6855: a1 = s1 + 0x380\n  6859: u64 [s1 + 0x380] = a0\n  6863: a0 = a3\n  6865: u64 [s1 + 0x108] = a3\n  6869: ra = 178, jump @19\n      : @187 [@dyn 89] (gas: 6)\n  6875: a0 = u64 [s1 + 0x110]\n  6879: ra = 0xb4\n  6883: ecalli 3 // 'caller'\n  6885: a2 = u64 [s1 + 0x118]\n  6889: t0 = 0xb6\n  6893: jump @946\n      : @188 [@dyn 90] (gas: 2)\n  6896: a2 = u64 [s1 + 0x118]\n  6900: t0 = 182, jump @946\n      : @189 [@dyn 91] (gas: 28)\n  6906: t0 = a1 | a0\n  6909: a3 = a3 >> 0x20\n  6912: a2 = reverse a2\n  6914: a1 = a2 << 0x20\n  6917: a1 = a1 | a3\n  6920: a2 = a2 >> 0x20\n  6923: u64 [s1 + 824] = 0\n  6927: u64 [s1 + 856] = 0\n  6931: u64 [s1 + 848] = 0\n  6935: u64 [s1 + 840] = 0\n  6939: u64 [s1 + 832] = 0\n  6943: a3 = u64 [0x20008]\n  6948: a4 = u64 [0x20010]\n  6953: a5 = u64 [0x20018]\n  6958: a0 = u64 [0x20020]\n  6963: u64 [s1 + 0x378] = a3\n  6967: u64 [s1 + 0x370] = a4\n  6971: u64 [s1 + 0x368] = a5\n  6975: u64 [s1 + 0x360] = a0\n  6979: u64 [s1 + 0x330] = a2\n  6983: u64 [s1 + 0x328] = a1\n  6987: a1 = 0x20\n  6990: a2 = s1 + 0x360\n  6994: a3 = s1 + 0x340\n  6998: a4 = s1 + 0x320\n  7002: u64 [s1 + 0x320] = t0\n  7006: a0 = u64 [s1 + 0x108]\n  7010: ra = 184, jump @23\n      : @190 [@dyn 92] (gas: 6)\n  7016: a0 = u64 [s1 + 0x110]\n  7020: ra = 0xba\n  7024: ecalli 3 // 'caller'\n  7026: a2 = u64 [s1 + 0x118]\n  7030: t0 = 0xbc\n  7034: jump @942\n      : @191 [@dyn 93] (gas: 2)\n  7037: a2 = u64 [s1 + 0x118]\n  7041: t0 = 188, jump @942\n      : @192 [@dyn 94] (gas: 18)\n  7047: u64 [s1 + 0x118] = a1\n  7051: a0 = a0 >> 0x20\n  7054: a1 = reverse a2\n  7056: a2 = a1 << 0x20\n  7059: a0 = a0 | a2\n  7062: u64 [s1 + 0x110] = a0\n  7066: a1 = a1 >> 0x20\n  7069: u64 [s1 + 0x108] = a1\n  7073: a1 = s1 + 0x7ff\n  7077: a1 = a1 + 0x99\n  7081: u64 [a1 + 288] = 0\n  7085: u64 [a1 + 280] = 0\n  7089: u64 [a1 + 272] = 0\n  7093: u64 [a1 + 264] = 0x7\n  7098: a0 = s1 + 0x300\n  7102: a1 = s1 + 0x7ff\n  7106: a1 = a1 + 0x1a1\n  7110: ra = 190, jump @21\n      : @193 [@dyn 95] (gas: 24)\n  7116: a0 = u32 [s1 + 0x314]\n  7120: a0 = a0 << 0x20\n  7123: a1 = u64 [s1 + 0x318]\n  7127: a4 = s1 + 0x100\n  7131: a2 = u64 [a4 + 0x8]\n  7134: a0 = a0 | a2\n  7137: a2 = s1 + 0x7ff\n  7141: a2 = a2 + 0x99\n  7145: u64 [a2 + 320] = 0\n  7149: u64 [a2 + 312] = 0\n  7153: u64 [a2 + 304] = 0\n  7157: a5 = a2 + 0x100\n  7161: u64 [a5 + 40] = 0x7\n  7165: u64 [a5 + 0x60] = a1\n  7168: a1 = u64 [a4 + 0x10]\n  7171: u64 [a5 + 0x50] = a1\n  7174: a1 = u64 [a4 + 0x18]\n  7177: u64 [a5 + 0x48] = a1\n  7180: u64 [a5 + 0x58] = a0\n  7183: a0 = s1 + 0x7ff\n  7187: a0 = a0 + 0x1c1\n  7191: a1 = s1 + 0x7ff\n  7195: a1 = a1 + 0x1e1\n  7199: ra = 192, jump @22\n      : @194 [@dyn 96] (gas: 15)\n  7205: a1 = s1 + 0x7ff\n  7209: a1 = a1 + 0x99\n  7213: u64 [a1 + 384] = 0\n  7217: u64 [a1 + 376] = 0\n  7221: u64 [a1 + 368] = 0\n  7225: u64 [a1 + 360] = 0x6\n  7230: u64 [a1 + 416] = 0\n  7234: u64 [a1 + 408] = 0\n  7238: u64 [a1 + 400] = 0\n  7242: u64 [a1 + 392] = 0xe10\n  7248: a0 = s1 + 0x7ff\n  7252: a0 = a0 + 0x201\n  7256: a1 = s1 + 0x7ff\n  7260: a1 = a1 + 0x221\n  7264: ra = 194, jump @22\n      : @195 [@dyn 97] (gas: 3)\n  7270: a0 = s1 + 0x2e0\n  7274: a1 = 0x40\n  7277: ra = 196, jump @17\n      : @196 [@dyn 98] (gas: 6)\n  7283: a4 = s1 + 0x200\n  7287: a3 = u64 [a4 + 0xf8]\n  7291: a1 = u64 [a4 + 0xf0]\n  7295: a2 = u64 [a4 + 0xe8]\n  7299: a0 = u64 [a4 + 0xe0]\n  7303: t0 = 198, jump @930\n      : @197 [@dyn 99] (gas: 1)\n  7309: jump @239 if a1 == 0\n      : @198 (gas: 1)\n  7313: trap\n      : @199 (gas: 6)\n  7314: a1 = 0x20110\n  7319: i32 a1 = a1 + 0\n  7321: a0 = 0x1\n  7324: a2 = 0\n  7326: ecalli 8 // 'seal_return'\n  7328: jump @203\n      : @200 (gas: 6)\n  7330: a1 = 0x20110\n  7335: i32 a1 = a1 + 0\n  7337: a0 = 0x1\n  7340: a2 = 0\n  7342: ecalli 8 // 'seal_return'\n  7344: jump @203\n      : @201 (gas: 6)\n  7346: a1 = 0x20110\n  7351: i32 a1 = a1 + 0\n  7353: a0 = 0x1\n  7356: a2 = 0\n  7358: ecalli 8 // 'seal_return'\n  7360: jump @203\n      : @202 (gas: 6)\n  7362: a1 = 0x20110\n  7367: i32 a1 = a1 + 0\n  7369: a0 = 0x1\n  7372: a2 = 0\n  7374: ecalli 8 // 'seal_return'\n  7376: fallthrough\n      : @203 (gas: 6)\n  7377: u64 [s1 + 336] = 0\n  7381: u64 [s1 + 328] = 0\n  7385: u64 [s1 + 320] = 0\n  7389: t0 = 0xc8\n  7393: a0 = 0x4e487b7100000000\n  7403: fallthrough\n      : @204 [@dyn 100] (gas: 4)\n  7404: a1 = s1 + 0x140\n  7408: u64 [s1 + 0x158] = a0\n  7412: a0 = 0\n  7414: ra = 202, jump @19\n      : @205 [@dyn 101] (gas: 7)\n  7420: u64 [s1 + 312] = 0\n  7424: u64 [s1 + 304] = 0\n  7428: u64 [s1 + 288] = 0x41\n  7433: a0 = 0x4\n  7436: a1 = s1 + 0x120\n  7440: u64 [s1 + 296] = 0\n  7444: ra = 204, jump @19\n      : @206 [@dyn 102] (gas: 2)\n  7450: a1 = i32 [0x200fc]\n  7455: jump @208 if a1 >u 63\n      : @207 (gas: 3)\n  7459: u32 [0x200fc] = 0x40\n  7465: a1 = 0x20110\n  7470: jump @238\n      : @208 (gas: 2)\n  7473: a1 = 0x20110\n  7478: jump @238\n      : @209 (gas: 6)\n  7481: u64 [s1 + 400] = 0\n  7485: u64 [s1 + 392] = 0\n  7489: u64 [s1 + 384] = 0\n  7493: t0 = 0xce\n  7497: a0 = 0x4e487b7100000000\n  7507: fallthrough\n      : @210 [@dyn 103] (gas: 4)\n  7508: a1 = s1 + 0x180\n  7512: u64 [s1 + 0x198] = a0\n  7516: a0 = 0\n  7518: ra = 208, jump @19\n      : @211 [@dyn 104] (gas: 7)\n  7524: u64 [s1 + 376] = 0\n  7528: u64 [s1 + 368] = 0\n  7532: u64 [s1 + 352] = 0x22\n  7537: a0 = 0x4\n  7540: a1 = s1 + 0x160\n  7544: u64 [s1 + 360] = 0\n  7548: ra = 210, jump @19\n      : @212 [@dyn 105] (gas: 2)\n  7554: a1 = i32 [0x200fc]\n  7559: jump @214 if a1 >u 63\n      : @213 (gas: 3)\n  7563: u32 [0x200fc] = 0x40\n  7569: a1 = 0x20110\n  7574: jump @238\n      : @214 (gas: 2)\n  7577: a1 = 0x20110\n  7582: jump @238\n      : @215 (gas: 6)\n  7585: u64 [s1 + 496] = 0\n  7589: u64 [s1 + 488] = 0\n  7593: u64 [s1 + 480] = 0\n  7597: t0 = 0xd4\n  7601: a0 = 0x4e487b7100000000\n  7611: fallthrough\n      : @216 [@dyn 106] (gas: 4)\n  7612: a1 = s1 + 0x1e0\n  7616: u64 [s1 + 0x1f8] = a0\n  7620: a0 = 0\n  7622: ra = 214, jump @19\n      : @217 [@dyn 107] (gas: 7)\n  7628: u64 [s1 + 472] = 0\n  7632: u64 [s1 + 464] = 0\n  7636: u64 [s1 + 448] = 0x41\n  7641: a0 = 0x4\n  7644: a1 = s1 + 0x1c0\n  7648: u64 [s1 + 456] = 0\n  7652: ra = 216, jump @19\n      : @218 [@dyn 108] (gas: 2)\n  7658: a1 = i32 [0x200fc]\n  7663: jump @220 if a1 >u 63\n      : @219 (gas: 3)\n  7667: u32 [0x200fc] = 0x40\n  7673: a1 = 0x20110\n  7678: jump @238\n      : @220 (gas: 2)\n  7681: a1 = 0x20110\n  7686: jump @238\n      : @221 (gas: 6)\n  7689: u64 [s1 + 560] = 0\n  7693: u64 [s1 + 552] = 0\n  7697: u64 [s1 + 544] = 0\n  7701: t0 = 0xda\n  7705: a0 = 0x4e487b7100000000\n  7715: fallthrough\n      : @222 [@dyn 109] (gas: 4)\n  7716: a1 = s1 + 0x220\n  7720: u64 [s1 + 0x238] = a0\n  7724: a0 = 0\n  7726: ra = 220, jump @19\n      : @223 [@dyn 110] (gas: 7)\n  7732: u64 [s1 + 536] = 0\n  7736: u64 [s1 + 528] = 0\n  7740: u64 [s1 + 512] = 0x22\n  7745: a0 = 0x4\n  7748: a1 = s1 + 0x200\n  7752: u64 [s1 + 520] = 0\n  7756: ra = 222, jump @19\n      : @224 [@dyn 111] (gas: 2)\n  7762: a1 = i32 [0x200fc]\n  7767: jump @226 if a1 >u 63\n      : @225 (gas: 3)\n  7771: u32 [0x200fc] = 0x40\n  7777: a1 = 0x20110\n  7782: jump @238\n      : @226 (gas: 2)\n  7785: a1 = 0x20110\n  7790: jump @238\n      : @227 (gas: 8)\n  7793: u64 [s1 + 656] = 0\n  7797: u64 [s1 + 648] = 0\n  7801: u64 [s1 + 640] = 0\n  7805: a0 = 0xec442f0500000000\n  7815: a1 = s1 + 0x280\n  7819: u64 [s1 + 0x298] = a0\n  7823: a0 = 0\n  7825: ra = 224, jump @19\n      : @228 [@dyn 112] (gas: 7)\n  7831: u64 [s1 + 632] = 0\n  7835: u64 [s1 + 624] = 0\n  7839: u64 [s1 + 616] = 0\n  7843: a0 = 0x4\n  7846: a1 = s1 + 0x260\n  7850: u64 [s1 + 608] = 0\n  7854: ra = 226, jump @19\n      : @229 [@dyn 113] (gas: 2)\n  7860: a1 = i32 [0x200fc]\n  7865: jump @231 if a1 >u 63\n      : @230 (gas: 3)\n  7869: u32 [0x200fc] = 0x40\n  7875: a1 = 0x20110\n  7880: jump @238\n      : @231 (gas: 2)\n  7882: a1 = 0x20110\n  7887: jump @238\n      : @232 (gas: 6)\n  7889: u64 [s1 + 720] = 0\n  7893: u64 [s1 + 712] = 0\n  7897: u64 [s1 + 704] = 0\n  7901: t0 = 0xe4\n  7905: a0 = 0x4e487b7100000000\n  7915: fallthrough\n      : @233 [@dyn 114] (gas: 4)\n  7916: a1 = s1 + 0x2c0\n  7920: u64 [s1 + 0x2d8] = a0\n  7924: a0 = 0\n  7926: ra = 230, jump @19\n      : @234 [@dyn 115] (gas: 7)\n  7932: u64 [s1 + 696] = 0\n  7936: u64 [s1 + 688] = 0\n  7940: u64 [s1 + 672] = 0x11\n  7945: a0 = 0x4\n  7948: a1 = s1 + 0x2a0\n  7952: u64 [s1 + 680] = 0\n  7956: ra = 232, jump @19\n      : @235 [@dyn 116] (gas: 2)\n  7962: a1 = i32 [0x200fc]\n  7967: jump @237 if a1 >u 63\n      : @236 (gas: 3)\n  7971: u32 [0x200fc] = 0x40\n  7977: a1 = 0x20110\n  7982: jump @238\n      : @237 (gas: 2)\n  7984: a1 = 0x20110\n  7989: fallthrough\n      : @238 (gas: 7)\n  7990: i32 a1 = a1 + 0\n  7992: a0 = 0x1\n  7995: a2 = 0x24\n  7998: ecalli 8 // 'seal_return'\n  8000: u64 [s1 + 0x118] = a0\n  8004: ra = 0xea\n  8008: jump @26\n      : @239 (gas: 2)\n  8011: u64 [s1 + 0x118] = a0\n  8015: ra = 234, jump @26\n      : @240 [@dyn 117] (gas: 5)\n  8021: i32 a0 = a0 + 0\n  8023: a1 = 0\n  8025: a2 = 0\n  8027: ecalli 0 // 'call_data_copy'\n  8028: jump @15\n      : @241 (gas: 3)\n  8031: a0 = u64 [s1 + 0x118]\n  8035: a1 = 0\n  8037: ra = 236, jump @26\n      : @242 [@dyn 118] (gas: 5)\n  8043: i32 a1 = a0 + 0\n  8045: a0 = 0\n  8047: a2 = 0\n  8049: ecalli 8 // 'seal_return'\n  8051: jump @203\n      : @243 [@dyn 119] (gas: 4)\n  8054: a0 = 0x200f8\n  8059: u64 [s1 + 0xf8] = a0\n  8063: a0 = i32 [0x200f8]\n  8068: jump @245 if a0 >=u 4\n      : @244 (gas: 1)\n  8072: jump @730\n      : @245 (gas: 6)\n  8075: a0 = s1 + 0x1000\n  8079: i32 a0 = a0 + 0x3c0\n  8083: a1 = 0\n  8085: ra = 0xf0\n  8089: ecalli 1 // 'call_data_load'\n  8091: fallthrough\n      : @246 [@dyn 120] (gas: 3)\n  8092: a2 = s1 + 0x1078\n  8096: a0 = i32 [a2 + 0x364]\n  8100: jump @248 if a0 != 2376452955\n      : @247 (gas: 1)\n  8107: jump @518\n      : @248 (gas: 1)\n  8110: jump @367 if a0 == 2491037435\n      : @249 (gas: 1)\n  8118: jump @287 if a0 == 2514000705\n      : @250 (gas: 2)\n  8126: a3 = s1 + 0x1878\n  8130: jump @252 if a0 != 2835717307\n      : @251 (gas: 1)\n  8137: jump @568\n      : @252 (gas: 1)\n  8140: jump @379 if a0 == 3266987844\n      : @253 (gas: 1)\n  8148: jump @255 if a0 != 3714247998\n      : @254 (gas: 1)\n  8155: jump @579\n      : @255 (gas: 1)\n  8158: jump @257 if a0 != 117300739\n      : @256 (gas: 1)\n  8165: jump @474\n      : @257 (gas: 1)\n  8168: jump @259 if a0 != 157198259\n      : @258 (gas: 1)\n  8175: jump @530\n      : @259 (gas: 1)\n  8178: jump @261 if a0 != 404098525\n      : @260 (gas: 1)\n  8185: jump @507\n      : @261 (gas: 1)\n  8188: jump @318 if a0 == 537198553\n      : @262 (gas: 1)\n  8196: jump @264 if a0 != 599290589\n      : @263 (gas: 1)\n  8203: jump @423\n      : @264 (gas: 1)\n  8206: jump @411 if a0 == 826074471\n      : @265 (gas: 1)\n  8214: jump @267 if a0 == 1789336856\n      : @266 (gas: 1)\n  8221: jump @487\n      : @267 (gas: 10)\n  8224: u64 [a2 + 1728] = 0\n  8228: u64 [a2 + 1720] = 0\n  8232: u64 [a2 + 1712] = 0\n  8236: u64 [a2 + 1704] = 0\n  8240: a0 = s1 + 0x1000\n  8244: i32 a0 = a0 + 0x720\n  8248: ra = 0xf2\n  8252: ecalli 11 // 'value_transferred'\n  8254: t0 = 0xf4\n  8258: jump @931\n      : @268 [@dyn 121] (gas: 1)\n  8261: t0 = 244, jump @931\n      : @269 [@dyn 122] (gas: 1)\n  8267: t0 = 246, jump @952\n      : @270 [@dyn 123] (gas: 1)\n  8273: jump @272 if a0 == 0\n      : @271 (gas: 1)\n  8276: jump @641\n      : @272 (gas: 4)\n  8279: a0 = u64 [s1 + 0xf8]\n  8283: a0 = i32 [a0]\n  8285: a1 = 0x23\n  8288: jump @274 if a1 <u a0\n      : @273 (gas: 1)\n  8291: jump @642\n      : @274 (gas: 5)\n  8294: a0 = s1 + 0x7ff\n  8298: a0 = a0 + 0x4a1\n  8302: ra = 0xf8\n  8306: t0 = 0x2f4\n  8310: jump @954\n      : @275 [@dyn 124] (gas: 14)\n  8313: a3 = s1 + 0x7ff\n  8317: a3 = a3 + 0x71\n  8320: a4 = a3 + 0x400\n  8324: a0 = u64 [a4 + 0x30]\n  8327: a1 = u64 [a4 + 0x38]\n  8330: a2 = u32 [a3 + 0x440]\n  8334: u64 [a3 + 1064] = 0\n  8338: u64 [a4 + 0x20] = a2\n  8341: u64 [a4 + 0x18] = a1\n  8344: a1 = s1 + 0x7ff\n  8348: a1 = a1 + 0x481\n  8352: u64 [a4 + 0x10] = a0\n  8355: a0 = 0\n  8357: ra = 250, jump @19\n      : @276 [@dyn 125] (gas: 11)\n  8363: a1 = s1 + 0x7ff\n  8367: a1 = a1 + 0x71\n  8370: u64 [a1 + 1032] = 0\n  8374: u64 [a1 + 1024] = 0\n  8378: u64 [a1 + 1008] = 0x5\n  8383: a2 = a1\n  8385: a0 = 0x20\n  8388: a1 = s1 + 0x7ff\n  8392: a1 = a1 + 0x461\n  8396: u64 [a2 + 1016] = 0\n  8400: ra = 252, jump @19\n      : @277 [@dyn 126] (gas: 2)\n  8406: a1 = i32 [0x200fc]\n  8411: jump @279 if a1 >u 63\n      : @278 (gas: 2)\n  8415: u32 [0x200fc] = 0x40\n  8421: fallthrough\n      : @279 (gas: 13)\n  8422: a0 = sp + 0xffffffffffffffe0\n  8425: a2 = a0 & 0xffffffffffffffe0\n  8428: u64 [s1 + 0xf8] = a2\n  8432: sp = a2\n  8434: a0 = 0x20110\n  8439: i32 a0 = a0 + 0\n  8441: i32 a2 = a2 + 0\n  8443: a1 = 0x40\n  8446: ra = 0xfe\n  8450: ecalli 6 // 'hash_keccak_256'\n  8452: a3 = u64 [s1 + 0xf8]\n  8456: t0 = 0x100\n  8460: jump @923\n      : @280 [@dyn 127] (gas: 2)\n  8463: a3 = u64 [s1 + 0xf8]\n  8467: t0 = 256, jump @923\n      : @281 [@dyn 128] (gas: 9)\n  8473: a5 = a4 + 0x600\n  8477: u64 [a5 + 0xe0] = a3\n  8481: u64 [a5 + 0xd8] = a2\n  8485: u64 [a5 + 0xd0] = a1\n  8489: u64 [a5 + 0xc8] = a0\n  8493: a0 = s1 + 0x7ff\n  8497: a0 = a0 + 0x441\n  8501: a1 = s1 + 0x1740\n  8505: ra = 258, jump @21\n      : @282 [@dyn 129] (gas: 15)\n  8511: a1 = s1 + 0x7ff\n  8515: a1 = a1 + 0x71\n  8518: a2 = a1 + 0x300\n  8522: a0 = u64 [a2 + 0xe8]\n  8526: u64 [s1 + 0xf8] = a0\n  8530: a0 = u64 [a2 + 0xe0]\n  8534: u64 [s1 + 0xf0] = a0\n  8538: a0 = u64 [a2 + 0xd8]\n  8542: u64 [s1 + 0xe8] = a0\n  8546: a0 = u64 [a2 + 0xd0]\n  8550: u64 [s1 + 0xe0] = a0\n  8554: a0 = s1 + 0x7ff\n  8558: a0 = a0 + 0x421\n  8562: a1 = 0x40\n  8565: ra = 260, jump @17\n      : @283 [@dyn 130] (gas: 8)\n  8571: a3 = s1 + 0x7ff\n  8575: a3 = a3 + 0x71\n  8578: a5 = a3 + 0x300\n  8582: a0 = u64 [a5 + 0xc8]\n  8586: a1 = u64 [a5 + 0xc0]\n  8590: a2 = u64 [a5 + 0xb8]\n  8594: a4 = u64 [a5 + 0xb0]\n  8598: t0 = 262, jump @924\n      : @284 [@dyn 131] (gas: 1)\n  8604: jump @286 if a0 == 0\n      : @285 (gas: 1)\n  8607: jump @617\n      : @286 (gas: 15)\n  8610: a0 = u64 [s1 + 0xe0]\n  8614: a2 = a3 + 0x300\n  8618: u64 [a2 + 0x90] = a0\n  8622: a0 = u64 [s1 + 0xe8]\n  8626: u64 [a2 + 0x98] = a0\n  8630: a0 = u64 [s1 + 0xf0]\n  8634: u64 [a2 + 0xa0] = a0\n  8638: a1 = s1 + 0x7ff\n  8642: a1 = a1 + 0x401\n  8646: a0 = u64 [s1 + 0xf8]\n  8650: u64 [a2 + 0xa8] = a0\n  8654: a0 = a4\n  8656: u64 [s1 + 0xf8] = a4\n  8660: ra = 0x248\n  8664: jump @19\n      : @287 (gas: 10)\n  8667: u64 [a2 + 1984] = 0\n  8671: u64 [a2 + 1976] = 0\n  8675: u64 [a2 + 1968] = 0\n  8679: u64 [a2 + 1960] = 0\n  8683: a0 = s1 + 0x2000\n  8687: i32 a0 = a0 + 0xfffffffffffff820\n  8691: ra = 0x108\n  8695: ecalli 11 // 'value_transferred'\n  8697: t0 = 0x10a\n  8701: jump @948\n      : @288 [@dyn 132] (gas: 1)\n  8704: t0 = 266, jump @948\n      : @289 [@dyn 133] (gas: 1)\n  8710: t0 = 268, jump @952\n      : @290 [@dyn 134] (gas: 1)\n  8716: jump @292 if a0 == 0\n      : @291 (gas: 1)\n  8719: jump @643\n      : @292 (gas: 3)\n  8722: a0 = u64 [s1 + 0xf8]\n  8726: a0 = i32 [a0]\n  8728: jump @294 if a0 >u 3\n      : @293 (gas: 1)\n  8732: jump @644\n      : @294 (gas: 3)\n  8735: a0 = s1 + 0x1000\n  8739: a1 = 0x40\n  8742: ra = 270, jump @17\n      : @295 [@dyn 135] (gas: 20)\n  8748: a1 = s1 + 0x7ff\n  8752: a1 = a1 + 0x71\n  8755: a2 = a1 + 0x700\n  8759: a0 = u64 [a2 + 0xa8]\n  8763: u64 [s1 + 0x58] = a0\n  8766: a0 = u64 [a2 + 0xa0]\n  8770: u64 [s1 + 0x68] = a0\n  8773: a0 = u64 [a2 + 0x98]\n  8777: u64 [s1 + 0x60] = a0\n  8780: a0 = u64 [a2 + 0x90]\n  8784: u64 [s1 + 0x70] = a0\n  8787: a1 = s1 + 0x1078\n  8791: u64 [a1 + 2016] = 0\n  8795: u64 [a1 + 2008] = 0\n  8799: u64 [a1 + 2000] = 0\n  8803: u64 [a1 + 1992] = 0x4\n  8808: a0 = s1 + 0x7ff\n  8812: a0 = a0 + 0x7e1\n  8816: a1 = s1 + 0x1840\n  8820: ra = 272, jump @21\n      : @296 [@dyn 136] (gas: 36)\n  8826: a0 = s1 + 0x7ff\n  8830: a0 = a0 + 0x71\n  8833: t2 = u64 [a0 + 0x780]\n  8837: ra = u64 [a0 + 0x778]\n  8841: t1 = u64 [a0 + 0x788]\n  8845: a4 = u64 [a0 + 0x770]\n  8849: a0 = t2 << 0x3f\n  8852: a1 = ra >> 0x1\n  8855: a0 = a0 | a1\n  8858: a1 = t1 << 0x3f\n  8861: a2 = t2 >> 0x1\n  8864: a1 = a1 | a2\n  8867: a2 = ra << 0x3f\n  8870: a3 = a4 >> 0x1\n  8873: a5 = a3 | a2\n  8876: a2 = t1 >> 0x1\n  8879: u64 [s1 + 0xf0] = a4\n  8883: a4 = a4 & 0x1\n  8886: a3 = -a4\n  8888: a1 = a1 & a3\n  8891: t0 = a3 & a0\n  8894: a2 = a2 & a3\n  8897: a0 = a5 & 0x7f\n  8900: u64 [s1 + 0xe8] = a0\n  8904: a5 = a0 if a4 == 0\n  8907: u64 [s1 + 0xb0] = a5\n  8911: a0 = a5 <u 0x20\n  8914: u64 [s1 + 0xa0] = t0\n  8918: a0 = 0 if t0 != 0\n  8920: u64 [s1 + 0xa8] = a1\n  8924: u64 [s1 + 0x98] = a2\n  8928: a1 = a1 | a2\n  8931: a0 = 0 if a1 != 0\n  8933: u64 [s1 + 0xf8] = a4\n  8937: a1 = a4 <u 0x1\n  8940: jump @298 if a1 == a0\n      : @297 (gas: 1)\n  8943: jump @645\n      : @298 (gas: 12)\n  8946: a2 = u64 [s1 + 0x68]\n  8949: a3 = u64 [s1 + 0x70]\n  8952: a0 = a3 | a2\n  8955: a1 = u64 [s1 + 0x60]\n  8958: a4 = u64 [s1 + 0x58]\n  8961: a1 = a1 | a4\n  8964: a0 = a0 | a1\n  8967: a0 = a0 >> 0x20\n  8970: a1 = a1 | a2\n  8973: a1 = a1 << 0x20\n  8976: a1 = a1 | a0\n  8979: jump @300 if a1 == 0\n      : @299 (gas: 1)\n  8982: jump @617\n      : @300 (gas: 18)\n  8985: a0 = a3\n  8987: u64 [s1 + 0xd0] = ra\n  8991: u64 [s1 + 0xd8] = t2\n  8995: u64 [s1 + 0xe0] = t1\n  8999: a1 = u64 [s1 + 0xb0]\n  9003: a3 = s1 + 0x7ff\n  9007: a3 = a3 + 0x71\n  9010: a4 = a3 + 0x700\n  9014: u64 [a4 + 0x50] = a1\n  9017: a1 = u64 [s1 + 0xa0]\n  9021: u64 [a4 + 0x58] = a1\n  9024: a1 = u64 [s1 + 0xa8]\n  9028: u64 [a4 + 0x60] = a1\n  9031: a1 = s1 + 0x7ff\n  9035: a1 = a1 + 0x7c1\n  9039: a2 = u64 [s1 + 0x98]\n  9043: u64 [a4 + 0x68] = a2\n  9046: ra = 274, jump @19\n      : @301 [@dyn 137] (gas: 2)\n  9052: a0 = u64 [s1 + 0xf8]\n  9056: jump @303 if a0 == 0\n      : @302 (gas: 1)\n  9059: jump @618\n      : @303 (gas: 10)\n  9062: a0 = u64 [s1 + 0x68]\n  9065: a1 = u64 [s1 + 0x58]\n  9068: a0 = a0 | a1\n  9071: a1 = 0xffffffe0\n  9081: a3 = u64 [s1 + 0x70]\n  9084: a1 = a3 <u a1\n  9087: a2 = u64 [s1 + 0x60]\n  9090: a1 = 0 if a2 != 0\n  9092: a1 = 0 if a0 != 0\n  9094: jump @305 if a1 != 0\n      : @304 (gas: 1)\n  9097: jump @617\n      : @305 (gas: 16)\n  9100: a1 = u64 [s1 + 0xf0]\n  9104: a1 = a1 & 0xffffffffffffff00\n  9108: i32 a0 = a3 + 0x20\n  9111: a2 = s1 + 0x7ff\n  9115: a2 = a2 + 0x71\n  9118: a3 = u64 [s1 + 0xd0]\n  9122: a4 = a2 + 0x600\n  9126: u64 [a4 + 0xd8] = a3\n  9130: u64 [a4 + 0xd0] = a1\n  9134: a1 = u64 [s1 + 0xd8]\n  9138: u64 [a4 + 0xe0] = a1\n  9142: a1 = s1 + 0x7ff\n  9146: a1 = a1 + 0x741\n  9150: a3 = u64 [s1 + 0xe0]\n  9154: u64 [a4 + 0xe8] = a3\n  9158: ra = 276, jump @19\n      : @306 [@dyn 138] (gas: 8)\n  9164: t2 = 0\n  9166: t1 = 0\n  9168: u64 [s1 + 240] = 0\n  9172: a0 = u64 [s1 + 0xe8]\n  9176: a0 = a0 >u 0\n  9178: a0 = a0 << 0x5\n  9181: u64 [s1 + 0xf8] = a0\n  9185: fallthrough\n      : @307 (gas: 37)\n  9186: a1 = u64 [s1 + 0xf8]\n  9190: a0 = a1 + 0x3f\n  9193: a1 = a0 <u a1\n  9196: a2 = t2 + a1\n  9199: a0 = a0 & 0xffffffffffffffe0\n  9202: ra = u64 [s1 + 0x70]\n  9205: ra = ra + a0\n  9208: u64 [s1 + 0xf8] = ra\n  9212: a0 = ra <u a0\n  9215: t0 = u64 [s1 + 0x60]\n  9218: a3 = a2 + t0\n  9221: ra = a3 + a0\n  9224: a3 = ra ^ a2\n  9227: a4 = ra <u a2\n  9230: a4 = a0 if a3 == 0\n  9233: a0 = a2 <u t2\n  9236: a0 = a1 if a1 == 0\n  9239: a0 = a0 + t1\n  9242: a1 = a0 <u t1\n  9245: a2 = u64 [s1 + 0x68]\n  9248: a2 = a2 + a0\n  9251: a4 = a4 + a2\n  9254: a0 = a2 <u a0\n  9257: a2 = a4 <u a2\n  9260: t1 = u64 [s1 + 0x58]\n  9263: a3 = u64 [s1 + 0xf0]\n  9267: a3 = a3 + t1\n  9270: a1 = a1 + a3\n  9273: a0 = a0 + a1\n  9276: a5 = a0 + a2\n  9279: a0 = a5 >u 0\n  9281: a1 = a4 >u 0\n  9283: a1 = a0 if a5 != 0\n  9286: a0 = a4 | a5\n  9289: a2 = ra >u 0\n  9291: a2 = a1 if a0 != 0\n  9294: jump @309 if a2 == 0\n      : @308 (gas: 1)\n  9297: jump @700\n      : @309 (gas: 15)\n  9300: a0 = u64 [s1 + 0x70]\n  9303: a1 = u64 [s1 + 0xf8]\n  9307: a0 = a1 <u a0\n  9310: a1 = ra ^ t0\n  9313: a2 = ra <u t0\n  9316: a2 = a0 if a1 == 0\n  9319: a0 = u64 [s1 + 0x68]\n  9322: t2 = a4 <u a0\n  9325: a1 = a5 ^ t1\n  9328: a3 = a5 <u t1\n  9331: a3 = t2 if a1 == 0\n  9334: a0 = a0 ^ a4\n  9337: a0 = a0 | a1\n  9340: a3 = a2 if a0 == 0\n  9343: jump @311 if a3 == 0\n      : @310 (gas: 1)\n  9346: jump @700\n      : @311 (gas: 15)\n  9349: a2 = s1 + 0x7ff\n  9353: a2 = a2 + 0x71\n  9356: a0 = u64 [s1 + 0xf8]\n  9360: a3 = a2 + 0x600\n  9364: u64 [a3 + 0xb0] = a0\n  9368: u64 [a2 + 0x6b8] = ra\n  9372: u64 [a3 + 0xc0] = a4\n  9376: a0 = 0x40\n  9379: a1 = s1 + 0x7ff\n  9383: a1 = a1 + 0x721\n  9387: u64 [a3 + 0xc8] = a5\n  9391: u64 [s1 + 0xe8] = ra\n  9395: u64 [s1 + 0xe0] = a4\n  9399: u64 [s1 + 0xf0] = a5\n  9403: ra = 278, jump @19\n      : @312 [@dyn 139] (gas: 27)\n  9409: a1 = s1 + 0x7ff\n  9413: a1 = a1 + 0x71\n  9416: a0 = u64 [s1 + 0x58]\n  9419: a2 = a1 + 0x600\n  9423: u64 [a2 + 0x68] = a0\n  9426: a0 = u64 [s1 + 0x68]\n  9429: u64 [a2 + 0x60] = a0\n  9432: a0 = u64 [s1 + 0x60]\n  9435: u64 [a2 + 0x58] = a0\n  9438: a0 = u64 [s1 + 0x70]\n  9441: u64 [a2 + 0x50] = a0\n  9444: a0 = u64 [s1 + 0xf0]\n  9448: u64 [a2 + 0x88] = a0\n  9452: a0 = u64 [s1 + 0xe0]\n  9456: u64 [a2 + 0x80] = a0\n  9460: a0 = u64 [s1 + 0xe8]\n  9464: u64 [a2 + 0x78] = a0\n  9467: a4 = a1\n  9469: a0 = s1 + 0x7ff\n  9473: a0 = a0 + 0x701\n  9477: a1 = s1 + 0x7ff\n  9481: a1 = a1 + 0x6e1\n  9485: a2 = s1 + 0x7ff\n  9489: a2 = a2 + 0x6c1\n  9493: a3 = u64 [s1 + 0xf8]\n  9497: u64 [a4 + 0x670] = a3\n  9501: ra = 280, jump @795\n      : @313 [@dyn 140] (gas: 12)\n  9507: a3 = u64 [s1 + 0xe0]\n  9511: a4 = u64 [s1 + 0xe8]\n  9515: t0 = u64 [s1 + 0xf8]\n  9519: a0 = t0 | a3\n  9522: a1 = u64 [s1 + 0xf0]\n  9526: a1 = a1 | a4\n  9529: a0 = a0 | a1\n  9532: a0 = a0 >> 0x20\n  9535: a1 = a1 | a3\n  9538: a1 = a1 << 0x20\n  9541: a0 = a0 | a1\n  9544: jump @315 if a0 == 0\n      : @314 (gas: 1)\n  9547: jump @617\n      : @315 (gas: 33)\n  9550: a1 = s1 + 0x7ff\n  9554: a1 = a1 + 0x71\n  9557: a5 = a1 + 0x600\n  9561: a0 = u64 [a5 + 0x98]\n  9565: a2 = u64 [a5 + 0xa8]\n  9569: u64 [s1 + 0xd8] = a2\n  9573: a2 = a3\n  9575: t1 = u64 [a1 + 0x690]\n  9579: a3 = u64 [a5 + 0xa0]\n  9583: t2 = a0 ^ a4\n  9586: a5 = a0 <u a4\n  9589: ra = t1 <u t0\n  9592: a5 = ra if t2 == 0\n  9595: a1 = a3 - a2\n  9598: t2 = a1 - a5\n  9601: a1 = a1 <u a5\n  9604: a3 = a3 <u a2\n  9607: a2 = u64 [s1 + 0xd8]\n  9611: a3 = a2 - a3\n  9614: a2 = u64 [s1 + 0xf0]\n  9618: a3 = a3 - a2\n  9621: a3 = a3 - a1\n  9624: a0 = a0 - a4\n  9627: a0 = a0 - ra\n  9630: a1 = t1 - t0\n  9633: a0 = a0 | a3\n  9636: a2 = a1 | t2\n  9639: a2 = a2 | a0\n  9642: a0 = a0 | t2\n  9645: a2 = a2 >> 0x20\n  9648: a0 = a0 << 0x20\n  9651: a0 = a0 | a2\n  9654: jump @317 if a0 == 0\n      : @316 (gas: 1)\n  9657: jump @617\n      : @317 (gas: 4)\n  9660: a0 = t0\n  9662: u64 [s1 + 0xf8] = a1\n  9666: ra = 0x2a0\n  9670: jump @26\n      : @318 (gas: 9)\n  9673: u64 [a2 + 1088] = 0\n  9677: u64 [a2 + 1080] = 0\n  9681: u64 [a2 + 1072] = 0\n  9685: u64 [a2 + 1064] = 0\n  9689: a0 = s1 + 0x1000\n  9693: i32 a0 = a0 + 0x4a0\n  9697: ra = 0x11a\n  9701: ecalli 11 // 'value_transferred'\n  9703: fallthrough\n      : @319 [@dyn 141] (gas: 3)\n  9704: a3 = s1 + 0x1078\n  9708: a4 = a3 + 0x400\n  9712: t0 = 284, jump @936\n      : @320 [@dyn 142] (gas: 1)\n  9718: jump @322 if a0 == 0\n      : @321 (gas: 1)\n  9721: jump @650\n      : @322 (gas: 3)\n  9724: a0 = u64 [s1 + 0xf8]\n  9728: a0 = i32 [a0]\n  9730: jump @324 if a0 >u 3\n      : @323 (gas: 1)\n  9734: jump @651\n      : @324 (gas: 9)\n  9737: a0 = 0x30110\n  9742: u64 [s1 + 0xf8] = a0\n  9746: i32 a0 = a0 + 0\n  9748: u64 [s1 + 0xe0] = a0\n  9752: ra = 0x11e\n  9756: ecalli 3 // 'caller'\n  9758: a2 = u64 [s1 + 0xf8]\n  9762: t0 = 0x120\n  9766: jump @919\n      : @325 [@dyn 143] (gas: 2)\n  9769: a2 = u64 [s1 + 0xf8]\n  9773: t0 = 288, jump @919\n      : @326 [@dyn 144] (gas: 7)\n  9779: u64 [s1 + 1944] = 0\n  9783: u64 [s1 + 0x790] = a1\n  9787: u64 [s1 + 0x788] = a0\n  9791: a1 = s1 + 0x780\n  9795: u64 [s1 + 0x780] = a3\n  9799: a0 = 0\n  9801: ra = 290, jump @19\n      : @327 [@dyn 145] (gas: 7)\n  9807: u64 [s1 + 1912] = 0\n  9811: u64 [s1 + 1904] = 0\n  9815: u64 [s1 + 1888] = 0x5\n  9820: a0 = 0x20\n  9823: a1 = s1 + 0x760\n  9827: u64 [s1 + 1896] = 0\n  9831: ra = 292, jump @19\n      : @328 [@dyn 146] (gas: 4)\n  9837: a0 = 0x200fc\n  9842: u64 [s1 + 0xf0] = a0\n  9846: a0 = i32 [0x200fc]\n  9851: jump @330 if a0 >u 63\n      : @329 (gas: 3)\n  9855: a1 = u64 [s1 + 0xf0]\n  9859: u32 [a1 + 0] = 0x40\n  9862: fallthrough\n      : @330 (gas: 13)\n  9863: a0 = sp + 0xffffffffffffffe0\n  9866: a2 = a0 & 0xffffffffffffffe0\n  9869: u64 [s1 + 0xd8] = a2\n  9873: sp = a2\n  9875: a0 = 0x20110\n  9880: i32 a0 = a0 + 0\n  9882: i32 a2 = a2 + 0\n  9884: a1 = 0x40\n  9887: u64 [s1 + 0xe8] = a0\n  9891: ra = 0x126\n  9895: ecalli 6 // 'hash_keccak_256'\n  9897: t0 = 0x128\n  9901: jump @925\n      : @331 [@dyn 147] (gas: 1)\n  9904: t0 = 296, jump @925\n      : @332 [@dyn 148] (gas: 7)\n  9910: u64 [a5 + 0x60] = a3\n  9913: u64 [a5 + 0x58] = a2\n  9916: u64 [a5 + 0x50] = a1\n  9919: u64 [a5 + 0x48] = a0\n  9922: a0 = s1 + 0x740\n  9926: a1 = s1 + 0x14c0\n  9930: ra = 298, jump @21\n      : @333 [@dyn 149] (gas: 9)\n  9936: a4 = s1 + 0x700\n  9940: a0 = u64 [a4 + 0x50]\n  9943: a1 = u64 [a4 + 0x58]\n  9946: a2 = u64 [a4 + 0x48]\n  9949: a3 = u64 [a4 + 0x40]\n  9952: a1 = a1 | a2\n  9955: a0 = a0 | a3\n  9958: a0 = a0 | a1\n  9961: jump @335 if a0 != 0\n      : @334 (gas: 1)\n  9964: jump @626\n      : @335 (gas: 6)\n  9967: a0 = u64 [s1 + 0xe0]\n  9971: ra = 0x12c\n  9975: ecalli 3 // 'caller'\n  9977: a2 = u64 [s1 + 0xf8]\n  9981: t0 = 0x12e\n  9985: jump @919\n      : @336 [@dyn 150] (gas: 2)\n  9988: a2 = u64 [s1 + 0xf8]\n  9992: t0 = 302, jump @919\n      : @337 [@dyn 151] (gas: 7)\n  9998: u64 [s1 + 1848] = 0\n 10002: u64 [s1 + 0x730] = a1\n 10006: u64 [s1 + 0x728] = a0\n 10010: a1 = s1 + 0x720\n 10014: u64 [s1 + 0x720] = a3\n 10018: a0 = 0\n 10020: ra = 304, jump @19\n      : @338 [@dyn 152] (gas: 7)\n 10026: u64 [s1 + 1816] = 0\n 10030: u64 [s1 + 1808] = 0\n 10034: u64 [s1 + 1792] = 0x5\n 10039: a0 = 0x20\n 10042: a1 = s1 + 0x700\n 10046: u64 [s1 + 1800] = 0\n 10050: ra = 306, jump @19\n      : @339 [@dyn 153] (gas: 3)\n 10056: a0 = u64 [s1 + 0xf0]\n 10060: a0 = i32 [a0]\n 10062: jump @341 if a0 >u 63\n      : @340 (gas: 3)\n 10066: a1 = u64 [s1 + 0xf0]\n 10070: u32 [a1 + 0] = 0x40\n 10073: fallthrough\n      : @341 (gas: 11)\n 10074: a0 = sp + 0xffffffffffffffe0\n 10077: a0 = a0 & 0xffffffffffffffe0\n 10080: u64 [s1 + 0xd8] = a0\n 10084: sp = a0\n 10086: i32 a2 = a0 + 0\n 10088: a1 = 0x40\n 10091: a0 = u64 [s1 + 0xe8]\n 10095: ra = 0x134\n 10099: ecalli 6 // 'hash_keccak_256'\n 10101: t0 = 0x136\n 10105: jump @925\n      : @342 [@dyn 154] (gas: 1)\n 10108: t0 = 310, jump @925\n      : @343 [@dyn 155] (gas: 7)\n 10114: u64 [a5 + 0x80] = a3\n 10118: u64 [a5 + 0x78] = a2\n 10121: u64 [a5 + 0x70] = a1\n 10124: u64 [a5 + 0x68] = a0\n 10127: a0 = s1 + 0x6e0\n 10131: a1 = s1 + 0x14e0\n 10135: ra = 312, jump @21\n      : @344 [@dyn 156] (gas: 16)\n 10141: a0 = u64 [s1 + 0x6e0]\n 10145: u64 [s1 + 0xd8] = a0\n 10149: a0 = u64 [s1 + 0x6e8]\n 10153: u64 [s1 + 0xd0] = a0\n 10157: a0 = u64 [s1 + 0x6f0]\n 10161: u64 [s1 + 0xc8] = a0\n 10165: a0 = u64 [s1 + 0x6f8]\n 10169: u64 [s1 + 0xc0] = a0\n 10173: a1 = s1 + 0x1078\n 10177: u64 [a1 + 1184] = 0\n 10181: u64 [a1 + 1176] = 0\n 10185: u64 [a1 + 1168] = 0\n 10189: u64 [a1 + 1160] = 0x6\n 10194: a0 = s1 + 0x6c0\n 10198: a1 = s1 + 0x1500\n 10202: ra = 314, jump @21\n      : @345 [@dyn 157] (gas: 20)\n 10208: a0 = u64 [s1 + 0x6c0]\n 10212: a1 = u64 [s1 + 0x6c8]\n 10216: a2 = u64 [s1 + 0x6d0]\n 10220: a3 = u64 [s1 + 0x6d8]\n 10224: u64 [s1 + 0x678] = a3\n 10228: u64 [s1 + 0x670] = a2\n 10232: u64 [s1 + 0x668] = a1\n 10236: u64 [s1 + 0x660] = a0\n 10240: a0 = u64 [s1 + 0xc0]\n 10244: u64 [s1 + 0x698] = a0\n 10248: a0 = u64 [s1 + 0xc8]\n 10252: u64 [s1 + 0x690] = a0\n 10256: a0 = u64 [s1 + 0xd0]\n 10260: u64 [s1 + 0x688] = a0\n 10264: a0 = s1 + 0x6a0\n 10268: a1 = s1 + 0x680\n 10272: a2 = s1 + 0x660\n 10276: a3 = u64 [s1 + 0xd8]\n 10280: u64 [s1 + 0x680] = a3\n 10284: ra = 316, jump @824\n      : @346 [@dyn 158] (gas: 13)\n 10290: a1 = s1 + 0x600\n 10294: a0 = u64 [a1 + 0xa0]\n 10298: u64 [s1 + 0xd8] = a0\n 10302: a0 = u64 [a1 + 0xa8]\n 10306: u64 [s1 + 0xd0] = a0\n 10310: a0 = u64 [a1 + 0xb0]\n 10314: u64 [s1 + 0xc8] = a0\n 10318: a0 = u64 [a1 + 0xb8]\n 10322: u64 [s1 + 0xc0] = a0\n 10326: a0 = s1 + 0x1000\n 10330: i32 a0 = a0 + 0x520\n 10334: ecalli 7 // 'now'\n 10336: fallthrough\n      : @347 (gas: 22)\n 10337: a3 = s1 + 0x1078\n 10341: a1 = a3 + 0x400\n 10345: a0 = u64 [a1 + 0xc0]\n 10349: t0 = u64 [a3 + 0x4a8]\n 10353: a2 = u64 [a1 + 0xb8]\n 10357: a3 = u64 [a1 + 0xb0]\n 10361: a1 = u64 [s1 + 0xc0]\n 10365: a4 = a0 ^ a1\n 10368: a1 = a1 <u a0\n 10371: a0 = u64 [s1 + 0xc8]\n 10375: a5 = a0 <u a2\n 10378: a5 = a1 if a4 != 0\n 10381: a1 = u64 [s1 + 0xd0]\n 10385: t1 = a3 ^ a1\n 10388: a3 = a1 <u a3\n 10391: a1 = u64 [s1 + 0xd8]\n 10395: a1 = a1 <u t0\n 10398: a1 = a3 if t1 != 0\n 10401: a0 = a0 ^ a2\n 10404: a0 = a0 | a4\n 10407: a1 = a5 if a0 != 0\n 10410: jump @349 if a1 == 0\n      : @348 (gas: 1)\n 10413: jump @626\n      : @349 (gas: 3)\n 10416: a0 = s1 + 0x640\n 10420: a1 = 0x40\n 10423: ra = 318, jump @17\n      : @350 [@dyn 159] (gas: 13)\n 10429: a1 = s1 + 0x600\n 10433: a4 = u64 [a1 + 0x58]\n 10436: a5 = u64 [a1 + 0x50]\n 10439: a3 = u64 [a1 + 0x48]\n 10442: a0 = u64 [a1 + 0x40]\n 10445: a2 = a3 | a4\n 10448: a1 = a0 | a5\n 10451: a1 = a1 | a2\n 10454: a1 = a1 >> 0x20\n 10457: a2 = a2 | a5\n 10460: a2 = a2 << 0x20\n 10463: a1 = a1 | a2\n 10466: jump @352 if a1 == 0\n      : @351 (gas: 1)\n 10469: jump @617\n      : @352 (gas: 11)\n 10472: u64 [s1 + 1584] = 0\n 10476: u64 [s1 + 1576] = 0\n 10480: u64 [s1 + 1568] = 0\n 10484: a2 = 0x8c379a000000000\n 10494: a1 = s1 + 0x620\n 10498: u64 [s1 + 0x638] = a2\n 10502: u64 [s1 + 0xf8] = a0\n 10506: u64 [s1 + 0xf0] = a3\n 10510: u64 [s1 + 0xe8] = a4\n 10514: u64 [s1 + 0xe0] = a5\n 10518: ra = 320, jump @19\n      : @353 [@dyn 160] (gas: 11)\n 10524: a1 = u64 [s1 + 0xf8]\n 10528: a0 = u64 [s1 + 0xe8]\n 10532: a3 = u64 [s1 + 0xe0]\n 10536: a3 = a3 | a0\n 10539: a4 = 0x100000000\n 10549: a0 = 0xfffffffc\n 10559: a0 = a1 <u a0\n 10562: a2 = u64 [s1 + 0xf0]\n 10566: a0 = 0 if a2 != 0\n 10568: a0 = 0 if a3 != 0\n 10570: jump @355 if a0 != 0\n      : @354 (gas: 1)\n 10573: jump @617\n      : @355 (gas: 9)\n 10576: i32 a0 = a1 + 0x4\n 10579: u64 [s1 + 1560] = 0\n 10583: u64 [s1 + 1552] = 0\n 10587: u64 [s1 + 1536] = 0x20\n 10592: a1 = s1 + 0x600\n 10596: u64 [s1 + 1544] = 0\n 10600: u64 [s1 + 0xe8] = a3\n 10604: u64 [s1 + 0xe0] = a4\n 10608: ra = 322, jump @19\n      : @356 [@dyn 161] (gas: 9)\n 10614: a1 = u64 [s1 + 0xf8]\n 10618: a0 = u64 [s1 + 0xe0]\n 10622: a0 = a0 + 0xffffffffffffffdc\n 10625: a0 = a1 <u a0\n 10628: a2 = u64 [s1 + 0xf0]\n 10632: a0 = 0 if a2 != 0\n 10634: a2 = u64 [s1 + 0xe8]\n 10638: a0 = 0 if a2 != 0\n 10640: jump @358 if a0 != 0\n      : @357 (gas: 1)\n 10643: jump @617\n      : @358 (gas: 7)\n 10646: i32 a0 = a1 + 0x24\n 10649: u64 [s1 + 1528] = 0\n 10653: u64 [s1 + 1520] = 0\n 10657: u64 [s1 + 1504] = 0x26\n 10662: a1 = s1 + 0x5e0\n 10666: u64 [s1 + 1512] = 0\n 10670: ra = 324, jump @19\n      : @359 [@dyn 162] (gas: 9)\n 10676: a4 = u64 [s1 + 0xe8]\n 10680: a3 = u64 [s1 + 0xf0]\n 10684: a1 = u64 [s1 + 0xf8]\n 10688: a2 = 0x100000000\n 10698: a0 = 0xffffffbc\n 10708: a0 = a1 <u a0\n 10711: a0 = 0 if a3 != 0\n 10713: a0 = 0 if a4 != 0\n 10715: jump @361 if a0 != 0\n      : @360 (gas: 1)\n 10718: jump @617\n      : @361 (gas: 13)\n 10721: i32 a0 = a1 + 0x44\n 10724: a1 = u64 [0x20048]\n 10729: a4 = s1 + 0x500\n 10733: u64 [a4 + 0xd8] = a1\n 10737: a1 = u64 [0x20050]\n 10742: u64 [s1 + 0xe0] = a2\n 10746: a2 = u64 [0x20058]\n 10751: a3 = u64 [0x20060]\n 10756: u64 [a4 + 0xd0] = a1\n 10760: u64 [a4 + 0xc8] = a2\n 10764: a1 = s1 + 0x5c0\n 10768: u64 [a4 + 0xc0] = a3\n 10772: ra = 326, jump @19\n      : @362 [@dyn 163] (gas: 9)\n 10778: a2 = u64 [s1 + 0xf8]\n 10782: a0 = u64 [s1 + 0xe0]\n 10786: a0 = a0 + 0xffffffffffffff9c\n 10789: a0 = a2 <u a0\n 10792: a1 = u64 [s1 + 0xf0]\n 10796: a0 = 0 if a1 != 0\n 10798: a1 = u64 [s1 + 0xe8]\n 10802: a0 = 0 if a1 != 0\n 10804: jump @364 if a0 != 0\n      : @363 (gas: 1)\n 10807: jump @617\n      : @364 (gas: 8)\n 10810: i32 a0 = a2 + 0x64\n 10813: a1 = u64 [0x20068]\n 10818: u64 [s1 + 1456] = 0\n 10822: u64 [s1 + 1448] = 0\n 10826: u64 [s1 + 0x5b8] = a1\n 10830: a1 = s1 + 0x5a0\n 10834: u64 [s1 + 1440] = 0\n 10838: ra = 328, jump @19\n      : @365 [@dyn 164] (gas: 3)\n 10844: a1 = 0x84\n 10848: a0 = u64 [s1 + 0xf8]\n 10852: ra = 330, jump @26\n      : @366 [@dyn 165] (gas: 5)\n 10858: i32 a1 = a0 + 0\n 10860: a0 = 0x1\n 10863: a2 = 0x84\n 10867: ecalli 8 // 'seal_return'\n 10869: fallthrough\n      : @367 (gas: 10)\n 10870: u64 [a2 + 1920] = 0\n 10874: u64 [a2 + 1912] = 0\n 10878: u64 [a2 + 1904] = 0\n 10882: u64 [a2 + 1896] = 0\n 10886: a0 = s1 + 0x1000\n 10890: i32 a0 = a0 + 0x7e0\n 10894: ra = 0x14c\n 10898: ecalli 11 // 'value_transferred'\n 10900: t0 = 0x14e\n 10904: jump @948\n      : @368 [@dyn 166] (gas: 1)\n 10907: t0 = 334, jump @948\n      : @369 [@dyn 167] (gas: 8)\n 10913: a0 = u64 [a4 + 0x78]\n 10916: a1 = u64 [a4 + 0x80]\n 10920: a2 = u64 [a4 + 0x70]\n 10923: a3 = u64 [a4 + 0x68]\n 10926: a1 = a1 | a2\n 10929: a0 = a0 | a3\n 10932: a0 = a0 | a1\n 10935: jump @371 if a0 == 0\n      : @370 (gas: 1)\n 10938: jump @652\n      : @371 (gas: 3)\n 10941: a0 = u64 [s1 + 0xf8]\n 10945: a0 = i32 [a0]\n 10947: jump @373 if a0 >u 3\n      : @372 (gas: 1)\n 10951: jump @653\n      : @373 (gas: 9)\n 10954: a1 = s1 + 0x1078\n 10958: u64 [a1 + 1952] = 0\n 10962: u64 [a1 + 1944] = 0\n 10966: u64 [a1 + 1936] = 0\n 10970: u64 [a1 + 1928] = 0x6\n 10975: a0 = s1 + 0x7ff\n 10979: a0 = a0 + 0x621\n 10983: a1 = s1 + 0x1800\n 10987: ra = 336, jump @21\n      : @374 [@dyn 168] (gas: 15)\n 10993: a1 = s1 + 0x7ff\n 10997: a1 = a1 + 0x71\n 11000: a2 = a1 + 0x500\n 11004: a0 = u64 [a2 + 0xc8]\n 11008: u64 [s1 + 0xf8] = a0\n 11012: a0 = u64 [a2 + 0xc0]\n 11016: u64 [s1 + 0xf0] = a0\n 11020: a0 = u64 [a2 + 0xb8]\n 11024: u64 [s1 + 0xe8] = a0\n 11028: a0 = u64 [a2 + 0xb0]\n 11032: u64 [s1 + 0xe0] = a0\n 11036: a0 = s1 + 0x7ff\n 11040: a0 = a0 + 0x601\n 11044: a1 = 0x40\n 11047: ra = 338, jump @17\n      : @375 [@dyn 169] (gas: 8)\n 11053: a3 = s1 + 0x7ff\n 11057: a3 = a3 + 0x71\n 11060: a5 = a3 + 0x500\n 11064: a0 = u64 [a5 + 0xa8]\n 11068: a1 = u64 [a5 + 0xa0]\n 11072: a2 = u64 [a5 + 0x98]\n 11076: a4 = u64 [a5 + 0x90]\n 11080: t0 = 340, jump @924\n      : @376 [@dyn 170] (gas: 1)\n 11086: jump @378 if a0 == 0\n      : @377 (gas: 1)\n 11089: jump @617\n      : @378 (gas: 15)\n 11092: a0 = u64 [s1 + 0xe0]\n 11096: a2 = a3 + 0x500\n 11100: u64 [a2 + 0x70] = a0\n 11103: a0 = u64 [s1 + 0xe8]\n 11107: u64 [a2 + 0x78] = a0\n 11110: a0 = u64 [s1 + 0xf0]\n 11114: u64 [a2 + 0x80] = a0\n 11118: a1 = s1 + 0x7ff\n 11122: a1 = a1 + 0x5e1\n 11126: a0 = u64 [s1 + 0xf8]\n 11130: u64 [a2 + 0x88] = a0\n 11134: a0 = a4\n 11136: u64 [s1 + 0xf8] = a4\n 11140: ra = 0x248\n 11144: jump @19\n      : @379 (gas: 9)\n 11147: u64 [a3 + 64] = 0\n 11150: u64 [a3 + 56] = 0\n 11153: u64 [a3 + 48] = 0\n 11156: u64 [a3 + 40] = 0\n 11159: a0 = s1 + 0x2000\n 11163: i32 a0 = a0 + 0xfffffffffffff8a0\n 11167: ra = 0x156\n 11171: ecalli 11 // 'value_transferred'\n 11173: fallthrough\n      : @380 [@dyn 171] (gas: 9)\n 11174: a3 = s1 + 0x1878\n 11178: a0 = u64 [a3 + 0x38]\n 11181: a1 = u64 [a3 + 0x40]\n 11184: a2 = u64 [a3 + 0x30]\n 11187: a3 = u64 [a3 + 0x28]\n 11190: a1 = a1 | a2\n 11193: a0 = a0 | a3\n 11196: a0 = a0 | a1\n 11199: jump @382 if a0 == 0\n      : @381 (gas: 1)\n 11202: jump @654\n      : @382 (gas: 4)\n 11205: a0 = u64 [s1 + 0xf8]\n 11209: a0 = i32 [a0]\n 11211: a1 = 0x23\n 11214: jump @384 if a1 <u a0\n      : @383 (gas: 1)\n 11217: jump @655\n      : @384 (gas: 4)\n 11220: a0 = s1 + 0x1260\n 11224: ra = 0x158\n 11228: t0 = 0x2f4\n 11232: jump @954\n      : @385 [@dyn 172] (gas: 15)\n 11235: a3 = s1 + 0x1078\n 11239: a4 = a3 + 0x100\n 11243: a2 = u64 [a4 + 0xe8]\n 11247: a1 = u64 [a4 + 0xf0]\n 11251: a0 = u32 [a3 + 0x1f8]\n 11255: u64 [a3 + 480] = 0\n 11259: u64 [s1 + 0xf0] = a0\n 11263: u64 [a4 + 0xd8] = a0\n 11267: u64 [s1 + 0xe0] = a1\n 11271: u64 [a4 + 0xd0] = a1\n 11275: a1 = s1 + 0x1240\n 11279: u64 [s1 + 0xe8] = a2\n 11283: u64 [a4 + 0xc8] = a2\n 11287: a0 = 0\n 11289: ra = 346, jump @19\n      : @386 [@dyn 173] (gas: 3)\n 11295: t0 = 0x15c\n 11299: a1 = s1 + 0x1078\n 11303: fallthrough\n      : @387 [@dyn 174] (gas: 8)\n 11304: u64 [a1 + 448] = 0\n 11308: u64 [a1 + 440] = 0\n 11312: u64 [a1 + 424] = 0x5\n 11317: a2 = a1\n 11319: a0 = 0x20\n 11322: a1 = s1 + 0x1220\n 11326: u64 [a2 + 432] = 0\n 11330: ra = 350, jump @19\n      : @388 [@dyn 175] (gas: 3)\n 11336: a2 = 0x200fc\n 11341: a0 = i32 [0x200fc]\n 11346: jump @390 if a0 >u 63\n      : @389 (gas: 2)\n 11350: u32 [0x200fc] = 0x40\n 11356: fallthrough\n      : @390 (gas: 14)\n 11357: u64 [s1 + 0xd8] = a2\n 11361: a0 = sp + 0xffffffffffffffe0\n 11364: a2 = a0 & 0xffffffffffffffe0\n 11367: u64 [s1 + 0xf8] = a2\n 11371: sp = a2\n 11373: a0 = 0x20110\n 11378: i32 a0 = a0 + 0\n 11380: i32 a2 = a2 + 0\n 11382: a1 = 0x40\n 11385: u64 [s1 + 0xd0] = a0\n 11389: ra = 0x160\n 11393: ecalli 6 // 'hash_keccak_256'\n 11395: t0 = 0x162\n 11399: jump @929\n      : @391 [@dyn 176] (gas: 1)\n 11402: t0 = 354, jump @929\n      : @392 [@dyn 177] (gas: 7)\n 11408: u64 [a4 + 0x60] = a3\n 11411: u64 [a4 + 0x58] = a2\n 11414: u64 [a4 + 0x50] = a1\n 11417: u64 [a4 + 0x48] = a0\n 11420: a0 = s1 + 0x1200\n 11424: a1 = s1 + 0x18c0\n 11428: ra = 356, jump @21\n      : @393 [@dyn 178] (gas: 11)\n 11434: a3 = s1 + 0x1078\n 11438: a4 = a3 + 0x100\n 11442: a0 = u64 [a4 + 0x98]\n 11446: a1 = u64 [a4 + 0xa0]\n 11450: a2 = u64 [a4 + 0x90]\n 11454: a3 = u64 [a4 + 0x88]\n 11458: a1 = a1 | a2\n 11461: a0 = a0 | a3\n 11464: a0 = a0 | a1\n 11467: a1 = 0x1\n 11470: jump @406 if a0 == 0\n      : @394 (gas: 12)\n 11474: a2 = s1 + 0x1078\n 11478: u64 [a2 + 384] = 0\n 11482: a0 = u64 [s1 + 0xe8]\n 11486: a3 = a2 + 0x100\n 11490: u64 [a3 + 0x68] = a0\n 11493: a0 = u64 [s1 + 0xe0]\n 11497: u64 [a3 + 0x70] = a0\n 11500: a1 = s1 + 0x11e0\n 11504: a0 = u64 [s1 + 0xf0]\n 11508: u64 [a3 + 0x78] = a0\n 11511: a0 = 0\n 11513: ra = 358, jump @19\n      : @395 [@dyn 179] (gas: 3)\n 11519: t0 = 0x168\n 11523: a1 = s1 + 0x1078\n 11527: fallthrough\n      : @396 [@dyn 180] (gas: 8)\n 11528: u64 [a1 + 352] = 0\n 11532: u64 [a1 + 344] = 0\n 11536: u64 [a1 + 328] = 0x5\n 11541: a2 = a1\n 11543: a0 = 0x20\n 11546: a1 = s1 + 0x11c0\n 11550: u64 [a2 + 336] = 0\n 11554: ra = 362, jump @19\n      : @397 [@dyn 181] (gas: 3)\n 11560: a2 = u64 [s1 + 0xd8]\n 11564: a0 = i32 [a2]\n 11566: jump @399 if a0 >u 63\n      : @398 (gas: 3)\n 11570: u32 [a2 + 0] = 0x40\n 11573: t0 = 0x16c\n 11577: jump @945\n      : @399 (gas: 1)\n 11580: t0 = 364, jump @945\n      : @400 [@dyn 182] (gas: 4)\n 11586: ra = 0x16e\n 11590: ecalli 6 // 'hash_keccak_256'\n 11592: t0 = 0x170\n 11596: jump @929\n      : @401 [@dyn 183] (gas: 1)\n 11599: t0 = 368, jump @929\n      : @402 [@dyn 184] (gas: 7)\n 11605: u64 [a4 + 0x80] = a3\n 11609: u64 [a4 + 0x78] = a2\n 11612: u64 [a4 + 0x70] = a1\n 11615: u64 [a4 + 0x68] = a0\n 11618: a0 = s1 + 0x11a0\n 11622: a1 = s1 + 0x18e0\n 11626: ra = 370, jump @21\n      : @403 [@dyn 185] (gas: 18)\n 11632: a1 = s1 + 0x1078\n 11636: a2 = a1 + 0x100\n 11640: a0 = u64 [a2 + 0x28]\n 11643: u64 [s1 + 0xf8] = a0\n 11647: a0 = u64 [a2 + 0x30]\n 11650: u64 [s1 + 0xf0] = a0\n 11654: a0 = u64 [a2 + 0x38]\n 11657: u64 [s1 + 0xe8] = a0\n 11661: a0 = u64 [a2 + 0x40]\n 11664: u64 [s1 + 0xe0] = a0\n 11668: a1 = s1 + 0x1878\n 11672: u64 [a1 + 160] = 0\n 11676: u64 [a1 + 152] = 0\n 11680: u64 [a1 + 144] = 0\n 11684: u64 [a1 + 136] = 0x6\n 11689: a0 = s1 + 0x1180\n 11693: a1 = s1 + 0x1900\n 11697: ra = 372, jump @21\n      : @404 [@dyn 186] (gas: 22)\n 11703: a4 = s1 + 0x1078\n 11707: a5 = a4 + 0x100\n 11711: a0 = u64 [a5 + 0x8]\n 11714: a1 = u64 [a5 + 0x10]\n 11717: a2 = u64 [a5 + 0x18]\n 11720: a3 = u64 [a5 + 0x20]\n 11723: u64 [a4 + 0xc0] = a3\n 11727: u64 [a4 + 0xb8] = a2\n 11731: u64 [a4 + 0xb0] = a1\n 11735: u64 [a4 + 0xa8] = a0\n 11739: a0 = u64 [s1 + 0xe0]\n 11743: u64 [a4 + 0xe0] = a0\n 11747: a0 = u64 [s1 + 0xe8]\n 11751: u64 [a4 + 0xd8] = a0\n 11755: a0 = u64 [s1 + 0xf0]\n 11759: u64 [a4 + 0xd0] = a0\n 11763: a0 = s1 + 0x1160\n 11767: a1 = s1 + 0x1140\n 11771: a2 = s1 + 0x1120\n 11775: a3 = u64 [s1 + 0xf8]\n 11779: u64 [a4 + 0xc8] = a3\n 11783: ra = 374, jump @824\n      : @405 [@dyn 187] (gas: 33)\n 11789: a1 = s1 + 0x1078\n 11793: a0 = u64 [a1 + 0xe8]\n 11797: u64 [s1 + 0xf8] = a0\n 11801: a0 = u64 [a1 + 0xf0]\n 11805: u64 [s1 + 0xf0] = a0\n 11809: a0 = u64 [a1 + 0xf8]\n 11813: u64 [s1 + 0xe8] = a0\n 11817: a0 = u64 [a1 + 0x100]\n 11821: u64 [s1 + 0xe0] = a0\n 11825: a0 = s1 + 0x2000\n 11829: i32 a0 = a0 + 0xfffffffffffff920\n 11833: ecalli 7 // 'now'\n 11835: a3 = s1 + 0x1878\n 11839: a0 = u64 [a3 + 0xc0]\n 11843: t0 = u64 [a3 + 0xa8]\n 11847: a2 = u64 [a3 + 0xb8]\n 11851: a3 = u64 [a3 + 0xb0]\n 11855: a1 = u64 [s1 + 0xe0]\n 11859: a4 = a0 ^ a1\n 11862: a1 = a1 <u a0\n 11865: a0 = u64 [s1 + 0xe8]\n 11869: a5 = a0 <u a2\n 11872: a5 = a1 if a4 != 0\n 11875: a1 = u64 [s1 + 0xf0]\n 11879: t1 = a3 ^ a1\n 11882: a3 = a1 <u a3\n 11885: a1 = u64 [s1 + 0xf8]\n 11889: a1 = a1 <u t0\n 11892: a1 = a3 if t1 != 0\n 11895: a0 = a0 ^ a2\n 11898: a0 = a0 | a4\n 11901: a1 = a5 if a0 != 0\n 11904: fallthrough\n      : @406 (gas: 4)\n 11905: u64 [s1 + 0xf8] = a1\n 11909: a0 = s1 + 0x1100\n 11913: a1 = 0x40\n 11916: ra = 376, jump @17\n      : @407 [@dyn 188] (gas: 6)\n 11922: a3 = s1 + 0x1078\n 11926: a0 = u64 [a3 + 0xa0]\n 11930: a1 = u64 [a3 + 0x98]\n 11934: a2 = u64 [a3 + 0x90]\n 11938: a4 = u64 [a3 + 0x88]\n 11942: t0 = 378, jump @924\n      : @408 [@dyn 189] (gas: 1)\n 11948: jump @410 if a0 == 0\n      : @409 (gas: 1)\n 11951: jump @617\n      : @410 (gas: 10)\n 11954: u64 [a3 + 128] = 0\n 11958: u64 [a3 + 120] = 0\n 11961: a0 = u64 [s1 + 0xf8]\n 11965: u64 [a3 + 0x68] = a0\n 11968: a1 = s1 + 0x10e0\n 11972: u64 [a3 + 112] = 0\n 11975: a0 = a4\n 11977: u64 [s1 + 0xf8] = a4\n 11981: ra = 0x248\n 11985: jump @19\n      : @411 (gas: 10)\n 11988: u64 [a2 + 1600] = 0\n 11992: u64 [a2 + 1592] = 0\n 11996: u64 [a2 + 1584] = 0\n 12000: u64 [a2 + 1576] = 0\n 12004: a0 = s1 + 0x1000\n 12008: i32 a0 = a0 + 0x6a0\n 12012: ra = 0x17c\n 12016: ecalli 11 // 'value_transferred'\n 12018: t0 = 0x17e\n 12022: jump @931\n      : @412 [@dyn 190] (gas: 1)\n 12025: t0 = 382, jump @931\n      : @413 [@dyn 191] (gas: 1)\n 12031: t0 = 384, jump @936\n      : @414 [@dyn 192] (gas: 1)\n 12037: jump @416 if a0 == 0\n      : @415 (gas: 1)\n 12040: jump @656\n      : @416 (gas: 3)\n 12043: a0 = u64 [s1 + 0xf8]\n 12047: a0 = i32 [a0]\n 12049: jump @418 if a0 >u 3\n      : @417 (gas: 1)\n 12053: jump @657\n      : @418 (gas: 4)\n 12056: a0 = s1 + 0x7ff\n 12060: a0 = a0 + 0x301\n 12064: a1 = 0x40\n 12067: ra = 386, jump @17\n      : @419 [@dyn 193] (gas: 8)\n 12073: a3 = s1 + 0x7ff\n 12077: a3 = a3 + 0x71\n 12080: a5 = a3 + 0x200\n 12084: a4 = u64 [a5 + 0xa8]\n 12088: a1 = u64 [a5 + 0xa0]\n 12092: a2 = u64 [a5 + 0x98]\n 12096: a0 = u64 [a5 + 0x90]\n 12100: t0 = 388, jump @937\n      : @420 [@dyn 194] (gas: 1)\n 12106: jump @422 if a1 == 0\n      : @421 (gas: 1)\n 12109: jump @617\n      : @422 (gas: 9)\n 12112: u64 [a3 + 648] = 0\n 12116: u64 [a3 + 640] = 0\n 12120: u64 [a3 + 624] = 0x12\n 12125: a1 = s1 + 0x7ff\n 12129: a1 = a1 + 0x2e1\n 12133: u64 [a3 + 632] = 0\n 12137: u64 [s1 + 0xf8] = a0\n 12141: ra = 0x248\n 12145: jump @19\n      : @423 (gas: 8)\n 12148: u64 [a2 + 1504] = 0\n 12152: u64 [a2 + 1496] = 0\n 12156: u64 [a2 + 1488] = 0\n 12160: u64 [a2 + 1480] = 0\n 12164: a0 = s1 + 0x1000\n 12168: i32 a0 = a0 + 0x640\n 12172: ecalli 11 // 'value_transferred'\n 12174: fallthrough\n      : @424 (gas: 10)\n 12175: a3 = s1 + 0x1078\n 12179: a4 = a3 + 0x500\n 12183: a0 = u64 [a4 + 0xd8]\n 12187: a1 = u64 [a4 + 0xe0]\n 12191: a2 = u64 [a4 + 0xd0]\n 12195: a3 = u64 [a4 + 0xc8]\n 12199: a1 = a1 | a2\n 12202: a0 = a0 | a3\n 12205: a0 = a0 | a1\n 12208: jump @426 if a0 == 0\n      : @425 (gas: 1)\n 12211: jump @658\n      : @426 (gas: 4)\n 12214: a0 = u64 [s1 + 0xf8]\n 12218: a0 = i32 [a0]\n 12220: a1 = 0x63\n 12223: jump @428 if a1 <u a0\n      : @427 (gas: 1)\n 12226: jump @659\n      : @428 (gas: 5)\n 12229: a0 = s1 + 0x7ff\n 12233: a0 = a0 + 0x2c1\n 12237: ra = 0x186\n 12241: t0 = 0x2f4\n 12245: jump @954\n      : @429 [@dyn 195] (gas: 16)\n 12248: a1 = s1 + 0x7ff\n 12252: a1 = a1 + 0x71\n 12255: a2 = a1 + 0x200\n 12259: a0 = u64 [a2 + 0x68]\n 12262: u64 [s1 + 0xa8] = a0\n 12266: a0 = u64 [a2 + 0x60]\n 12269: u64 [s1 + 0xe8] = a0\n 12273: a0 = u64 [a2 + 0x58]\n 12276: u64 [s1 + 0xf8] = a0\n 12280: a0 = u64 [a2 + 0x50]\n 12283: u64 [s1 + 0xf0] = a0\n 12287: a0 = s1 + 0x7ff\n 12291: a0 = a0 + 0x2a1\n 12295: ra = 0x188\n 12299: t0 = 0x2fe\n 12303: jump @954\n      : @430 [@dyn 196] (gas: 42)\n 12306: a1 = s1 + 0x7ff\n 12310: a1 = a1 + 0x71\n 12313: a2 = a1 + 0x200\n 12317: a0 = u64 [a2 + 0x48]\n 12320: u64 [s1 + 0xa0] = a0\n 12324: a0 = u64 [a2 + 0x40]\n 12327: u64 [s1 + 0x98] = a0\n 12331: a0 = u64 [a2 + 0x38]\n 12334: u64 [s1 + 0x90] = a0\n 12338: a0 = u64 [a2 + 0x30]\n 12341: u64 [s1 + 0x88] = a0\n 12345: a0 = s1 + 0x1000\n 12349: i32 a0 = a0 + 0x660\n 12353: a1 = 0x44\n 12356: ecalli 1 // 'call_data_load'\n 12358: a0 = s1 + 0x1078\n 12362: a1 = u64 [a0 + 0x600]\n 12366: u64 [s1 + 0xe0] = a1\n 12370: a2 = a0 + 0x500\n 12374: a1 = u64 [a2 + 0xf8]\n 12378: u64 [s1 + 0xd0] = a1\n 12382: a1 = u64 [a2 + 0xf0]\n 12386: u64 [s1 + 0xc0] = a1\n 12390: a0 = u64 [a2 + 0xe8]\n 12394: u64 [s1 + 0xc8] = a0\n 12398: a0 = u64 [s1 + 0xe8]\n 12402: a0 = a0 << 0x20\n 12405: a0 = a0 >> 0x20\n 12408: a2 = s1 + 0x7ff\n 12412: a2 = a2 + 0x71\n 12415: u64 [a2 + 552] = 0\n 12419: u64 [s1 + 0x78] = a0\n 12422: a3 = a2 + 0x200\n 12426: u64 [a3 + 0x20] = a0\n 12429: a0 = u64 [s1 + 0xf8]\n 12433: u64 [a3 + 0x18] = a0\n 12436: a1 = s1 + 0x7ff\n 12440: a1 = a1 + 0x281\n 12444: a0 = u64 [s1 + 0xf0]\n 12448: u64 [a3 + 0x10] = a0\n 12451: a0 = 0\n 12453: ra = 394, jump @19\n      : @431 [@dyn 197] (gas: 11)\n 12459: a1 = s1 + 0x7ff\n 12463: a1 = a1 + 0x71\n 12466: u64 [a1 + 520] = 0\n 12470: u64 [a1 + 512] = 0\n 12474: u64 [a1 + 496] = 0x1\n 12479: a2 = a1\n 12481: a0 = 0x20\n 12484: a1 = s1 + 0x7ff\n 12488: a1 = a1 + 0x261\n 12492: u64 [a2 + 504] = 0\n 12496: ra = 396, jump @19\n      : @432 [@dyn 198] (gas: 3)\n 12502: a1 = 0x200fc\n 12507: a0 = i32 [0x200fc]\n 12512: jump @434 if a0 >u 63\n      : @433 (gas: 2)\n 12516: u32 [0x200fc] = 0x40\n 12522: fallthrough\n      : @434 (gas: 15)\n 12523: a0 = sp + 0xffffffffffffffe0\n 12526: a2 = a0 & 0xffffffffffffffe0\n 12529: u64 [s1 + 0xb0] = a2\n 12533: sp = a2\n 12535: a0 = 0x20110\n 12540: i32 a0 = a0 + 0\n 12542: i32 a2 = a2 + 0\n 12544: u64 [s1 + 0xb8] = a1\n 12548: a1 = 0x40\n 12551: u64 [s1 + 0xd8] = a0\n 12555: ra = 0x18e\n 12559: ecalli 6 // 'hash_keccak_256'\n 12561: a3 = u64 [s1 + 0xb0]\n 12565: t0 = 0x190\n 12569: jump @953\n      : @435 [@dyn 199] (gas: 2)\n 12572: a3 = u64 [s1 + 0xb0]\n 12576: t0 = 400, jump @953\n      : @436 [@dyn 200] (gas: 19)\n 12582: u64 [s1 + 0x68] = a0\n 12585: a0 = reverse a1\n 12587: u64 [s1 + 0x60] = a0\n 12590: a0 = reverse a2\n 12592: u64 [s1 + 0x58] = a0\n 12595: a0 = reverse a3\n 12597: u64 [s1 + 0x50] = a0\n 12600: a0 = sp + 0xffffffffffffffe0\n 12603: a0 = a0 & 0xffffffffffffffe0\n 12606: u64 [s1 + 0x70] = a0\n 12609: sp = a0\n 12611: a0 = 0x30110\n 12616: u64 [s1 + 0xb0] = a0\n 12620: i32 a0 = a0 + 0\n 12622: u64 [s1 + 0x80] = a0\n 12626: ra = 0x192\n 12630: ecalli 3 // 'caller'\n 12632: t0 = 0x194\n 12636: jump @920\n      : @437 [@dyn 201] (gas: 1)\n 12639: t0 = 404, jump @920\n      : @438 [@dyn 202] (gas: 9)\n 12645: u64 [a2 + 488] = 0\n 12649: a4 = a2 + 0x100\n 12653: u64 [a4 + 0xe0] = a1\n 12657: u64 [a4 + 0xd8] = a0\n 12661: a1 = s1 + 0x7ff\n 12665: a1 = a1 + 0x241\n 12669: u64 [a4 + 0xd0] = a3\n 12673: a0 = 0\n 12675: ra = 406, jump @19\n      : @439 [@dyn 203] (gas: 16)\n 12681: a0 = u64 [s1 + 0x50]\n 12684: a1 = s1 + 0x7ff\n 12688: a1 = a1 + 0x71\n 12691: a2 = a1 + 0x100\n 12695: u64 [a2 + 0xc8] = a0\n 12699: a0 = u64 [s1 + 0x58]\n 12702: u64 [a2 + 0xc0] = a0\n 12706: a0 = u64 [s1 + 0x60]\n 12709: u64 [a2 + 0xb8] = a0\n 12713: a3 = a1\n 12715: a0 = 0x20\n 12718: a1 = s1 + 0x7ff\n 12722: a1 = a1 + 0x221\n 12726: a2 = u64 [s1 + 0x68]\n 12729: u64 [a3 + 0x1b0] = a2\n 12733: ra = 408, jump @19\n      : @440 [@dyn 204] (gas: 3)\n 12739: a1 = u64 [s1 + 0xb8]\n 12743: a0 = i32 [a1]\n 12745: jump @442 if a0 >u 63\n      : @441 (gas: 2)\n 12749: u32 [a1 + 0] = 0x40\n 12752: fallthrough\n      : @442 (gas: 12)\n 12753: a0 = sp + 0xffffffffffffffe0\n 12756: a0 = a0 & 0xffffffffffffffe0\n 12759: u64 [s1 + 0x68] = a0\n 12762: sp = a0\n 12764: i32 a2 = a0 + 0\n 12766: a1 = 0x40\n 12769: a0 = u64 [s1 + 0xd8]\n 12773: ra = 0x19a\n 12777: ecalli 6 // 'hash_keccak_256'\n 12779: a3 = u64 [s1 + 0x68]\n 12782: t0 = 0x19c\n 12786: jump @922\n      : @443 [@dyn 205] (gas: 2)\n 12789: a3 = u64 [s1 + 0x68]\n 12792: t0 = 412, jump @922\n      : @444 [@dyn 206] (gas: 8)\n 12798: a1 = u64 [s1 + 0x70]\n 12801: u64 [a1 + 0x18] = a3\n 12804: u64 [a1 + 0x10] = a2\n 12807: u64 [a1 + 0x8] = a4\n 12810: u64 [a1] = a0\n 12812: a0 = s1 + 0x7ff\n 12816: a0 = a0 + 0x201\n 12820: ra = 414, jump @21\n      : @445 [@dyn 207] (gas: 10)\n 12826: a3 = s1 + 0x7ff\n 12830: a3 = a3 + 0x71\n 12833: t1 = u64 [a3 + 0x1a8]\n 12837: ra = u64 [a3 + 0x1a0]\n 12841: a5 = u64 [a3 + 0x198]\n 12845: t0 = u64 [a3 + 0x190]\n 12849: a0 = a5 & t1\n 12852: a1 = t0 & ra\n 12855: a0 = a0 & a1\n 12858: jump @468 if a0 == 4294967295\n      : @446 (gas: 22)\n 12863: a0 = u64 [s1 + 0xc8]\n 12867: a2 = t0 <u a0\n 12870: a1 = u64 [s1 + 0xc0]\n 12874: a0 = a5 ^ a1\n 12877: a4 = a5 <u a1\n 12880: u64 [s1 + 0x50] = a2\n 12883: a4 = a2 if a0 == 0\n 12886: a2 = u64 [s1 + 0xd0]\n 12890: t2 = ra <u a2\n 12893: a1 = u64 [s1 + 0xe0]\n 12897: a0 = t1 ^ a1\n 12900: a1 = t1 <u a1\n 12903: u64 [s1 + 0x40] = t2\n 12906: a1 = t2 if a0 == 0\n 12909: a2 = ra ^ a2\n 12912: a0 = a0 | a2\n 12915: a1 = a4 if a0 == 0\n 12918: u64 [s1 + 0x70] = t0\n 12921: u64 [s1 + 0x68] = a5\n 12924: u64 [s1 + 0x60] = t1\n 12927: u64 [s1 + 0x58] = ra\n 12930: jump @448 if a1 == 0\n      : @447 (gas: 1)\n 12933: jump @706\n      : @448 (gas: 7)\n 12936: u64 [s1 + 0x48] = a4\n 12939: a0 = u64 [s1 + 0xf0]\n 12943: a1 = u64 [s1 + 0x78]\n 12946: a0 = a0 | a1\n 12949: a1 = u64 [s1 + 0xf8]\n 12953: a0 = a0 | a1\n 12956: jump @450 if a0 != 0\n      : @449 (gas: 1)\n 12959: jump @715\n      : @450 (gas: 6)\n 12962: a0 = u64 [s1 + 0x80]\n 12966: ra = 0x1a0\n 12970: ecalli 3 // 'caller'\n 12972: a2 = u64 [s1 + 0xb0]\n 12976: t0 = 0x1a2\n 12980: jump @944\n      : @451 [@dyn 208] (gas: 2)\n 12983: a2 = u64 [s1 + 0xb0]\n 12987: t0 = 418, jump @944\n      : @452 [@dyn 209] (gas: 1)\n 12993: jump @454 if a0 != 0\n      : @453 (gas: 1)\n 12996: jump @717\n      : @454 (gas: 14)\n 12999: a2 = s1 + 0x7ff\n 13003: a2 = a2 + 0x71\n 13006: u64 [a2 + 392] = 0\n 13010: a0 = u64 [s1 + 0xf0]\n 13014: a3 = a2 + 0x100\n 13018: u64 [a3 + 0x70] = a0\n 13021: a0 = u64 [s1 + 0xf8]\n 13025: u64 [a3 + 0x78] = a0\n 13028: a1 = s1 + 0x7ff\n 13032: a1 = a1 + 0x1e1\n 13036: a0 = u64 [s1 + 0x78]\n 13039: u64 [a3 + 0x80] = a0\n 13043: a0 = 0\n 13045: ra = 420, jump @19\n      : @455 [@dyn 210] (gas: 11)\n 13051: a1 = s1 + 0x7ff\n 13055: a1 = a1 + 0x71\n 13058: u64 [a1 + 360] = 0\n 13062: u64 [a1 + 352] = 0\n 13066: u64 [a1 + 336] = 0x1\n 13071: a2 = a1\n 13073: a0 = 0x20\n 13076: a1 = s1 + 0x7ff\n 13080: a1 = a1 + 0x1c1\n 13084: u64 [a2 + 344] = 0\n 13088: ra = 422, jump @19\n      : @456 [@dyn 211] (gas: 3)\n 13094: a1 = u64 [s1 + 0xb8]\n 13098: a0 = i32 [a1]\n 13100: jump @458 if a0 >u 63\n      : @457 (gas: 2)\n 13104: u32 [a1 + 0] = 0x40\n 13107: fallthrough\n      : @458 (gas: 12)\n 13108: a0 = sp + 0xffffffffffffffe0\n 13111: a0 = a0 & 0xffffffffffffffe0\n 13114: u64 [s1 + 0x78] = a0\n 13117: sp = a0\n 13119: i32 a2 = a0 + 0\n 13121: a1 = 0x40\n 13124: a0 = u64 [s1 + 0xd8]\n 13128: ra = 0x1a8\n 13132: ecalli 6 // 'hash_keccak_256'\n 13134: a3 = u64 [s1 + 0x78]\n 13137: t0 = 0x1aa\n 13141: jump @953\n      : @459 [@dyn 212] (gas: 2)\n 13144: a3 = u64 [s1 + 0x78]\n 13147: t0 = 426, jump @953\n      : @460 [@dyn 213] (gas: 16)\n 13153: u64 [s1 + 0x38] = a0\n 13156: a0 = reverse a1\n 13158: u64 [s1 + 0x30] = a0\n 13161: a0 = reverse a2\n 13163: u64 [s1 + 0x28] = a0\n 13166: a0 = reverse a3\n 13168: u64 [s1 + 0x20] = a0\n 13171: a0 = sp + 0xffffffffffffffe0\n 13174: a0 = a0 & 0xffffffffffffffe0\n 13177: u64 [s1 + 0x78] = a0\n 13180: sp = a0\n 13182: a0 = u64 [s1 + 0x80]\n 13186: ra = 0x1ac\n 13190: ecalli 3 // 'caller'\n 13192: t0 = 0x1ae\n 13196: jump @920\n      : @461 [@dyn 214] (gas: 1)\n 13199: t0 = 430, jump @920\n      : @462 [@dyn 215] (gas: 9)\n 13205: u64 [a2 + 328] = 0\n 13209: a4 = a2 + 0x100\n 13213: u64 [a4 + 0x40] = a1\n 13216: u64 [a4 + 0x38] = a0\n 13219: a1 = s1 + 0x7ff\n 13223: a1 = a1 + 0x1a1\n 13227: u64 [a4 + 0x30] = a3\n 13230: a0 = 0\n 13232: ra = 432, jump @19\n      : @463 [@dyn 216] (gas: 16)\n 13238: a0 = u64 [s1 + 0x20]\n 13241: a1 = s1 + 0x7ff\n 13245: a1 = a1 + 0x71\n 13248: a2 = a1 + 0x100\n 13252: u64 [a2 + 0x28] = a0\n 13255: a0 = u64 [s1 + 0x28]\n 13258: u64 [a2 + 0x20] = a0\n 13261: a0 = u64 [s1 + 0x30]\n 13264: u64 [a2 + 0x18] = a0\n 13267: a3 = a1\n 13269: a0 = 0x20\n 13272: a1 = s1 + 0x7ff\n 13276: a1 = a1 + 0x181\n 13280: a2 = u64 [s1 + 0x38]\n 13283: u64 [a3 + 0x110] = a2\n 13287: ra = 434, jump @19\n      : @464 [@dyn 217] (gas: 3)\n 13293: a1 = u64 [s1 + 0xb8]\n 13297: a0 = i32 [a1]\n 13299: jump @466 if a0 >u 63\n      : @465 (gas: 2)\n 13303: u32 [a1 + 0] = 0x40\n 13306: fallthrough\n      : @466 (gas: 50)\n 13307: a0 = sp + 0xffffffffffffffe0\n 13310: a0 = a0 & 0xffffffffffffffe0\n 13313: u64 [s1 + 0xb8] = a0\n 13317: sp = a0\n 13319: i32 a2 = a0 + 0\n 13321: a1 = 0x40\n 13324: a0 = u64 [s1 + 0xd8]\n 13328: ecalli 6 // 'hash_keccak_256'\n 13330: a0 = u64 [s1 + 0xd0]\n 13334: a1 = u64 [s1 + 0x58]\n 13337: a0 = a1 - a0\n 13340: a2 = u64 [s1 + 0x48]\n 13343: a1 = a0 - a2\n 13346: a0 = a0 <u a2\n 13349: a2 = u64 [s1 + 0xe0]\n 13353: a3 = u64 [s1 + 0x60]\n 13356: a2 = a3 - a2\n 13359: a3 = u64 [s1 + 0x40]\n 13362: a2 = a2 - a3\n 13365: a2 = a2 - a0\n 13368: a0 = u64 [s1 + 0xc0]\n 13372: a3 = u64 [s1 + 0x68]\n 13375: a0 = a3 - a0\n 13378: a3 = u64 [s1 + 0x50]\n 13381: a0 = a0 - a3\n 13384: a3 = s1 + 0x1078\n 13388: a5 = a3 + 0x600\n 13392: u64 [a5 + 0x20] = a2\n 13395: u64 [a5 + 0x18] = a1\n 13398: u64 [a5 + 0x10] = a0\n 13401: a4 = u64 [s1 + 0xb8]\n 13405: a0 = u64 [a4]\n 13407: a1 = u64 [s1 + 0xc8]\n 13411: a2 = u64 [s1 + 0x70]\n 13414: a1 = a2 - a1\n 13417: u64 [a5 + 0x8] = a1\n 13420: a1 = u64 [a4 + 0x8]\n 13423: a2 = reverse a0\n 13425: a0 = u64 [s1 + 0x78]\n 13428: u64 [a0 + 0x18] = a2\n 13431: a3 = u64 [a4 + 0x10]\n 13434: a2 = u64 [a4 + 0x18]\n 13437: a1 = reverse a1\n 13439: u64 [a0 + 0x10] = a1\n 13442: a1 = reverse a3\n 13444: u64 [a0 + 0x8] = a1\n 13447: a1 = reverse a2\n 13449: u64 [a0] = a1\n 13451: a1 = s1 + 0x1680\n 13455: ra = 436, jump @22\n      : @467 [@dyn 218] (gas: 3)\n 13461: a3 = s1 + 0x7ff\n 13465: a3 = a3 + 0x71\n 13468: fallthrough\n      : @468 (gas: 41)\n 13469: a0 = u64 [s1 + 0xc8]\n 13473: a1 = s1 + 0x1000\n 13477: u64 [a1 + 0xfffffffffffff820] = a0\n 13481: a0 = u64 [s1 + 0x88]\n 13485: a1 = s1 + 0x1000\n 13489: u64 [a1 + 0xfffffffffffff840] = a0\n 13493: a0 = u64 [s1 + 0xf0]\n 13497: a1 = s1 + 0x1000\n 13501: u64 [a1 + 0xfffffffffffff860] = a0\n 13505: a0 = u64 [s1 + 0xc0]\n 13509: a1 = s1 + 0x1000\n 13513: u64 [a1 + 0xfffffffffffff828] = a0\n 13517: a0 = u64 [s1 + 0x90]\n 13521: a1 = s1 + 0x1000\n 13525: u64 [a1 + 0xfffffffffffff848] = a0\n 13529: a0 = u64 [s1 + 0xf8]\n 13533: a1 = s1 + 0x1000\n 13537: u64 [a1 + 0xfffffffffffff868] = a0\n 13541: a0 = u64 [s1 + 0xd0]\n 13545: a1 = s1 + 0x1000\n 13549: u64 [a1 + 0xfffffffffffff830] = a0\n 13553: a0 = u64 [s1 + 0x98]\n 13557: a1 = s1 + 0x1000\n 13561: u64 [a1 + 0xfffffffffffff850] = a0\n 13565: a0 = u64 [s1 + 0xe8]\n 13569: u64 [a3] = a0\n 13571: a0 = u64 [s1 + 0xe0]\n 13575: a1 = s1 + 0x1000\n 13579: u64 [a1 + 0xfffffffffffff838] = a0\n 13583: a0 = u64 [s1 + 0xa0]\n 13587: a1 = s1 + 0x1000\n 13591: u64 [a1 + 0xfffffffffffff858] = a0\n 13595: a0 = s1 + 0x7ff\n 13599: a0 = a0 + 0x61\n 13602: a1 = s1 + 0x7ff\n 13606: a1 = a1 + 0x41\n 13609: a2 = s1 + 0x7ff\n 13613: a2 = a2 + 0x21\n 13616: a4 = u64 [s1 + 0xa8]\n 13620: u64 [a3 + 0x8] = a4\n 13623: ra = 438, jump @846\n      : @469 [@dyn 219] (gas: 4)\n 13629: a0 = s1 + 0x7ff\n 13633: a0 = a0 + 0x1\n 13636: a1 = 0x40\n 13639: ra = 440, jump @17\n      : @470 [@dyn 220] (gas: 9)\n 13645: a0 = s1 + 0x1000\n 13649: a3 = u64 [a0 + 0xfffffffffffff818]\n 13653: a0 = s1 + 0x1000\n 13657: a1 = u64 [a0 + 0xfffffffffffff810]\n 13661: a0 = s1 + 0x1000\n 13665: a2 = u64 [a0 + 0xfffffffffffff808]\n 13669: a0 = s1 + 0x1000\n 13673: a0 = u64 [a0 + 0xfffffffffffff800]\n 13677: t0 = 442, jump @930\n      : @471 [@dyn 221] (gas: 1)\n 13683: jump @473 if a1 == 0\n      : @472 (gas: 1)\n 13686: jump @617\n      : @473 (gas: 8)\n 13689: u64 [s1 + 2040] = 0\n 13693: u64 [s1 + 2032] = 0\n 13697: u64 [s1 + 2024] = 0\n 13701: a1 = s1 + 0x7e0\n 13705: u64 [s1 + 2016] = 0x1\n 13710: u64 [s1 + 0xf8] = a0\n 13714: ra = 0x248\n 13718: jump @19\n      : @474 (gas: 10)\n 13721: u64 [a2 + 896] = 0\n 13725: u64 [a2 + 888] = 0\n 13729: u64 [a2 + 880] = 0\n 13733: u64 [a2 + 872] = 0\n 13737: a0 = s1 + 0x1000\n 13741: i32 a0 = a0 + 0x3e0\n 13745: ra = 0x1bc\n 13749: ecalli 11 // 'value_transferred'\n 13751: t0 = 0x1be\n 13755: jump @949\n      : @475 [@dyn 222] (gas: 1)\n 13758: t0 = 446, jump @949\n      : @476 [@dyn 223] (gas: 8)\n 13764: a0 = u64 [a4 + 0x78]\n 13767: a1 = u64 [a4 + 0x80]\n 13771: a2 = u64 [a4 + 0x70]\n 13774: a3 = u64 [a4 + 0x68]\n 13777: a1 = a1 | a2\n 13780: a0 = a0 | a3\n 13783: a0 = a0 | a1\n 13786: jump @478 if a0 == 0\n      : @477 (gas: 1)\n 13789: jump @660\n      : @478 (gas: 3)\n 13792: a0 = u64 [s1 + 0xf8]\n 13796: a1 = i32 [a0]\n 13798: jump @480 if a1 >u 3\n      : @479 (gas: 1)\n 13802: jump @661\n      : @480 (gas: 8)\n 13805: a1 = s1 + 0x1078\n 13809: u64 [a1 + 928] = 0\n 13813: u64 [a1 + 920] = 0\n 13817: u64 [a1 + 912] = 0\n 13821: u64 [a1 + 904] = 0x3\n 13826: a0 = s1 + 0x260\n 13830: a1 = s1 + 0x1400\n 13834: ra = 448, jump @21\n      : @481 [@dyn 224] (gas: 34)\n 13840: a1 = s1 + 0x200\n 13844: a2 = u64 [a1 + 0x70]\n 13847: a3 = u64 [a1 + 0x68]\n 13850: a5 = u64 [a1 + 0x78]\n 13853: a0 = u64 [a1 + 0x60]\n 13856: a4 = a2 << 0x3f\n 13859: a1 = a3 >> 0x1\n 13862: t0 = a1 | a4\n 13865: a1 = a5 << 0x3f\n 13868: u64 [s1 + 0xf0] = a2\n 13872: a2 = a2 >> 0x1\n 13875: a1 = a1 | a2\n 13878: u64 [s1 + 0xe0] = a3\n 13882: a2 = a3 << 0x3f\n 13885: a3 = a0 >> 0x1\n 13888: a4 = a3 | a2\n 13891: u64 [s1 + 0xe8] = a5\n 13895: t1 = a5 >> 0x1\n 13898: u64 [s1 + 0xd0] = a0\n 13902: a5 = a0 & 0x1\n 13905: a3 = -a5\n 13907: t2 = a3 & a1\n 13910: a2 = a3 & t0\n 13913: a3 = a3 & t1\n 13916: a0 = a4 & 0x7f\n 13919: u64 [s1 + 0xd8] = a0\n 13923: a4 = a0 if a5 == 0\n 13926: a0 = a4 <u 0x20\n 13929: a0 = 0 if a2 != 0\n 13931: a1 = t2 | a3\n 13934: a0 = 0 if a1 != 0\n 13936: u64 [s1 + 0xf8] = a5\n 13940: a1 = a5 <u 0x1\n 13943: jump @483 if a1 == a0\n      : @482 (gas: 1)\n 13946: jump @662\n      : @483 (gas: 12)\n 13949: u64 [s1 + 0xb8] = a4\n 13953: a5 = s1 + 0x200\n 13957: u64 [a5 + 0x40] = a4\n 13960: u64 [s1 + 0xa8] = a2\n 13964: u64 [a5 + 0x48] = a2\n 13967: u64 [s1 + 0xb0] = t2\n 13971: u64 [s1 + 0x250] = t2\n 13975: a0 = 0x80\n 13979: a1 = s1 + 0x240\n 13983: u64 [s1 + 0xa0] = a3\n 13987: u64 [a5 + 0x58] = a3\n 13990: ra = 450, jump @19\n      : @484 [@dyn 225] (gas: 2)\n 13996: a0 = u64 [s1 + 0xf8]\n 14000: jump @605 if a0 != 0\n      : @485 (gas: 13)\n 14004: a0 = u64 [s1 + 0xd0]\n 14008: a0 = a0 & 0xffffffffffffff00\n 14012: a1 = u64 [s1 + 0xe0]\n 14016: a2 = s1 + 0x100\n 14020: u64 [a2 + 0xc8] = a1\n 14024: u64 [a2 + 0xc0] = a0\n 14028: a0 = u64 [s1 + 0xf0]\n 14032: u64 [a2 + 0xd0] = a0\n 14036: a0 = u64 [s1 + 0xe8]\n 14040: u64 [a2 + 0xd8] = a0\n 14044: a0 = 0xa0\n 14048: a1 = s1 + 0x1c0\n 14052: ra = 452, jump @19\n      : @486 [@dyn 226] (gas: 7)\n 14058: a1 = 0\n 14060: a0 = 0\n 14062: t0 = 0\n 14064: a3 = 0xc0\n 14068: a2 = u64 [s1 + 0xd8]\n 14072: a3 = 0xa0 if a2 == 0\n 14076: jump @613\n      : @487 (gas: 1)\n 14079: jump @489 if a0 == 1889567281\n      : @488 (gas: 1)\n 14086: jump @668\n      : @489 (gas: 10)\n 14089: u64 [a2 + 1792] = 0\n 14093: u64 [a2 + 1784] = 0\n 14097: u64 [a2 + 1776] = 0\n 14101: u64 [a2 + 1768] = 0\n 14105: a0 = s1 + 0x1000\n 14109: i32 a0 = a0 + 0x760\n 14113: ra = 0x1c6\n 14117: ecalli 11 // 'value_transferred'\n 14119: t0 = 0x1c8\n 14123: jump @931\n      : @490 [@dyn 227] (gas: 1)\n 14126: t0 = 456, jump @931\n      : @491 [@dyn 228] (gas: 8)\n 14132: a0 = u64 [a4 + 0xf8]\n 14136: a1 = u64 [a3 + 0x700]\n 14140: a2 = u64 [a4 + 0xf0]\n 14144: a3 = u64 [a4 + 0xe8]\n 14148: a1 = a1 | a2\n 14151: a0 = a0 | a3\n 14154: a0 = a0 | a1\n 14157: jump @493 if a0 == 0\n      : @492 (gas: 1)\n 14160: jump @673\n      : @493 (gas: 4)\n 14163: a0 = u64 [s1 + 0xf8]\n 14167: a0 = i32 [a0]\n 14169: a1 = 0x23\n 14172: jump @495 if a1 <u a0\n      : @494 (gas: 1)\n 14175: jump @674\n      : @495 (gas: 5)\n 14178: a0 = s1 + 0x7ff\n 14182: a0 = a0 + 0x561\n 14186: ra = 0x1ca\n 14190: t0 = 0x2f4\n 14194: jump @954\n      : @496 [@dyn 229] (gas: 14)\n 14197: a3 = s1 + 0x7ff\n 14201: a3 = a3 + 0x71\n 14204: a4 = a3 + 0x400\n 14208: a0 = u64 [a4 + 0xf0]\n 14212: a1 = u64 [a4 + 0xf8]\n 14216: a2 = u32 [a3 + 0x500]\n 14220: u64 [a3 + 1256] = 0\n 14224: u64 [a4 + 0xe0] = a2\n 14228: u64 [a4 + 0xd8] = a1\n 14232: a1 = s1 + 0x7ff\n 14236: a1 = a1 + 0x541\n 14240: u64 [a4 + 0xd0] = a0\n 14244: a0 = 0\n 14246: ra = 460, jump @19\n      : @497 [@dyn 230] (gas: 11)\n 14252: a0 = s1 + 0x7ff\n 14256: a0 = a0 + 0x71\n 14259: u64 [a0 + 1224] = 0\n 14263: u64 [a0 + 1216] = 0\n 14267: u64 [a0 + 1208] = 0\n 14271: a2 = a0\n 14273: a0 = 0x20\n 14276: a1 = s1 + 0x7ff\n 14280: a1 = a1 + 0x521\n 14284: u64 [a2 + 1200] = 0\n 14288: ra = 462, jump @19\n      : @498 [@dyn 231] (gas: 2)\n 14294: a1 = i32 [0x200fc]\n 14299: jump @500 if a1 >u 63\n      : @499 (gas: 2)\n 14303: u32 [0x200fc] = 0x40\n 14309: fallthrough\n      : @500 (gas: 13)\n 14310: a0 = sp + 0xffffffffffffffe0\n 14313: a2 = a0 & 0xffffffffffffffe0\n 14316: u64 [s1 + 0xf8] = a2\n 14320: sp = a2\n 14322: a0 = 0x20110\n 14327: i32 a0 = a0 + 0\n 14329: i32 a2 = a2 + 0\n 14331: a1 = 0x40\n 14334: ra = 0x1d0\n 14338: ecalli 6 // 'hash_keccak_256'\n 14340: a3 = u64 [s1 + 0xf8]\n 14344: t0 = 0x1d2\n 14348: jump @923\n      : @501 [@dyn 232] (gas: 2)\n 14351: a3 = u64 [s1 + 0xf8]\n 14355: t0 = 466, jump @923\n      : @502 [@dyn 233] (gas: 9)\n 14361: a5 = a4 + 0x700\n 14365: u64 [a5 + 0x20] = a3\n 14368: u64 [a5 + 0x18] = a2\n 14371: u64 [a5 + 0x10] = a1\n 14374: u64 [a5 + 0x8] = a0\n 14377: a0 = s1 + 0x7ff\n 14381: a0 = a0 + 0x501\n 14385: a1 = s1 + 0x1780\n 14389: ra = 468, jump @21\n      : @503 [@dyn 234] (gas: 15)\n 14395: a1 = s1 + 0x7ff\n 14399: a1 = a1 + 0x71\n 14402: a2 = a1 + 0x400\n 14406: a0 = u64 [a2 + 0xa8]\n 14410: u64 [s1 + 0xf8] = a0\n 14414: a0 = u64 [a2 + 0xa0]\n 14418: u64 [s1 + 0xf0] = a0\n 14422: a0 = u64 [a2 + 0x98]\n 14426: u64 [s1 + 0xe8] = a0\n 14430: a0 = u64 [a2 + 0x90]\n 14434: u64 [s1 + 0xe0] = a0\n 14438: a0 = s1 + 0x7ff\n 14442: a0 = a0 + 0x4e1\n 14446: a1 = 0x40\n 14449: ra = 470, jump @17\n      : @504 [@dyn 235] (gas: 8)\n 14455: a3 = s1 + 0x7ff\n 14459: a3 = a3 + 0x71\n 14462: a5 = a3 + 0x400\n 14466: a0 = u64 [a5 + 0x88]\n 14470: a1 = u64 [a5 + 0x80]\n 14474: a2 = u64 [a5 + 0x78]\n 14477: a4 = u64 [a5 + 0x70]\n 14480: t0 = 472, jump @924\n      : @505 [@dyn 236] (gas: 1)\n 14486: jump @617 if a0 != 0\n      : @506 (gas: 15)\n 14490: a0 = u64 [s1 + 0xe0]\n 14494: a2 = a3 + 0x400\n 14498: u64 [a2 + 0x50] = a0\n 14501: a0 = u64 [s1 + 0xe8]\n 14505: u64 [a2 + 0x58] = a0\n 14508: a0 = u64 [s1 + 0xf0]\n 14512: u64 [a2 + 0x60] = a0\n 14515: a1 = s1 + 0x7ff\n 14519: a1 = a1 + 0x4c1\n 14523: a0 = u64 [s1 + 0xf8]\n 14527: u64 [a2 + 0x68] = a0\n 14530: a0 = a4\n 14532: u64 [s1 + 0xf8] = a4\n 14536: ra = 0x248\n 14540: jump @19\n      : @507 (gas: 10)\n 14543: u64 [a2 + 1024] = 0\n 14547: u64 [a2 + 1016] = 0\n 14551: u64 [a2 + 1008] = 0\n 14555: u64 [a2 + 1000] = 0\n 14559: a0 = s1 + 0x1000\n 14563: i32 a0 = a0 + 0x460\n 14567: ra = 0x1da\n 14571: ecalli 11 // 'value_transferred'\n 14573: t0 = 0x1dc\n 14577: jump @949\n      : @508 [@dyn 237] (gas: 1)\n 14580: t0 = 476, jump @949\n      : @509 [@dyn 238] (gas: 8)\n 14586: a0 = u64 [a4 + 0xf8]\n 14590: a1 = u64 [a3 + 0x400]\n 14594: a2 = u64 [a4 + 0xf0]\n 14598: a3 = u64 [a4 + 0xe8]\n 14602: a1 = a1 | a2\n 14605: a0 = a0 | a3\n 14608: a0 = a0 | a1\n 14611: jump @511 if a0 == 0\n      : @510 (gas: 1)\n 14614: jump @675\n      : @511 (gas: 3)\n 14617: a0 = u64 [s1 + 0xf8]\n 14621: a0 = i32 [a0]\n 14623: jump @513 if a0 >u 3\n      : @512 (gas: 1)\n 14627: jump @676\n      : @513 (gas: 8)\n 14630: a1 = s1 + 0x1078\n 14634: u64 [a1 + 1056] = 0\n 14638: u64 [a1 + 1048] = 0\n 14642: u64 [a1 + 1040] = 0\n 14646: u64 [a1 + 1032] = 0x2\n 14651: a0 = s1 + 0x4c0\n 14655: a1 = s1 + 0x1480\n 14659: ra = 478, jump @21\n      : @514 [@dyn 239] (gas: 11)\n 14665: a0 = u64 [s1 + 0x4d8]\n 14669: u64 [s1 + 0xf8] = a0\n 14673: a0 = u64 [s1 + 0x4d0]\n 14677: u64 [s1 + 0xf0] = a0\n 14681: a0 = u64 [s1 + 0x4c8]\n 14685: u64 [s1 + 0xe8] = a0\n 14689: a0 = u64 [s1 + 0x4c0]\n 14693: u64 [s1 + 0xe0] = a0\n 14697: a0 = s1 + 0x4a0\n 14701: a1 = 0x40\n 14704: ra = 480, jump @17\n      : @515 [@dyn 240] (gas: 6)\n 14710: a4 = s1 + 0x400\n 14714: a0 = u64 [a4 + 0xb8]\n 14718: a1 = u64 [a4 + 0xb0]\n 14722: a2 = u64 [a4 + 0xa8]\n 14726: a3 = u64 [a4 + 0xa0]\n 14730: t0 = 482, jump @932\n      : @516 [@dyn 241] (gas: 1)\n 14736: jump @617 if a0 != 0\n      : @517 (gas: 14)\n 14740: a0 = u64 [s1 + 0xe0]\n 14744: a2 = s1 + 0x400\n 14748: u64 [a2 + 0x80] = a0\n 14752: a0 = u64 [s1 + 0xe8]\n 14756: u64 [a2 + 0x88] = a0\n 14760: a0 = u64 [s1 + 0xf0]\n 14764: u64 [a2 + 0x90] = a0\n 14768: a1 = s1 + 0x480\n 14772: a0 = u64 [s1 + 0xf8]\n 14776: u64 [a2 + 0x98] = a0\n 14780: a0 = a3\n 14782: u64 [s1 + 0xf8] = a3\n 14786: ra = 0x248\n 14790: jump @19\n      : @518 (gas: 10)\n 14793: u64 [a2 + 1856] = 0\n 14797: u64 [a2 + 1848] = 0\n 14801: u64 [a2 + 1840] = 0\n 14805: u64 [a2 + 1832] = 0\n 14809: a0 = s1 + 0x1000\n 14813: i32 a0 = a0 + 0x7a0\n 14817: ra = 0x1e4\n 14821: ecalli 11 // 'value_transferred'\n 14823: t0 = 0x1e6\n 14827: jump @948\n      : @519 [@dyn 242] (gas: 1)\n 14830: t0 = 486, jump @948\n      : @520 [@dyn 243] (gas: 1)\n 14836: t0 = 488, jump @936\n      : @521 [@dyn 244] (gas: 1)\n 14842: jump @523 if a0 == 0\n      : @522 (gas: 1)\n 14845: jump @677\n      : @523 (gas: 3)\n 14848: a0 = u64 [s1 + 0xf8]\n 14852: a0 = i32 [a0]\n 14854: jump @525 if a0 >u 3\n      : @524 (gas: 1)\n 14858: jump @678\n      : @525 (gas: 9)\n 14861: a1 = s1 + 0x1078\n 14865: u64 [a1 + 1888] = 0\n 14869: u64 [a1 + 1880] = 0\n 14873: u64 [a1 + 1872] = 0\n 14877: u64 [a1 + 1864] = 0x7\n 14882: a0 = s1 + 0x7ff\n 14886: a0 = a0 + 0x5c1\n 14890: a1 = s1 + 0x17c0\n 14894: ra = 490, jump @21\n      : @526 [@dyn 245] (gas: 13)\n 14900: a1 = s1 + 0x7ff\n 14904: a1 = a1 + 0x71\n 14907: a2 = a1 + 0x500\n 14911: a0 = u64 [a2 + 0x60]\n 14914: u64 [s1 + 0xe8] = a0\n 14918: a0 = u64 [a2 + 0x58]\n 14921: u64 [s1 + 0xf8] = a0\n 14925: a0 = u64 [a2 + 0x50]\n 14928: u64 [s1 + 0xf0] = a0\n 14932: a0 = s1 + 0x7ff\n 14936: a0 = a0 + 0x5a1\n 14940: a1 = 0x40\n 14943: ra = 492, jump @17\n      : @527 [@dyn 246] (gas: 8)\n 14949: a3 = s1 + 0x7ff\n 14953: a3 = a3 + 0x71\n 14956: a5 = a3 + 0x500\n 14960: a4 = u64 [a5 + 0x48]\n 14963: a1 = u64 [a5 + 0x40]\n 14966: a2 = u64 [a5 + 0x38]\n 14969: a0 = u64 [a5 + 0x30]\n 14972: t0 = 494, jump @937\n      : @528 [@dyn 247] (gas: 1)\n 14978: jump @617 if a1 != 0\n      : @529 (gas: 15)\n 14982: a1 = u64 [s1 + 0xe8]\n 14986: a1 = a1 << 0x20\n 14989: a2 = a1 >> 0x20\n 14992: u64 [a3 + 1320] = 0\n 14996: a1 = u64 [s1 + 0xf0]\n 15000: a4 = a3 + 0x500\n 15004: u64 [a4 + 0x10] = a1\n 15007: a1 = u64 [s1 + 0xf8]\n 15011: u64 [a4 + 0x18] = a1\n 15014: a1 = s1 + 0x7ff\n 15018: a1 = a1 + 0x581\n 15022: u64 [a4 + 0x20] = a2\n 15025: u64 [s1 + 0xf8] = a0\n 15029: ra = 0x248\n 15033: jump @19\n      : @530 (gas: 10)\n 15036: u64 [a2 + 960] = 0\n 15040: u64 [a2 + 952] = 0\n 15044: u64 [a2 + 944] = 0\n 15048: u64 [a2 + 936] = 0\n 15052: a0 = s1 + 0x1000\n 15056: i32 a0 = a0 + 0x420\n 15060: ra = 0x1f0\n 15064: ecalli 11 // 'value_transferred'\n 15066: t0 = 0x1f2\n 15070: jump @949\n      : @531 [@dyn 248] (gas: 1)\n 15073: t0 = 498, jump @949\n      : @532 [@dyn 249] (gas: 1)\n 15079: t0 = 500, jump @952\n      : @533 [@dyn 250] (gas: 1)\n 15085: jump @535 if a0 == 0\n      : @534 (gas: 1)\n 15088: jump @679\n      : @535 (gas: 4)\n 15091: a0 = u64 [s1 + 0xf8]\n 15095: a0 = i32 [a0]\n 15097: a1 = 0x43\n 15100: jump @537 if a1 <u a0\n      : @536 (gas: 1)\n 15103: jump @680\n      : @537 (gas: 4)\n 15106: a0 = s1 + 0x460\n 15110: ra = 0x1f6\n 15114: t0 = 0x2f4\n 15118: jump @954\n      : @538 [@dyn 251] (gas: 39)\n 15121: a1 = s1 + 0x400\n 15125: a0 = u64 [a1 + 0x70]\n 15128: u64 [s1 + 0xd8] = a0\n 15132: a0 = u64 [a1 + 0x68]\n 15135: u64 [s1 + 0xf0] = a0\n 15139: a0 = u64 [a1 + 0x60]\n 15142: u64 [s1 + 0xf8] = a0\n 15146: a0 = sp + 0xffffffffffffffe0\n 15149: a0 = a0 & 0xffffffffffffffe0\n 15152: u64 [s1 + 0xe0] = a0\n 15156: sp = a0\n 15158: a0 = s1 + 0x1000\n 15162: i32 a0 = a0 + 0x440\n 15166: a1 = 0x24\n 15169: ecalli 1 // 'call_data_load'\n 15171: a0 = s1 + 0x1078\n 15175: a4 = a0 + 0x300\n 15179: a1 = u64 [a4 + 0xe0]\n 15183: a2 = u64 [a4 + 0xd8]\n 15187: a3 = u64 [a4 + 0xd0]\n 15191: a0 = u64 [a4 + 0xc8]\n 15195: u64 [s1 + 0x90] = a1\n 15199: a4 = u64 [s1 + 0xe0]\n 15203: u64 [a4 + 0x18] = a1\n 15206: u64 [s1 + 0x88] = a2\n 15210: u64 [a4 + 0x10] = a2\n 15213: u64 [s1 + 0x80] = a3\n 15217: u64 [a4 + 0x8] = a3\n 15220: u64 [s1 + 0x78] = a0\n 15223: u64 [a4] = a0\n 15225: a0 = 0x30110\n 15230: u64 [s1 + 0xe8] = a0\n 15234: i32 a0 = a0 + 0\n 15236: u64 [s1 + 0xd0] = a0\n 15240: ra = 0x1f8\n 15244: ecalli 3 // 'caller'\n 15246: a2 = u64 [s1 + 0xe8]\n 15250: t0 = 0x1fa\n 15254: jump @944\n      : @539 [@dyn 252] (gas: 2)\n 15257: a2 = u64 [s1 + 0xe8]\n 15261: t0 = 506, jump @944\n      : @540 [@dyn 253] (gas: 1)\n 15267: jump @542 if a0 != 0\n      : @541 (gas: 1)\n 15270: jump @681\n      : @542 (gas: 9)\n 15273: a0 = u64 [s1 + 0xd8]\n 15277: a0 = a0 << 0x20\n 15280: a1 = a0 >> 0x20\n 15283: a0 = u64 [s1 + 0xf0]\n 15287: a2 = u64 [s1 + 0xf8]\n 15291: a0 = a0 | a2\n 15294: u64 [s1 + 0xd8] = a1\n 15298: a0 = a0 | a1\n 15301: jump @544 if a0 != 0\n      : @543 (gas: 1)\n 15304: jump @686\n      : @544 (gas: 6)\n 15307: a0 = u64 [s1 + 0xd0]\n 15311: ra = 0x1fc\n 15315: ecalli 3 // 'caller'\n 15317: a2 = u64 [s1 + 0xe8]\n 15321: t0 = 0x1fe\n 15325: jump @919\n      : @545 [@dyn 254] (gas: 2)\n 15328: a2 = u64 [s1 + 0xe8]\n 15332: t0 = 510, jump @919\n      : @546 [@dyn 255] (gas: 7)\n 15338: u64 [s1 + 1112] = 0\n 15342: u64 [s1 + 0x450] = a1\n 15346: u64 [s1 + 0x448] = a0\n 15350: a1 = s1 + 0x440\n 15354: u64 [s1 + 0x440] = a3\n 15358: a0 = 0\n 15360: ra = 512, jump @19\n      : @547 [@dyn 256] (gas: 7)\n 15366: u64 [s1 + 1080] = 0\n 15370: u64 [s1 + 1072] = 0\n 15374: u64 [s1 + 1056] = 0x1\n 15379: a0 = 0x20\n 15382: a1 = s1 + 0x420\n 15386: u64 [s1 + 1064] = 0\n 15390: ra = 514, jump @19\n      : @548 [@dyn 257] (gas: 3)\n 15396: a1 = 0x200fc\n 15401: a0 = i32 [0x200fc]\n 15406: jump @550 if a0 >u 63\n      : @549 (gas: 2)\n 15410: u32 [0x200fc] = 0x40\n 15416: fallthrough\n      : @550 (gas: 15)\n 15417: a0 = sp + 0xffffffffffffffe0\n 15420: a2 = a0 & 0xffffffffffffffe0\n 15423: u64 [s1 + 0xb8] = a2\n 15427: sp = a2\n 15429: a0 = 0x20110\n 15434: i32 a0 = a0 + 0\n 15436: i32 a2 = a2 + 0\n 15438: u64 [s1 + 0xc8] = a1\n 15442: a1 = 0x40\n 15445: u64 [s1 + 0xc0] = a0\n 15449: ra = 0x204\n 15453: ecalli 6 // 'hash_keccak_256'\n 15455: a3 = u64 [s1 + 0xb8]\n 15459: t0 = 0x206\n 15463: jump @953\n      : @551 [@dyn 258] (gas: 2)\n 15466: a3 = u64 [s1 + 0xb8]\n 15470: t0 = 518, jump @953\n      : @552 [@dyn 259] (gas: 22)\n 15476: u64 [s1 + 0xb0] = a0\n 15480: a0 = reverse a1\n 15482: u64 [s1 + 0xa8] = a0\n 15486: a0 = reverse a2\n 15488: u64 [s1 + 0xa0] = a0\n 15492: a0 = reverse a3\n 15494: u64 [s1 + 0x98] = a0\n 15498: a0 = sp + 0xffffffffffffffe0\n 15501: a0 = a0 & 0xffffffffffffffe0\n 15504: u64 [s1 + 0xb8] = a0\n 15508: sp = a0\n 15510: u64 [s1 + 1048] = 0\n 15514: a0 = u64 [s1 + 0xd8]\n 15518: a2 = s1 + 0x400\n 15522: u64 [a2 + 0x10] = a0\n 15525: a0 = u64 [s1 + 0xf0]\n 15529: u64 [a2 + 0x8] = a0\n 15532: a1 = s1 + 0x400\n 15536: a0 = u64 [s1 + 0xf8]\n 15540: u64 [a2] = a0\n 15542: a0 = 0\n 15544: ra = 520, jump @19\n      : @553 [@dyn 260] (gas: 12)\n 15550: a0 = u64 [s1 + 0x98]\n 15554: a3 = s1 + 0x300\n 15558: u64 [a3 + 0xf8] = a0\n 15562: a0 = u64 [s1 + 0xa0]\n 15566: u64 [a3 + 0xf0] = a0\n 15570: a0 = u64 [s1 + 0xa8]\n 15574: u64 [a3 + 0xe8] = a0\n 15578: a0 = 0x20\n 15581: a1 = s1 + 0x3e0\n 15585: a2 = u64 [s1 + 0xb0]\n 15589: u64 [a3 + 0xe0] = a2\n 15593: ra = 522, jump @19\n      : @554 [@dyn 261] (gas: 3)\n 15599: a1 = u64 [s1 + 0xc8]\n 15603: a0 = i32 [a1]\n 15605: jump @556 if a0 >u 63\n      : @555 (gas: 2)\n 15609: u32 [a1 + 0] = 0x40\n 15612: fallthrough\n      : @556 (gas: 24)\n 15613: a0 = sp + 0xffffffffffffffe0\n 15616: a0 = a0 & 0xffffffffffffffe0\n 15619: u64 [s1 + 0xc8] = a0\n 15623: sp = a0\n 15625: i32 a2 = a0 + 0\n 15627: a1 = 0x40\n 15630: a0 = u64 [s1 + 0xc0]\n 15634: ecalli 6 // 'hash_keccak_256'\n 15636: a3 = u64 [s1 + 0xc8]\n 15640: a0 = u64 [a3 + 0x18]\n 15643: a1 = u64 [a3 + 0x10]\n 15646: a2 = u64 [a3 + 0x8]\n 15649: a3 = u64 [a3]\n 15651: a4 = reverse a0\n 15653: a1 = reverse a1\n 15655: a2 = reverse a2\n 15657: a3 = reverse a3\n 15659: a0 = u64 [s1 + 0xb8]\n 15663: u64 [a0 + 0x18] = a3\n 15666: u64 [a0 + 0x10] = a2\n 15669: u64 [a0 + 0x8] = a1\n 15672: u64 [a0] = a4\n 15674: a1 = u64 [s1 + 0xe0]\n 15678: ra = 524, jump @22\n      : @557 [@dyn 262] (gas: 3)\n 15684: a0 = s1 + 0x3c0\n 15688: a1 = 0x40\n 15691: ra = 526, jump @17\n      : @558 [@dyn 263] (gas: 6)\n 15697: a4 = s1 + 0x300\n 15701: a0 = u64 [a4 + 0xd8]\n 15705: a1 = u64 [a4 + 0xd0]\n 15709: a2 = u64 [a4 + 0xc8]\n 15713: a3 = u64 [a4 + 0xc0]\n 15717: t0 = 528, jump @932\n      : @559 [@dyn 264] (gas: 1)\n 15723: jump @617 if a0 != 0\n      : @560 (gas: 12)\n 15727: a0 = u64 [s1 + 0x78]\n 15730: u64 [s1 + 0x3a0] = a0\n 15734: a0 = u64 [s1 + 0x80]\n 15738: u64 [s1 + 0x3a8] = a0\n 15742: a0 = u64 [s1 + 0x88]\n 15746: u64 [s1 + 0x3b0] = a0\n 15750: a1 = s1 + 0x3a0\n 15754: a0 = u64 [s1 + 0x90]\n 15758: u64 [s1 + 0x3b8] = a0\n 15762: a0 = a3\n 15764: u64 [s1 + 0xe0] = a3\n 15768: ra = 530, jump @19\n      : @561 [@dyn 265] (gas: 6)\n 15774: a0 = u64 [s1 + 0xd0]\n 15778: ra = 0x214\n 15782: ecalli 3 // 'caller'\n 15784: a2 = u64 [s1 + 0xe8]\n 15788: t0 = 0x216\n 15792: jump @946\n      : @562 [@dyn 266] (gas: 2)\n 15795: a2 = u64 [s1 + 0xe8]\n 15799: t0 = 534, jump @946\n      : @563 [@dyn 267] (gas: 31)\n 15805: t0 = a1 | a0\n 15808: a3 = a3 >> 0x20\n 15811: a2 = reverse a2\n 15813: a1 = a2 << 0x20\n 15816: a1 = a1 | a3\n 15819: a2 = a2 >> 0x20\n 15822: u64 [s1 + 856] = 0\n 15826: a0 = u64 [s1 + 0xd8]\n 15830: u64 [s1 + 0x350] = a0\n 15834: a0 = u64 [s1 + 0xf0]\n 15838: u64 [s1 + 0x348] = a0\n 15842: a0 = u64 [s1 + 0xf8]\n 15846: u64 [s1 + 0x340] = a0\n 15850: u64 [s1 + 888] = 0\n 15854: a3 = u64 [0x20070]\n 15859: a4 = u64 [0x20078]\n 15864: a5 = u64 [0x20080]\n 15869: a0 = u64 [0x20088]\n 15874: u64 [s1 + 0x398] = a3\n 15878: u64 [s1 + 0x390] = a4\n 15882: u64 [s1 + 0x388] = a5\n 15886: u64 [s1 + 0x380] = a0\n 15890: u64 [s1 + 0x370] = a2\n 15894: u64 [s1 + 0x368] = a1\n 15898: a1 = 0x20\n 15901: a2 = s1 + 0x380\n 15905: a3 = s1 + 0x360\n 15909: a4 = s1 + 0x340\n 15913: u64 [s1 + 0x360] = t0\n 15917: a0 = u64 [s1 + 0xe0]\n 15921: ra = 536, jump @23\n      : @564 [@dyn 268] (gas: 3)\n 15927: a0 = s1 + 0x320\n 15931: a1 = 0x40\n 15934: ra = 538, jump @17\n      : @565 [@dyn 269] (gas: 6)\n 15940: a4 = s1 + 0x300\n 15944: a3 = u64 [a4 + 0x38]\n 15947: a1 = u64 [a4 + 0x30]\n 15950: a2 = u64 [a4 + 0x28]\n 15953: a0 = u64 [a4 + 0x20]\n 15956: t0 = 540, jump @930\n      : @566 [@dyn 270] (gas: 1)\n 15962: jump @617 if a1 != 0\n      : @567 (gas: 8)\n 15966: u64 [s1 + 792] = 0\n 15970: u64 [s1 + 784] = 0\n 15974: u64 [s1 + 776] = 0\n 15978: a1 = s1 + 0x300\n 15982: u64 [s1 + 768] = 0x1\n 15987: u64 [s1 + 0xf8] = a0\n 15991: ra = 0x248\n 15995: jump @19\n      : @568 (gas: 8)\n 15998: u64 [a3 + 0] = 0\n 16000: u64 [a3 + 4294967288] = 0\n 16003: u64 [a3 + 4294967280] = 0\n 16006: u64 [a3 + 4294967272] = 0\n 16009: a0 = s1 + 0x2000\n 16013: i32 a0 = a0 + 0xfffffffffffff860\n 16017: ecalli 11 // 'value_transferred'\n 16019: fallthrough\n      : @569 (gas: 10)\n 16020: a3 = s1 + 0x1878\n 16024: a4 = a3 + 0xffffffffffffff00\n 16028: a0 = u64 [a4 + 0xf8]\n 16032: a1 = u64 [a3]\n 16034: a2 = u64 [a4 + 0xf0]\n 16038: a3 = u64 [a4 + 0xe8]\n 16042: a1 = a1 | a2\n 16045: a0 = a0 | a3\n 16048: a0 = a0 | a1\n 16051: jump @691 if a0 != 0\n      : @570 (gas: 4)\n 16055: a0 = u64 [s1 + 0xf8]\n 16059: a0 = i32 [a0]\n 16061: a1 = 0x43\n 16064: jump @692 if a1 >=u a0\n      : @571 (gas: 4)\n 16068: a0 = s1 + 0x10c0\n 16072: ra = 0x21e\n 16076: t0 = 0x2f4\n 16080: jump @954\n      : @572 [@dyn 271] (gas: 30)\n 16083: a1 = s1 + 0x1078\n 16087: a0 = u64 [a1 + 0x48]\n 16090: u64 [s1 + 0xf8] = a0\n 16094: a0 = u64 [a1 + 0x50]\n 16097: u64 [s1 + 0xf0] = a0\n 16101: a0 = u64 [a1 + 0x58]\n 16104: u64 [s1 + 0xe8] = a0\n 16108: a0 = u64 [a1 + 0x60]\n 16111: u64 [s1 + 0xe0] = a0\n 16115: a0 = s1 + 0x2000\n 16119: i32 a0 = a0 + 0xfffffffffffff880\n 16123: a1 = 0x24\n 16126: ecalli 1 // 'call_data_load'\n 16128: a0 = s1 + 0x1878\n 16132: a1 = u64 [a0 + 0x8]\n 16135: u64 [s1 + 0xd8] = a1\n 16139: a1 = u64 [a0 + 0x10]\n 16142: u64 [s1 + 0xd0] = a1\n 16146: a1 = u64 [a0 + 0x18]\n 16149: u64 [s1 + 0xc8] = a1\n 16153: a0 = u64 [a0 + 0x20]\n 16156: u64 [s1 + 0xc0] = a0\n 16160: a0 = 0x30110\n 16165: u64 [s1 + 0xb8] = a0\n 16169: i32 a0 = a0 + 0\n 16171: ra = 0x220\n 16175: ecalli 3 // 'caller'\n 16177: a2 = u64 [s1 + 0xb8]\n 16181: t0 = 0x222\n 16185: jump @942\n      : @573 [@dyn 272] (gas: 2)\n 16188: a2 = u64 [s1 + 0xb8]\n 16192: t0 = 546, jump @942\n      : @574 [@dyn 273] (gas: 31)\n 16198: a0 = a0 >> 0x20\n 16201: a2 = reverse a2\n 16203: a3 = a2 << 0x20\n 16206: a0 = a0 | a3\n 16209: a2 = a2 >> 0x20\n 16212: a3 = s1 + 0x1078\n 16216: a4 = u64 [s1 + 0xc0]\n 16220: u64 [a3] = a4\n 16222: a4 = u64 [s1 + 0xc8]\n 16226: a5 = a3 + 0xffffffffffffff00\n 16230: u64 [a5 + 0xf8] = a4\n 16234: a4 = u64 [s1 + 0xd0]\n 16238: u64 [a5 + 0xf0] = a4\n 16242: a4 = u64 [s1 + 0xd8]\n 16246: u64 [a5 + 0xe8] = a4\n 16250: a4 = u64 [s1 + 0xe0]\n 16254: u64 [a3 + 0x20] = a4\n 16257: a4 = u64 [s1 + 0xe8]\n 16261: u64 [a3 + 0x18] = a4\n 16264: a4 = u64 [s1 + 0xf0]\n 16268: u64 [a3 + 0x10] = a4\n 16271: a4 = u64 [s1 + 0xf8]\n 16275: u64 [a3 + 0x8] = a4\n 16278: u64 [a3 + 0x38] = a2\n 16281: u64 [a3 + 0x30] = a0\n 16284: u64 [a3 + 0x28] = a1\n 16287: a0 = s1 + 0x10a0\n 16291: a1 = s1 + 0x1080\n 16295: a2 = s1 + 0x1060\n 16299: u64 [a3 + 64] = 0\n 16302: ra = 548, jump @846\n      : @575 [@dyn 274] (gas: 3)\n 16308: a0 = s1 + 0x1040\n 16312: a1 = 0x40\n 16315: ra = 550, jump @17\n      : @576 [@dyn 275] (gas: 8)\n 16321: a3 = s1 + 0x7ff\n 16325: a3 = a3 + 0x71\n 16328: a5 = a3 + 0x700\n 16332: a4 = u64 [a5 + 0xe8]\n 16336: a1 = u64 [a5 + 0xe0]\n 16340: a2 = u64 [a5 + 0xd8]\n 16344: a0 = u64 [a5 + 0xd0]\n 16348: t0 = 552, jump @937\n      : @577 [@dyn 276] (gas: 1)\n 16354: jump @617 if a1 != 0\n      : @578 (gas: 8)\n 16358: u64 [a3 + 1992] = 0\n 16362: u64 [a3 + 1984] = 0\n 16366: u64 [a3 + 1968] = 0x1\n 16371: a1 = s1 + 0x1020\n 16375: u64 [a3 + 1976] = 0\n 16379: u64 [s1 + 0xf8] = a0\n 16383: ra = 0x248\n 16387: jump @19\n      : @579 (gas: 8)\n 16390: u64 [a3 + 224] = 0\n 16394: u64 [a3 + 216] = 0\n 16398: u64 [a3 + 208] = 0\n 16402: u64 [a3 + 200] = 0\n 16406: a0 = s1 + 0x2000\n 16410: i32 a0 = a0 + 0xfffffffffffff940\n 16414: ecalli 11 // 'value_transferred'\n 16416: fallthrough\n      : @580 (gas: 9)\n 16417: a3 = s1 + 0x1878\n 16421: a0 = u64 [a3 + 0xd8]\n 16425: a1 = u64 [a3 + 0xe0]\n 16429: a2 = u64 [a3 + 0xd0]\n 16433: a3 = u64 [a3 + 0xc8]\n 16437: a1 = a1 | a2\n 16440: a0 = a0 | a3\n 16443: a0 = a0 | a1\n 16446: jump @693 if a0 != 0\n      : @581 (gas: 4)\n 16450: a0 = u64 [s1 + 0xf8]\n 16454: a0 = i32 [a0]\n 16456: a1 = 0x43\n 16459: jump @694 if a1 >=u a0\n      : @582 (gas: 6)\n 16463: a0 = 0xffffffff\n 16473: u64 [s1 + 0xf8] = a0\n 16477: a0 = s1 + 0x1380\n 16481: ra = 0x22a\n 16485: t0 = 0x2f4\n 16489: jump @954\n      : @583 [@dyn 277] (gas: 11)\n 16492: a1 = s1 + 0x1078\n 16496: a0 = u64 [a1 + 0x308]\n 16500: u64 [s1 + 0xf0] = a0\n 16504: a0 = u64 [a1 + 0x310]\n 16508: u64 [s1 + 0xd0] = a0\n 16512: a0 = u32 [a1 + 0x318]\n 16516: u64 [s1 + 0xc8] = a0\n 16520: a0 = s1 + 0x1360\n 16524: ra = 0x22c\n 16528: t0 = 0x2fe\n 16532: jump @954\n      : @584 [@dyn 278] (gas: 19)\n 16535: a1 = s1 + 0x1078\n 16539: a2 = a1 + 0x200\n 16543: a0 = u64 [a2 + 0xf8]\n 16547: u64 [s1 + 0xe8] = a0\n 16551: a0 = u64 [a2 + 0xf0]\n 16555: u64 [s1 + 0xe0] = a0\n 16559: a0 = u64 [a2 + 0xe8]\n 16563: u64 [s1 + 0xd8] = a0\n 16567: u64 [a1 + 736] = 0\n 16571: a0 = u64 [s1 + 0xc8]\n 16575: u64 [a2 + 0xd8] = a0\n 16579: a0 = u64 [s1 + 0xd0]\n 16583: u64 [a2 + 0xd0] = a0\n 16587: a2 = a1\n 16589: a1 = s1 + 0x1340\n 16593: a0 = u64 [s1 + 0xf0]\n 16597: u64 [a2 + 0x2c8] = a0\n 16601: a0 = 0\n 16603: ra = 558, jump @19\n      : @585 [@dyn 279] (gas: 3)\n 16609: t0 = 0x230\n 16613: a1 = s1 + 0x1078\n 16617: fallthrough\n      : @586 [@dyn 280] (gas: 8)\n 16618: u64 [a1 + 704] = 0\n 16622: u64 [a1 + 696] = 0\n 16626: u64 [a1 + 680] = 0x1\n 16631: a2 = a1\n 16633: a0 = 0x20\n 16636: a1 = s1 + 0x1320\n 16640: u64 [a2 + 688] = 0\n 16644: ra = 562, jump @19\n      : @587 [@dyn 281] (gas: 3)\n 16650: a1 = 0x200fc\n 16655: a0 = i32 [0x200fc]\n 16660: jump @589 if a0 >u 63\n      : @588 (gas: 2)\n 16664: u32 [0x200fc] = 0x40\n 16670: fallthrough\n      : @589 (gas: 15)\n 16671: a0 = sp + 0xffffffffffffffe0\n 16674: a2 = a0 & 0xffffffffffffffe0\n 16677: u64 [s1 + 0xc8] = a2\n 16681: sp = a2\n 16683: a0 = 0x20110\n 16688: i32 a0 = a0 + 0\n 16690: i32 a2 = a2 + 0\n 16692: u64 [s1 + 0xf0] = a1\n 16696: a1 = 0x40\n 16699: u64 [s1 + 0xd0] = a0\n 16703: ra = 0x234\n 16707: ecalli 6 // 'hash_keccak_256'\n 16709: a3 = u64 [s1 + 0xc8]\n 16713: t0 = 0x236\n 16717: jump @953\n      : @590 [@dyn 282] (gas: 2)\n 16720: a3 = u64 [s1 + 0xc8]\n 16724: t0 = 566, jump @953\n      : @591 [@dyn 283] (gas: 27)\n 16730: u64 [s1 + 0xc0] = a0\n 16734: a0 = reverse a1\n 16736: u64 [s1 + 0xb8] = a0\n 16740: a0 = reverse a2\n 16742: u64 [s1 + 0xb0] = a0\n 16746: a0 = reverse a3\n 16748: u64 [s1 + 0xa8] = a0\n 16752: a0 = sp + 0xffffffffffffffe0\n 16755: a0 = a0 & 0xffffffffffffffe0\n 16758: u64 [s1 + 0xc8] = a0\n 16762: sp = a0\n 16764: a0 = u64 [s1 + 0xd8]\n 16768: a0 = a0 & 0xffffffffffffffff\n 16771: a2 = u64 [s1 + 0xe0]\n 16775: a1 = a2 & 0xffffffffffffffff\n 16778: a2 = u64 [s1 + 0xf8]\n 16782: a3 = u64 [s1 + 0xe8]\n 16786: a2 = a2 & a3\n 16789: a3 = s1 + 0x1078\n 16793: u64 [a3 + 672] = 0\n 16797: a4 = a3 + 0x200\n 16801: u64 [a4 + 0x98] = a2\n 16805: u64 [a4 + 0x90] = a1\n 16809: a1 = s1 + 0x1300\n 16813: u64 [a4 + 0x88] = a0\n 16817: a0 = 0\n 16819: ra = 568, jump @19\n      : @592 [@dyn 284] (gas: 14)\n 16825: a0 = u64 [s1 + 0xa8]\n 16829: a1 = s1 + 0x1078\n 16833: a2 = a1 + 0x200\n 16837: u64 [a2 + 0x80] = a0\n 16841: a0 = u64 [s1 + 0xb0]\n 16845: u64 [a2 + 0x78] = a0\n 16848: a0 = u64 [s1 + 0xb8]\n 16852: u64 [a2 + 0x70] = a0\n 16855: a3 = a1\n 16857: a0 = 0x20\n 16860: a1 = s1 + 0x12e0\n 16864: a2 = u64 [s1 + 0xc0]\n 16868: u64 [a3 + 0x268] = a2\n 16872: ra = 570, jump @19\n      : @593 [@dyn 285] (gas: 3)\n 16878: a1 = u64 [s1 + 0xf0]\n 16882: a0 = i32 [a1]\n 16884: jump @595 if a0 >u 63\n      : @594 (gas: 3)\n 16888: u32 [a1 + 0] = 0x40\n 16891: t0 = 0x23c\n 16895: jump @945\n      : @595 (gas: 1)\n 16898: t0 = 572, jump @945\n      : @596 [@dyn 286] (gas: 5)\n 16904: ra = 0x23e\n 16908: ecalli 6 // 'hash_keccak_256'\n 16910: a3 = u64 [s1 + 0xf8]\n 16914: t0 = 0x240\n 16918: jump @922\n      : @597 [@dyn 287] (gas: 2)\n 16921: a3 = u64 [s1 + 0xf8]\n 16925: t0 = 576, jump @922\n      : @598 [@dyn 288] (gas: 7)\n 16931: a1 = u64 [s1 + 0xc8]\n 16935: u64 [a1 + 0x18] = a3\n 16938: u64 [a1 + 0x10] = a2\n 16941: u64 [a1 + 0x8] = a4\n 16944: u64 [a1] = a0\n 16946: a0 = s1 + 0x12c0\n 16950: ra = 578, jump @21\n      : @599 [@dyn 289] (gas: 13)\n 16956: a1 = s1 + 0x1078\n 16960: a2 = a1 + 0x200\n 16964: a0 = u64 [a2 + 0x60]\n 16967: u64 [s1 + 0xf8] = a0\n 16971: a0 = u64 [a2 + 0x58]\n 16974: u64 [s1 + 0xf0] = a0\n 16978: a0 = u64 [a2 + 0x50]\n 16981: u64 [s1 + 0xe8] = a0\n 16985: a0 = u64 [a2 + 0x48]\n 16988: u64 [s1 + 0xe0] = a0\n 16992: a0 = s1 + 0x12a0\n 16996: a1 = 0x40\n 16999: ra = 580, jump @17\n      : @600 [@dyn 290] (gas: 7)\n 17005: a3 = s1 + 0x1078\n 17009: a5 = a3 + 0x200\n 17013: a0 = u64 [a5 + 0x40]\n 17016: a1 = u64 [a5 + 0x38]\n 17019: a2 = u64 [a5 + 0x30]\n 17022: a4 = u64 [a5 + 0x28]\n 17025: t0 = 582, jump @924\n      : @601 [@dyn 291] (gas: 1)\n 17031: jump @617 if a0 != 0\n      : @602 (gas: 13)\n 17035: a0 = u64 [s1 + 0xe0]\n 17039: a2 = a3 + 0x200\n 17043: u64 [a2 + 0x8] = a0\n 17046: a0 = u64 [s1 + 0xe8]\n 17050: u64 [a2 + 0x10] = a0\n 17053: a0 = u64 [s1 + 0xf0]\n 17057: u64 [a2 + 0x18] = a0\n 17060: a1 = s1 + 0x1280\n 17064: a0 = u64 [s1 + 0xf8]\n 17068: u64 [a2 + 0x20] = a0\n 17071: a0 = a4\n 17073: u64 [s1 + 0xf8] = a4\n 17077: ra = 584, jump @19\n      : @603 [@dyn 292] (gas: 3)\n 17083: a1 = 0x20\n 17086: a0 = u64 [s1 + 0xf8]\n 17090: ra = 586, jump @26\n      : @604 [@dyn 293] (gas: 5)\n 17096: i32 a1 = a0 + 0\n 17098: a2 = 0x20\n 17101: a0 = 0\n 17103: ecalli 8 // 'seal_return'\n 17105: fallthrough\n      : @605 (gas: 7)\n 17106: u64 [s1 + 568] = 0\n 17110: u64 [s1 + 560] = 0\n 17114: u64 [s1 + 552] = 0\n 17118: a1 = s1 + 0x220\n 17122: u64 [s1 + 544] = 0x3\n 17127: a0 = 0\n 17129: ra = 588, jump @19\n      : @606 [@dyn 294] (gas: 21)\n 17135: a0 = sp + 0xffffffffffffffe0\n 17138: a1 = a0 & 0xffffffffffffffe0\n 17141: sp = a1\n 17143: u64 [s1 + 248] = 0\n 17147: a5 = 0\n 17149: t2 = 0\n 17151: t0 = 0\n 17153: t1 = u64 [0x20090]\n 17158: a2 = u64 [0x20098]\n 17163: ra = u64 [0x200a0]\n 17168: a0 = u64 [0x200a8]\n 17173: u64 [a1 + 0x18] = t1\n 17176: u64 [s1 + 0xd0] = a2\n 17180: u64 [a1 + 0x10] = a2\n 17183: u64 [a1 + 0x8] = ra\n 17186: a2 = a0\n 17188: u64 [a1] = a0\n 17190: a0 = 0xffffff60\n 17200: u64 [s1 + 0x98] = a0\n 17204: u64 [s1 + 0x90] = a1\n 17208: fallthrough\n      : @607 (gas: 19)\n 17209: u64 [s1 + 0xd8] = a2\n 17213: a0 = u64 [s1 + 0xb8]\n 17217: a2 = u64 [s1 + 0xf8]\n 17221: a0 = a2 <u a0\n 17224: a2 = u64 [s1 + 0xa8]\n 17228: a3 = a5 ^ a2\n 17231: u64 [s1 + 0xf0] = a5\n 17235: a2 = a5 <u a2\n 17238: a2 = a0 if a3 == 0\n 17241: a4 = u64 [s1 + 0xb0]\n 17245: a0 = t2 <u a4\n 17248: a3 = u64 [s1 + 0xa0]\n 17252: a5 = t0 ^ a3\n 17255: a3 = t0 <u a3\n 17258: a3 = a0 if a5 == 0\n 17261: a0 = t2 ^ a4\n 17264: a0 = a0 | a5\n 17267: a3 = a2 if a0 == 0\n 17270: jump @612 if a3 == 0\n      : @608 (gas: 6)\n 17274: a0 = s1 + 0x200\n 17278: u64 [s1 + 0xe8] = t0\n 17282: u64 [s1 + 0xc8] = t1\n 17286: u64 [s1 + 0xe0] = t2\n 17290: u64 [s1 + 0xc0] = ra\n 17294: ra = 590, jump @21\n      : @609 [@dyn 295] (gas: 10)\n 17300: a5 = u64 [s1 + 0xe0]\n 17304: a0 = u64 [s1 + 0xe8]\n 17308: a0 = a0 | a5\n 17311: a1 = u64 [s1 + 0xf8]\n 17315: a2 = u64 [s1 + 0x98]\n 17319: a1 = a1 <u a2\n 17322: a2 = u64 [s1 + 0xf0]\n 17326: a1 = 0 if a2 != 0\n 17328: a1 = 0 if a0 != 0\n 17330: jump @617 if a1 == 0\n      : @610 (gas: 14)\n 17334: t0 = u64 [s1 + 0x218]\n 17338: a0 = s1 + 0x200\n 17342: a1 = u64 [a0 + 0x10]\n 17345: a3 = u64 [a0 + 0x8]\n 17348: a4 = u64 [a0]\n 17350: a0 = u64 [s1 + 0xf8]\n 17354: i32 a0 = a0 + 0xa0\n 17358: a2 = s1 + 0x100\n 17362: u64 [a2 + 0xe0] = a4\n 17366: u64 [a2 + 0xe8] = a3\n 17370: u64 [a2 + 0xf0] = a1\n 17374: a1 = s1 + 0x1e0\n 17378: u64 [s1 + 0x1f8] = t0\n 17382: ra = 592, jump @19\n      : @611 [@dyn 296] (gas: 36)\n 17388: t0 = u64 [s1 + 0xe8]\n 17392: a5 = u64 [s1 + 0xd8]\n 17396: a5 = a5 + 0x1\n 17399: a0 = a5 <u 0x1\n 17402: ra = u64 [s1 + 0xc0]\n 17406: ra = ra + a0\n 17409: a0 = a5 | ra\n 17412: a0 = a0 <u 0x1\n 17415: a1 = u64 [s1 + 0xd0]\n 17419: a0 = a0 + a1\n 17422: a1 = a0 <u a1\n 17425: a3 = u64 [s1 + 0xc8]\n 17429: a3 = a3 + a1\n 17432: a1 = u64 [s1 + 0xf8]\n 17436: t1 = a1 + 0x20\n 17439: a2 = t1 <u a1\n 17442: a4 = u64 [s1 + 0xf0]\n 17446: t2 = a4 + a2\n 17449: a4 = t2 <u a4\n 17452: a4 = a2 if a2 == 0\n 17455: a1 = u64 [s1 + 0xe0]\n 17459: a4 = a4 + a1\n 17462: a2 = a4 <u a1\n 17465: t0 = t0 + a2\n 17468: a1 = u64 [s1 + 0x90]\n 17472: u64 [a1 + 0x8] = ra\n 17475: a2 = a5\n 17477: u64 [a1] = a5\n 17479: u64 [a1 + 0x10] = a0\n 17482: u64 [a1 + 0x18] = a3\n 17485: u64 [s1 + 0xd0] = a0\n 17489: u64 [s1 + 0xf8] = t1\n 17493: a5 = t2\n 17495: t2 = a4\n 17497: t1 = a3\n 17499: jump @607\n      : @612 (gas: 11)\n 17502: a0 = u64 [s1 + 0xf8]\n 17506: a3 = a0 + 0xa0\n 17510: a0 = a3 <u a0\n 17513: a2 = u64 [s1 + 0xf0]\n 17517: a1 = a2 + a0\n 17520: a2 = a1 <u a2\n 17523: a2 = a0 if a0 == 0\n 17526: a0 = t2 + a2\n 17529: a2 = a0 <u t2\n 17532: t0 = t0 + a2\n 17535: fallthrough\n      : @613 (gas: 37)\n 17536: t1 = a3 + 0xffffffffffffff9f\n 17539: a3 = t1 <u a3\n 17542: a5 = a1 + a3\n 17545: a5 = a5 + 0xffffffffffffffff\n 17548: u64 [s1 + 0xd8] = a5\n 17552: a2 = a5 ^ a1\n 17555: a1 = a5 <u a1\n 17558: a1 = a3 if a2 == 0\n 17561: a3 = a0 + 0xffffffffffffffff\n 17564: a4 = a3 + a1\n 17567: a1 = a4 <u a3\n 17570: a0 = a0 <u 0x1\n 17573: a2 = t0 - a0\n 17576: t0 = a2 + a1\n 17579: u64 [s1 + 0xc0] = t0\n 17583: a0 = t1 & 0xffffffffffffffe0\n 17586: u64 [s1 + 0xd0] = a0\n 17590: a3 = a0 + 0x80\n 17594: u64 [s1 + 0xf8] = a3\n 17598: a0 = a3 <u a0\n 17601: a2 = a5 + a0\n 17604: u64 [s1 + 0xf0] = a2\n 17608: a1 = a2 <u a5\n 17611: a1 = a0 if a0 == 0\n 17614: u64 [s1 + 0xc8] = a4\n 17618: a1 = a1 + a4\n 17621: u64 [s1 + 0xe8] = a1\n 17625: a0 = a1 <u a4\n 17628: t0 = t0 + a0\n 17631: u64 [s1 + 0xe0] = t0\n 17635: u64 [s1 + 0x1a0] = a3\n 17639: u64 [s1 + 0x1a8] = a2\n 17643: u64 [s1 + 0x1b0] = a1\n 17647: a0 = 0x40\n 17650: a1 = s1 + 0x1a0\n 17654: u64 [s1 + 0x1b8] = t0\n 17658: ra = 594, jump @19\n      : @614 [@dyn 297] (gas: 17)\n 17664: u64 [s1 + 344] = 0\n 17668: u64 [s1 + 336] = 0\n 17672: u64 [s1 + 328] = 0\n 17676: a4 = s1 + 0x100\n 17680: u64 [a4 + 64] = 0x80\n 17685: a0 = u64 [s1 + 0xe0]\n 17689: u64 [a4 + 0x78] = a0\n 17692: a0 = u64 [s1 + 0xe8]\n 17696: u64 [a4 + 0x70] = a0\n 17699: a0 = u64 [s1 + 0xf0]\n 17703: u64 [a4 + 0x68] = a0\n 17706: a0 = s1 + 0x180\n 17710: a1 = s1 + 0x160\n 17714: a2 = s1 + 0x140\n 17718: a3 = u64 [s1 + 0xf8]\n 17722: u64 [a4 + 0x60] = a3\n 17725: ra = 596, jump @795\n      : @615 [@dyn 298] (gas: 10)\n 17731: a0 = u64 [s1 + 0xc8]\n 17735: a1 = u64 [s1 + 0xc0]\n 17739: a0 = a0 | a1\n 17742: a1 = 0xffffff80\n 17752: a2 = u64 [s1 + 0xd0]\n 17756: a1 = a2 <u a1\n 17759: a2 = u64 [s1 + 0xd8]\n 17763: a1 = 0 if a2 != 0\n 17765: a1 = 0 if a0 != 0\n 17767: jump @617 if a1 == 0\n      : @616 (gas: 30)\n 17770: ra = u64 [s1 + 0x190]\n 17774: a1 = u64 [s1 + 0x198]\n 17778: t1 = u64 [s1 + 0x180]\n 17782: a3 = u64 [s1 + 0x188]\n 17786: a2 = u64 [s1 + 0xe8]\n 17790: a4 = ra <u a2\n 17793: a1 = a1 - a4\n 17796: a0 = u64 [s1 + 0xe0]\n 17800: t0 = a1 - a0\n 17803: a1 = u64 [s1 + 0xf0]\n 17807: a4 = a3 ^ a1\n 17810: a5 = a3 <u a1\n 17813: a0 = u64 [s1 + 0xf8]\n 17817: t2 = t1 <u a0\n 17820: a5 = t2 if a4 == 0\n 17823: a2 = ra - a2\n 17826: a4 = a2 <u a5\n 17829: a4 = t0 - a4\n 17832: a5 = a2 - a5\n 17835: a3 = a3 - t2\n 17838: a3 = a3 - a1\n 17841: a1 = t1 - a0\n 17844: a2 = a1 | a5\n 17847: a3 = a3 | a4\n 17850: a2 = a2 | a3\n 17853: a2 = a2 >> 0x20\n 17856: a3 = a3 | a5\n 17859: a3 = a3 << 0x20\n 17862: a2 = a2 | a3\n 17865: jump @723 if a2 == 0\n      : @617 (gas: 1)\n 17869: trap\n      : @618 (gas: 10)\n 17870: a2 = s1 + 0x7ff\n 17874: a2 = a2 + 0x71\n 17877: u64 [a2 + 1864] = 0\n 17881: u64 [a2 + 1856] = 0\n 17885: u64 [a2 + 1848] = 0\n 17889: a1 = s1 + 0x7ff\n 17893: a1 = a1 + 0x7a1\n 17897: u64 [a2 + 1840] = 0x4\n 17902: a0 = 0\n 17904: ra = 598, jump @19\n      : @619 [@dyn 299] (gas: 37)\n 17910: a0 = sp + 0xffffffffffffffe0\n 17913: a4 = a0 & 0xffffffffffffffe0\n 17916: sp = a4\n 17918: u64 [s1 + 248] = 0\n 17922: t2 = 0\n 17924: t1 = 0\n 17926: u64 [s1 + 240] = 0\n 17930: t0 = u64 [0x20028]\n 17935: a3 = u64 [0x20030]\n 17940: a1 = u64 [s1 + 0x70]\n 17943: a0 = a1 + 0x20\n 17946: u64 [s1 + 0x90] = a0\n 17950: a0 = a0 <u a1\n 17953: a1 = u64 [s1 + 0x60]\n 17956: a2 = a1 + a0\n 17959: u64 [s1 + 0x88] = a2\n 17963: a1 = a2 <u a1\n 17966: a1 = a0 if a0 == 0\n 17969: a5 = u64 [0x20038]\n 17974: a0 = u64 [0x20040]\n 17979: ra = t0\n 17981: u64 [a4 + 0x18] = t0\n 17984: u64 [s1 + 0xb8] = a3\n 17988: u64 [a4 + 0x10] = a3\n 17991: t0 = a5\n 17993: u64 [a4 + 0x8] = a5\n 17996: u64 [s1 + 0xd8] = a4\n 18000: a2 = a0\n 18002: u64 [a4] = a0\n 18004: a0 = u64 [s1 + 0x68]\n 18007: a1 = a1 + a0\n 18010: u64 [s1 + 0x80] = a1\n 18014: a0 = a1 <u a0\n 18017: a1 = u64 [s1 + 0x58]\n 18020: a0 = a0 + a1\n 18023: u64 [s1 + 0x78] = a0\n 18026: fallthrough\n      : @620 (gas: 21)\n 18027: u64 [s1 + 0xc0] = a2\n 18031: u64 [s1 + 0xc8] = t0\n 18035: u64 [s1 + 0xd0] = ra\n 18039: a0 = u64 [s1 + 0xb0]\n 18043: a1 = u64 [s1 + 0xf8]\n 18047: a0 = a1 <u a0\n 18050: a2 = u64 [s1 + 0xa0]\n 18054: a1 = t2 ^ a2\n 18057: a2 = t2 <u a2\n 18060: a2 = a0 if a1 == 0\n 18063: a4 = u64 [s1 + 0xa8]\n 18067: a0 = t1 <u a4\n 18070: a3 = u64 [s1 + 0x98]\n 18074: a1 = u64 [s1 + 0xf0]\n 18078: a5 = a1 ^ a3\n 18081: a3 = a1 <u a3\n 18084: a3 = a0 if a5 == 0\n 18087: a0 = t1 ^ a4\n 18090: a0 = a0 | a5\n 18093: a3 = a2 if a0 == 0\n 18096: jump @622 if a3 != 0\n      : @621 (gas: 1)\n 18099: jump @307\n      : @622 (gas: 6)\n 18102: a0 = s1 + 0x7ff\n 18106: a0 = a0 + 0x781\n 18110: a1 = u64 [s1 + 0xd8]\n 18114: u64 [s1 + 0xe8] = t1\n 18118: u64 [s1 + 0xe0] = t2\n 18122: ra = 600, jump @21\n      : @623 [@dyn 300] (gas: 30)\n 18128: t2 = u64 [s1 + 0xf8]\n 18132: t1 = u64 [s1 + 0xe0]\n 18136: ra = u64 [s1 + 0xe8]\n 18140: a1 = u64 [s1 + 0x90]\n 18144: a0 = a1 + t2\n 18147: a1 = a0 <u a1\n 18150: a4 = u64 [s1 + 0x88]\n 18154: a2 = a4 + t1\n 18157: a2 = a2 + a1\n 18160: a5 = a2 ^ a4\n 18163: a4 = a2 <u a4\n 18166: a4 = a1 if a5 == 0\n 18169: a5 = u64 [s1 + 0x80]\n 18173: a1 = a5 + ra\n 18176: t0 = a1 <u a5\n 18179: a5 = u64 [s1 + 0xf0]\n 18183: a3 = u64 [s1 + 0x78]\n 18186: a5 = a5 + a3\n 18189: a5 = a5 + t0\n 18192: a4 = a4 + a1\n 18195: a1 = a4 <u a1\n 18198: a1 = a1 + a5\n 18201: a1 = a1 | a2\n 18204: a2 = a0 | a4\n 18207: a2 = a2 | a1\n 18210: a1 = a1 | a4\n 18213: a2 = a2 >> 0x20\n 18216: a1 = a1 << 0x20\n 18219: a1 = a1 | a2\n 18222: jump @617 if a1 != 0\n      : @624 (gas: 15)\n 18226: a5 = s1 + 0x7ff\n 18230: a5 = a5 + 0x71\n 18233: t0 = u64 [a5 + 0x728]\n 18237: a3 = a5 + 0x700\n 18241: a1 = u64 [a3 + 0x20]\n 18244: a2 = u64 [a3 + 0x18]\n 18247: a4 = u64 [a3 + 0x10]\n 18250: u64 [a5 + 0x6f0] = a4\n 18254: u64 [a5 + 0x6f8] = a2\n 18258: u64 [a3] = a1\n 18260: a1 = s1 + 0x7ff\n 18264: a1 = a1 + 0x761\n 18268: u64 [a5 + 0x708] = t0\n 18272: u64 [s1 + 0xf8] = t2\n 18276: ra = 602, jump @19\n      : @625 [@dyn 301] (gas: 39)\n 18282: a3 = u64 [s1 + 0xc0]\n 18286: a3 = a3 + 0x1\n 18289: a0 = a3 <u 0x1\n 18292: ra = u64 [s1 + 0xc8]\n 18296: ra = ra + a0\n 18299: a0 = a3 | ra\n 18302: a0 = a0 <u 0x1\n 18305: a1 = u64 [s1 + 0xb8]\n 18309: t2 = a1 + a0\n 18312: a1 = t2 <u a1\n 18315: a0 = u64 [s1 + 0xd0]\n 18319: a0 = a0 + a1\n 18322: a1 = u64 [s1 + 0xf8]\n 18326: t1 = a1 + 0x20\n 18329: a2 = t1 <u a1\n 18332: a4 = u64 [s1 + 0xe0]\n 18336: a1 = a4 + a2\n 18339: a4 = a1 <u a4\n 18342: a4 = a2 if a2 == 0\n 18345: a2 = u64 [s1 + 0xe8]\n 18349: a4 = a4 + a2\n 18352: a2 = a4 <u a2\n 18355: a5 = u64 [s1 + 0xf0]\n 18359: a5 = a5 + a2\n 18362: u64 [s1 + 0xf0] = a5\n 18366: t0 = ra\n 18368: a5 = u64 [s1 + 0xd8]\n 18372: u64 [a5 + 0x8] = ra\n 18375: a2 = a3\n 18377: u64 [a5] = a3\n 18379: a3 = t2\n 18381: u64 [a5 + 0x10] = a3\n 18384: ra = a0\n 18386: u64 [a5 + 0x18] = a0\n 18389: u64 [s1 + 0xb8] = a3\n 18393: u64 [s1 + 0xf8] = t1\n 18397: t2 = a1\n 18399: t1 = a4\n 18401: jump @620\n      : @626 (gas: 6)\n 18404: a0 = u64 [s1 + 0xe0]\n 18408: ra = 0x25c\n 18412: ecalli 3 // 'caller'\n 18414: a2 = u64 [s1 + 0xf8]\n 18418: t0 = 0x25e\n 18422: jump @944\n      : @627 [@dyn 302] (gas: 2)\n 18425: a2 = u64 [s1 + 0xf8]\n 18429: t0 = 606, jump @944\n      : @628 [@dyn 303] (gas: 1)\n 18435: jump @695 if a0 == 0\n      : @629 (gas: 28)\n 18439: a0 = u64 [s1 + 0xe0]\n 18443: ecalli 3 // 'caller'\n 18445: a2 = u64 [s1 + 0xf8]\n 18449: a0 = u64 [a2 + 0x8]\n 18452: a1 = i32 [a2 + 0x10]\n 18455: a3 = u64 [a2]\n 18457: a0 = reverse a0\n 18459: a2 = a0 << 0x20\n 18462: a1 = reverse a1\n 18464: a1 = a1 >> 0x20\n 18467: a2 = a2 | a1\n 18470: a0 = a0 >> 0x20\n 18473: a1 = reverse a3\n 18475: a3 = a1 << 0x20\n 18478: a0 = a0 | a3\n 18481: a1 = a1 >> 0x20\n 18484: u64 [s1 + 1400] = 0\n 18488: u64 [s1 + 1392] = 0\n 18492: u64 [s1 + 1384] = 0x5\n 18497: a3 = 0x6bc75e2d63100000\n 18507: u64 [s1 + 0x560] = a3\n 18511: u64 [s1 + 1432] = 0\n 18515: u64 [s1 + 0x590] = a1\n 18519: u64 [s1 + 0x588] = a0\n 18523: a0 = s1 + 0x580\n 18527: a1 = s1 + 0x560\n 18531: u64 [s1 + 0x580] = a2\n 18535: ra = 608, jump @896\n      : @630 [@dyn 304] (gas: 6)\n 18541: a0 = u64 [s1 + 0xe0]\n 18545: ra = 0x262\n 18549: ecalli 3 // 'caller'\n 18551: a2 = u64 [s1 + 0xf8]\n 18555: t0 = 0x264\n 18559: jump @919\n      : @631 [@dyn 305] (gas: 2)\n 18562: a2 = u64 [s1 + 0xf8]\n 18566: t0 = 612, jump @919\n      : @632 [@dyn 306] (gas: 7)\n 18572: u64 [s1 + 1368] = 0\n 18576: u64 [s1 + 0x550] = a1\n 18580: u64 [s1 + 0x548] = a0\n 18584: a1 = s1 + 0x540\n 18588: u64 [s1 + 0x540] = a3\n 18592: a0 = 0\n 18594: ra = 614, jump @19\n      : @633 [@dyn 307] (gas: 7)\n 18600: u64 [s1 + 1336] = 0\n 18604: u64 [s1 + 1328] = 0\n 18608: u64 [s1 + 1312] = 0x5\n 18613: a0 = 0x20\n 18616: a1 = s1 + 0x520\n 18620: u64 [s1 + 1320] = 0\n 18624: ra = 616, jump @19\n      : @634 [@dyn 308] (gas: 5)\n 18630: a0 = s1 + 0x1000\n 18634: i32 a0 = a0 + 0x540\n 18638: ecalli 7 // 'now'\n 18640: a1 = s1 + 0x1078\n 18644: fallthrough\n      : @635 (gas: 12)\n 18645: a2 = a1 + 0x400\n 18649: a0 = u64 [a2 + 0xe0]\n 18653: u64 [s1 + 0xd8] = a0\n 18657: a0 = u64 [a2 + 0xd8]\n 18661: u64 [s1 + 0xe0] = a0\n 18665: a0 = u64 [a2 + 0xd0]\n 18669: u64 [s1 + 0xf8] = a0\n 18673: a0 = u64 [s1 + 0xf0]\n 18677: a0 = i32 [a0]\n 18679: a1 = u64 [a2 + 0xc8]\n 18683: u64 [s1 + 0xd0] = a1\n 18687: jump @637 if a0 >u 63\n      : @636 (gas: 3)\n 18691: a1 = u64 [s1 + 0xf0]\n 18695: u32 [a1 + 0] = 0x40\n 18698: fallthrough\n      : @637 (gas: 12)\n 18699: a0 = sp + 0xffffffffffffffe0\n 18702: a0 = a0 & 0xffffffffffffffe0\n 18705: u64 [s1 + 0xf0] = a0\n 18709: sp = a0\n 18711: i32 a2 = a0 + 0\n 18713: a1 = 0x40\n 18716: a0 = u64 [s1 + 0xe8]\n 18720: ra = 0x26a\n 18724: ecalli 6 // 'hash_keccak_256'\n 18726: a3 = u64 [s1 + 0xf0]\n 18730: t0 = 0x26c\n 18734: jump @923\n      : @638 [@dyn 309] (gas: 2)\n 18737: a3 = u64 [s1 + 0xf0]\n 18741: t0 = 620, jump @923\n      : @639 [@dyn 310] (gas: 17)\n 18747: a5 = a4 + 0x500\n 18751: u64 [a5] = a3\n 18753: a3 = a4 + 0x400\n 18757: u64 [a3 + 0xf8] = a2\n 18761: u64 [a3 + 0xf0] = a1\n 18765: u64 [a3 + 0xe8] = a0\n 18769: a0 = u64 [s1 + 0xd8]\n 18773: u64 [a5 + 0x20] = a0\n 18776: a0 = u64 [s1 + 0xe0]\n 18780: u64 [a5 + 0x18] = a0\n 18783: a0 = u64 [s1 + 0xf8]\n 18787: u64 [a5 + 0x10] = a0\n 18790: a0 = u64 [s1 + 0xd0]\n 18794: u64 [a5 + 0x8] = a0\n 18797: a0 = s1 + 0x1560\n 18801: a1 = s1 + 0x1580\n 18805: ra = 622, jump @22\n      : @640 [@dyn 311] (gas: 5)\n 18811: a0 = 0\n 18813: a1 = u64 [s1 + 0xe8]\n 18817: a2 = 0\n 18819: ecalli 8 // 'seal_return'\n 18821: jump @732\n      : @641 (gas: 6)\n 18824: a1 = 0x20110\n 18829: i32 a1 = a1 + 0\n 18831: a0 = 0x1\n 18834: a2 = 0\n 18836: ecalli 8 // 'seal_return'\n 18838: jump @732\n      : @642 (gas: 6)\n 18841: a1 = 0x20110\n 18846: i32 a1 = a1 + 0\n 18848: a0 = 0x1\n 18851: a2 = 0\n 18853: ecalli 8 // 'seal_return'\n 18855: jump @732\n      : @643 (gas: 6)\n 18858: a1 = 0x20110\n 18863: i32 a1 = a1 + 0\n 18865: a0 = 0x1\n 18868: a2 = 0\n 18870: ecalli 8 // 'seal_return'\n 18872: jump @732\n      : @644 (gas: 6)\n 18875: a1 = 0x20110\n 18880: i32 a1 = a1 + 0\n 18882: a0 = 0x1\n 18885: a2 = 0\n 18887: ecalli 8 // 'seal_return'\n 18889: jump @732\n      : @645 (gas: 11)\n 18892: a2 = s1 + 0x7ff\n 18896: a2 = a2 + 0x71\n 18899: u64 [a2 + 1536] = 0\n 18903: u64 [a2 + 1528] = 0\n 18907: u64 [a2 + 1520] = 0\n 18911: a0 = 0x4e487b7100000000\n 18921: a1 = s1 + 0x7ff\n 18925: a1 = a1 + 0x661\n 18929: u64 [a2 + 0x608] = a0\n 18933: a0 = 0\n 18935: ra = 624, jump @19\n      : @646 [@dyn 312] (gas: 11)\n 18941: a1 = s1 + 0x7ff\n 18945: a1 = a1 + 0x71\n 18948: u64 [a1 + 1512] = 0\n 18952: u64 [a1 + 1504] = 0\n 18956: u64 [a1 + 1488] = 0x22\n 18961: a2 = a1\n 18963: a0 = 0x4\n 18966: a1 = s1 + 0x7ff\n 18970: a1 = a1 + 0x641\n 18974: u64 [a2 + 1496] = 0\n 18978: ra = 626, jump @19\n      : @647 [@dyn 313] (gas: 2)\n 18984: a1 = i32 [0x200fc]\n 18989: jump @649 if a1 >u 63\n      : @648 (gas: 3)\n 18993: u32 [0x200fc] = 0x40\n 18999: a1 = 0x20110\n 19004: jump @705\n      : @649 (gas: 2)\n 19007: a1 = 0x20110\n 19012: jump @705\n      : @650 (gas: 6)\n 19015: a1 = 0x20110\n 19020: i32 a1 = a1 + 0\n 19022: a0 = 0x1\n 19025: a2 = 0\n 19027: ecalli 8 // 'seal_return'\n 19029: jump @732\n      : @651 (gas: 6)\n 19032: a1 = 0x20110\n 19037: i32 a1 = a1 + 0\n 19039: a0 = 0x1\n 19042: a2 = 0\n 19044: ecalli 8 // 'seal_return'\n 19046: jump @732\n      : @652 (gas: 6)\n 19049: a1 = 0x20110\n 19054: i32 a1 = a1 + 0\n 19056: a0 = 0x1\n 19059: a2 = 0\n 19061: ecalli 8 // 'seal_return'\n 19063: jump @732\n      : @653 (gas: 6)\n 19066: a1 = 0x20110\n 19071: i32 a1 = a1 + 0\n 19073: a0 = 0x1\n 19076: a2 = 0\n 19078: ecalli 8 // 'seal_return'\n 19080: jump @732\n      : @654 (gas: 6)\n 19083: a1 = 0x20110\n 19088: i32 a1 = a1 + 0\n 19090: a0 = 0x1\n 19093: a2 = 0\n 19095: ecalli 8 // 'seal_return'\n 19097: jump @732\n      : @655 (gas: 6)\n 19100: a1 = 0x20110\n 19105: i32 a1 = a1 + 0\n 19107: a0 = 0x1\n 19110: a2 = 0\n 19112: ecalli 8 // 'seal_return'\n 19114: jump @732\n      : @656 (gas: 6)\n 19117: a1 = 0x20110\n 19122: i32 a1 = a1 + 0\n 19124: a0 = 0x1\n 19127: a2 = 0\n 19129: ecalli 8 // 'seal_return'\n 19131: jump @732\n      : @657 (gas: 6)\n 19134: a1 = 0x20110\n 19139: i32 a1 = a1 + 0\n 19141: a0 = 0x1\n 19144: a2 = 0\n 19146: ecalli 8 // 'seal_return'\n 19148: jump @732\n      : @658 (gas: 6)\n 19151: a1 = 0x20110\n 19156: i32 a1 = a1 + 0\n 19158: a0 = 0x1\n 19161: a2 = 0\n 19163: ecalli 8 // 'seal_return'\n 19165: jump @732\n      : @659 (gas: 6)\n 19168: a1 = 0x20110\n 19173: i32 a1 = a1 + 0\n 19175: a0 = 0x1\n 19178: a2 = 0\n 19180: ecalli 8 // 'seal_return'\n 19182: jump @732\n      : @660 (gas: 6)\n 19185: a1 = 0x20110\n 19190: i32 a1 = a1 + 0\n 19192: a0 = 0x1\n 19195: a2 = 0\n 19197: ecalli 8 // 'seal_return'\n 19199: jump @732\n      : @661 (gas: 6)\n 19202: a1 = 0x20110\n 19207: i32 a1 = a1 + 0\n 19209: a0 = 0x1\n 19212: a2 = 0\n 19214: ecalli 8 // 'seal_return'\n 19216: jump @732\n      : @662 (gas: 6)\n 19219: u64 [s1 + 304] = 0\n 19223: u64 [s1 + 296] = 0\n 19227: u64 [s1 + 288] = 0\n 19231: t0 = 0x274\n 19235: a0 = 0x4e487b7100000000\n 19245: fallthrough\n      : @663 [@dyn 314] (gas: 4)\n 19246: a1 = s1 + 0x120\n 19250: u64 [s1 + 0x138] = a0\n 19254: a0 = 0\n 19256: ra = 630, jump @19\n      : @664 [@dyn 315] (gas: 7)\n 19262: u64 [s1 + 280] = 0\n 19266: u64 [s1 + 272] = 0\n 19270: u64 [s1 + 256] = 0x22\n 19275: a0 = 0x4\n 19278: a1 = s1 + 0x100\n 19282: u64 [s1 + 264] = 0\n 19286: ra = 632, jump @19\n      : @665 [@dyn 316] (gas: 2)\n 19292: a1 = i32 [0x200fc]\n 19297: jump @667 if a1 >u 63\n      : @666 (gas: 3)\n 19301: u32 [0x200fc] = 0x40\n 19307: a1 = 0x20110\n 19312: jump @705\n      : @667 (gas: 2)\n 19315: a1 = 0x20110\n 19320: jump @705\n      : @668 (gas: 1)\n 19323: jump @725 if a0 != 581501058\n      : @669 (gas: 10)\n 19331: a0 = s1 + 0x1078\n 19335: u64 [a0 + 1344] = 0\n 19339: u64 [a0 + 1336] = 0\n 19343: u64 [a0 + 1328] = 0\n 19347: u64 [a0 + 1320] = 0\n 19351: a0 = s1 + 0x1000\n 19355: i32 a0 = a0 + 0x5a0\n 19359: ra = 0x27a\n 19363: ecalli 11 // 'value_transferred'\n 19365: fallthrough\n      : @670 [@dyn 317] (gas: 3)\n 19366: a3 = s1 + 0x1078\n 19370: a4 = a3 + 0x500\n 19374: t0 = 636, jump @936\n      : @671 [@dyn 318] (gas: 1)\n 19380: jump @732 if a0 == 0\n      : @672 (gas: 6)\n 19384: a1 = 0x20110\n 19389: i32 a1 = a1 + 0\n 19391: a0 = 0x1\n 19394: a2 = 0\n 19396: ecalli 8 // 'seal_return'\n 19398: jump @732\n      : @673 (gas: 6)\n 19401: a1 = 0x20110\n 19406: i32 a1 = a1 + 0\n 19408: a0 = 0x1\n 19411: a2 = 0\n 19413: ecalli 8 // 'seal_return'\n 19415: jump @732\n      : @674 (gas: 6)\n 19418: a1 = 0x20110\n 19423: i32 a1 = a1 + 0\n 19425: a0 = 0x1\n 19428: a2 = 0\n 19430: ecalli 8 // 'seal_return'\n 19432: jump @732\n      : @675 (gas: 6)\n 19435: a1 = 0x20110\n 19440: i32 a1 = a1 + 0\n 19442: a0 = 0x1\n 19445: a2 = 0\n 19447: ecalli 8 // 'seal_return'\n 19449: jump @732\n      : @676 (gas: 6)\n 19452: a1 = 0x20110\n 19457: i32 a1 = a1 + 0\n 19459: a0 = 0x1\n 19462: a2 = 0\n 19464: ecalli 8 // 'seal_return'\n 19466: jump @732\n      : @677 (gas: 6)\n 19469: a1 = 0x20110\n 19474: i32 a1 = a1 + 0\n 19476: a0 = 0x1\n 19479: a2 = 0\n 19481: ecalli 8 // 'seal_return'\n 19483: jump @732\n      : @678 (gas: 6)\n 19486: a1 = 0x20110\n 19491: i32 a1 = a1 + 0\n 19493: a0 = 0x1\n 19496: a2 = 0\n 19498: ecalli 8 // 'seal_return'\n 19500: jump @732\n      : @679 (gas: 6)\n 19503: a1 = 0x20110\n 19508: i32 a1 = a1 + 0\n 19510: a0 = 0x1\n 19513: a2 = 0\n 19515: ecalli 8 // 'seal_return'\n 19517: jump @732\n      : @680 (gas: 6)\n 19520: a1 = 0x20110\n 19525: i32 a1 = a1 + 0\n 19527: a0 = 0x1\n 19530: a2 = 0\n 19532: ecalli 8 // 'seal_return'\n 19534: jump @732\n      : @681 (gas: 8)\n 19537: u64 [s1 + 688] = 0\n 19541: u64 [s1 + 680] = 0\n 19545: u64 [s1 + 672] = 0\n 19549: a0 = 0xe602df0500000000\n 19559: a1 = s1 + 0x2a0\n 19563: u64 [s1 + 0x2b8] = a0\n 19567: a0 = 0\n 19569: ra = 638, jump @19\n      : @682 [@dyn 319] (gas: 7)\n 19575: u64 [s1 + 664] = 0\n 19579: u64 [s1 + 656] = 0\n 19583: u64 [s1 + 648] = 0\n 19587: a0 = 0x4\n 19590: a1 = s1 + 0x280\n 19594: u64 [s1 + 640] = 0\n 19598: ra = 640, jump @19\n      : @683 [@dyn 320] (gas: 2)\n 19604: a1 = i32 [0x200fc]\n 19609: jump @685 if a1 >u 63\n      : @684 (gas: 3)\n 19613: u32 [0x200fc] = 0x40\n 19619: a1 = 0x20110\n 19624: jump @705\n      : @685 (gas: 2)\n 19627: a1 = 0x20110\n 19632: jump @705\n      : @686 (gas: 8)\n 19635: u64 [s1 + 752] = 0\n 19639: u64 [s1 + 744] = 0\n 19643: u64 [s1 + 736] = 0\n 19647: a0 = 0x94280d6200000000\n 19657: a1 = s1 + 0x2e0\n 19661: u64 [s1 + 0x2f8] = a0\n 19665: a0 = 0\n 19667: ra = 642, jump @19\n      : @687 [@dyn 321] (gas: 7)\n 19673: u64 [s1 + 728] = 0\n 19677: u64 [s1 + 720] = 0\n 19681: u64 [s1 + 712] = 0\n 19685: a0 = 0x4\n 19688: a1 = s1 + 0x2c0\n 19692: u64 [s1 + 704] = 0\n 19696: ra = 644, jump @19\n      : @688 [@dyn 322] (gas: 2)\n 19702: a1 = i32 [0x200fc]\n 19707: jump @690 if a1 >u 63\n      : @689 (gas: 3)\n 19711: u32 [0x200fc] = 0x40\n 19717: a1 = 0x20110\n 19722: jump @705\n      : @690 (gas: 2)\n 19725: a1 = 0x20110\n 19730: jump @705\n      : @691 (gas: 6)\n 19733: a1 = 0x20110\n 19738: i32 a1 = a1 + 0\n 19740: a0 = 0x1\n 19743: a2 = 0\n 19745: ecalli 8 // 'seal_return'\n 19747: jump @732\n      : @692 (gas: 6)\n 19750: a1 = 0x20110\n 19755: i32 a1 = a1 + 0\n 19757: a0 = 0x1\n 19760: a2 = 0\n 19762: ecalli 8 // 'seal_return'\n 19764: jump @732\n      : @693 (gas: 6)\n 19767: a1 = 0x20110\n 19772: i32 a1 = a1 + 0\n 19774: a0 = 0x1\n 19777: a2 = 0\n 19779: ecalli 8 // 'seal_return'\n 19781: jump @732\n      : @694 (gas: 6)\n 19784: a1 = 0x20110\n 19789: i32 a1 = a1 + 0\n 19791: a0 = 0x1\n 19794: a2 = 0\n 19796: ecalli 8 // 'seal_return'\n 19798: jump @732\n      : @695 (gas: 8)\n 19801: u64 [s1 + 1296] = 0\n 19805: u64 [s1 + 1288] = 0\n 19809: u64 [s1 + 1280] = 0\n 19813: a0 = 0xec442f0500000000\n 19823: a1 = s1 + 0x500\n 19827: u64 [s1 + 0x518] = a0\n 19831: a0 = 0\n 19833: ra = 646, jump @19\n      : @696 [@dyn 323] (gas: 7)\n 19839: u64 [s1 + 1272] = 0\n 19843: u64 [s1 + 1264] = 0\n 19847: u64 [s1 + 1256] = 0\n 19851: a0 = 0x4\n 19854: a1 = s1 + 0x4e0\n 19858: u64 [s1 + 1248] = 0\n 19862: ra = 648, jump @19\n      : @697 [@dyn 324] (gas: 3)\n 19868: a0 = u64 [s1 + 0xf0]\n 19872: a0 = i32 [a0]\n 19874: jump @699 if a0 >u 63\n      : @698 (gas: 3)\n 19878: a1 = u64 [s1 + 0xf0]\n 19882: u32 [a1 + 0] = 0x40\n 19885: fallthrough\n      : @699 (gas: 5)\n 19886: a0 = 0x1\n 19889: a2 = 0x24\n 19892: a1 = u64 [s1 + 0xe8]\n 19896: ecalli 8 // 'seal_return'\n 19898: fallthrough\n      : @700 (gas: 12)\n 19899: a0 = s1 + 0x7ff\n 19903: a0 = a0 + 0x71\n 19906: u64 [a0 + 1600] = 0\n 19910: u64 [a0 + 1592] = 0\n 19914: u64 [a0 + 1584] = 0\n 19918: a2 = a0\n 19920: a0 = 0x4e487b7100000000\n 19930: a1 = s1 + 0x7ff\n 19934: a1 = a1 + 0x6a1\n 19938: u64 [a2 + 0x648] = a0\n 19942: a0 = 0\n 19944: ra = 650, jump @19\n      : @701 [@dyn 325] (gas: 11)\n 19950: a1 = s1 + 0x7ff\n 19954: a1 = a1 + 0x71\n 19957: u64 [a1 + 1576] = 0\n 19961: u64 [a1 + 1568] = 0\n 19965: u64 [a1 + 1552] = 0x41\n 19970: a2 = a1\n 19972: a0 = 0x4\n 19975: a1 = s1 + 0x7ff\n 19979: a1 = a1 + 0x681\n 19983: u64 [a2 + 1560] = 0\n 19987: ra = 652, jump @19\n      : @702 [@dyn 326] (gas: 2)\n 19993: a1 = i32 [0x200fc]\n 19998: jump @704 if a1 >u 63\n      : @703 (gas: 3)\n 20002: u32 [0x200fc] = 0x40\n 20008: a1 = 0x20110\n 20013: jump @705\n      : @704 (gas: 2)\n 20015: a1 = 0x20110\n 20020: fallthrough\n      : @705 (gas: 5)\n 20021: i32 a1 = a1 + 0\n 20023: a0 = 0x1\n 20026: a2 = 0x24\n 20029: ecalli 8 // 'seal_return'\n 20031: fallthrough\n      : @706 (gas: 9)\n 20032: u64 [a3 + 128] = 0\n 20036: u64 [a3 + 120] = 0\n 20039: u64 [a3 + 112] = 0\n 20042: a0 = 0xfb8f41b200000000\n 20052: a1 = s1 + 0x7ff\n 20056: a1 = a1 + 0xe1\n 20060: u64 [a3 + 0x88] = a0\n 20064: a0 = 0\n 20066: ra = 654, jump @19\n      : @707 [@dyn 327] (gas: 5)\n 20072: a0 = u64 [s1 + 0x80]\n 20076: ra = 0x290\n 20080: ecalli 3 // 'caller'\n 20082: t0 = 0x292\n 20086: jump @920\n      : @708 [@dyn 328] (gas: 1)\n 20089: t0 = 658, jump @920\n      : @709 [@dyn 329] (gas: 8)\n 20095: u64 [a2 + 104] = 0\n 20098: u64 [a2 + 0x60] = a1\n 20101: u64 [a2 + 0x58] = a0\n 20104: a0 = 0x4\n 20107: a1 = s1 + 0x7ff\n 20111: a1 = a1 + 0xc1\n 20115: u64 [a2 + 0x50] = a3\n 20118: ra = 660, jump @19\n      : @710 [@dyn 330] (gas: 14)\n 20124: a2 = s1 + 0x7ff\n 20128: a2 = a2 + 0x71\n 20131: a0 = u64 [s1 + 0x60]\n 20134: u64 [a2 + 0x48] = a0\n 20137: a0 = u64 [s1 + 0x58]\n 20140: u64 [a2 + 0x40] = a0\n 20143: a0 = u64 [s1 + 0x68]\n 20146: u64 [a2 + 0x38] = a0\n 20149: a0 = 0x24\n 20152: a1 = s1 + 0x7ff\n 20156: a1 = a1 + 0xa1\n 20160: a3 = u64 [s1 + 0x70]\n 20163: u64 [a2 + 0x30] = a3\n 20166: ra = 662, jump @19\n      : @711 [@dyn 331] (gas: 15)\n 20172: a0 = u64 [s1 + 0xe0]\n 20176: a1 = s1 + 0x7ff\n 20180: a1 = a1 + 0x71\n 20183: u64 [a1 + 0x28] = a0\n 20186: a0 = u64 [s1 + 0xd0]\n 20190: u64 [a1 + 0x20] = a0\n 20193: a0 = u64 [s1 + 0xc0]\n 20197: u64 [a1 + 0x18] = a0\n 20200: a3 = a1\n 20202: a0 = 0x44\n 20205: a1 = s1 + 0x7ff\n 20209: a1 = a1 + 0x81\n 20213: a2 = u64 [s1 + 0xc8]\n 20217: u64 [a3 + 0x10] = a2\n 20220: ra = 664, jump @19\n      : @712 [@dyn 332] (gas: 3)\n 20226: a0 = u64 [s1 + 0xb8]\n 20230: a0 = i32 [a0]\n 20232: jump @714 if a0 >u 127\n      : @713 (gas: 5)\n 20236: a1 = u64 [s1 + 0xb8]\n 20240: u32 [a1 + 0] = 0x80\n 20244: a0 = 0x1\n 20247: a2 = 0x64\n 20250: jump @722\n      : @714 (gas: 7)\n 20253: a0 = 0x1\n 20256: a2 = 0x64\n 20259: a1 = u64 [s1 + 0xd8]\n 20263: ecalli 8 // 'seal_return'\n 20265: u64 [s1 + 0xf8] = a1\n 20269: ra = 0x2a0\n 20273: jump @26\n      : @715 (gas: 12)\n 20276: a0 = s1 + 0x7ff\n 20280: a0 = a0 + 0x71\n 20283: u64 [a0 + 192] = 0\n 20287: u64 [a0 + 184] = 0\n 20291: u64 [a0 + 176] = 0\n 20295: a2 = a0\n 20297: a0 = 0xe602df0500000000\n 20307: a1 = s1 + 0x7ff\n 20311: a1 = a1 + 0x121\n 20315: u64 [a2 + 0xc8] = a0\n 20319: a0 = 0\n 20321: ra = 666, jump @19\n      : @716 [@dyn 333] (gas: 12)\n 20327: a0 = s1 + 0x7ff\n 20331: a0 = a0 + 0x71\n 20334: u64 [a0 + 168] = 0\n 20338: u64 [a0 + 160] = 0\n 20342: u64 [a0 + 152] = 0\n 20346: a2 = a0\n 20348: a0 = 0x4\n 20351: a1 = s1 + 0x7ff\n 20355: a1 = a1 + 0x101\n 20359: u64 [a2 + 144] = 0\n 20363: ra = 0x29e\n 20367: jump @19\n      : @717 (gas: 12)\n 20370: a0 = s1 + 0x7ff\n 20374: a0 = a0 + 0x71\n 20377: u64 [a0 + 256] = 0\n 20381: u64 [a0 + 248] = 0\n 20385: u64 [a0 + 240] = 0\n 20389: a2 = a0\n 20391: a0 = 0x94280d6200000000\n 20401: a1 = s1 + 0x7ff\n 20405: a1 = a1 + 0x161\n 20409: u64 [a2 + 0x108] = a0\n 20413: a0 = 0\n 20415: ra = 668, jump @19\n      : @718 [@dyn 334] (gas: 11)\n 20421: a0 = s1 + 0x7ff\n 20425: a0 = a0 + 0x71\n 20428: u64 [a0 + 232] = 0\n 20432: u64 [a0 + 224] = 0\n 20436: u64 [a0 + 216] = 0\n 20440: a2 = a0\n 20442: a0 = 0x4\n 20445: a1 = s1 + 0x7ff\n 20449: a1 = a1 + 0x141\n 20453: u64 [a2 + 208] = 0\n 20457: ra = 670, jump @19\n      : @719 [@dyn 335] (gas: 3)\n 20463: a0 = u64 [s1 + 0xb8]\n 20467: a0 = i32 [a0]\n 20469: jump @721 if a0 >u 63\n      : @720 (gas: 5)\n 20473: a1 = u64 [s1 + 0xb8]\n 20477: u32 [a1 + 0] = 0x40\n 20480: a0 = 0x1\n 20483: a2 = 0x24\n 20486: jump @722\n      : @721 (gas: 7)\n 20488: a0 = 0x1\n 20491: a2 = 0x24\n 20494: a1 = u64 [s1 + 0xd8]\n 20498: ecalli 8 // 'seal_return'\n 20500: u64 [s1 + 0xf8] = a1\n 20504: ra = 0x2a0\n 20508: jump @26\n      : @722 (gas: 5)\n 20511: a1 = u64 [s1 + 0xd8]\n 20515: ecalli 8 // 'seal_return'\n 20517: u64 [s1 + 0xf8] = a1\n 20521: ra = 0x2a0\n 20525: jump @26\n      : @723 (gas: 2)\n 20528: u64 [s1 + 0xf8] = a1\n 20532: ra = 672, jump @26\n      : @724 [@dyn 336] (gas: 5)\n 20538: i32 a1 = a0 + 0\n 20540: a2 = i32 [s1 + 0xf8]\n 20544: a0 = 0\n 20546: ecalli 8 // 'seal_return'\n 20548: jump @605\n      : @725 (gas: 2)\n 20551: a2 = s1 + 0x1078\n 20555: jump @730 if a0 != 1212913468\n      : @726 (gas: 10)\n 20562: u64 [a2 + 1632] = 0\n 20566: u64 [a2 + 1624] = 0\n 20570: u64 [a2 + 1616] = 0\n 20574: u64 [a2 + 1608] = 0\n 20578: a0 = s1 + 0x1000\n 20582: i32 a0 = a0 + 0x6c0\n 20586: ra = 0x2a2\n 20590: ecalli 11 // 'value_transferred'\n 20592: t0 = 0x2a4\n 20596: jump @931\n      : @727 [@dyn 337] (gas: 1)\n 20599: t0 = 676, jump @931\n      : @728 [@dyn 338] (gas: 8)\n 20605: a0 = u64 [a4 + 0x58]\n 20608: a1 = u64 [a4 + 0x60]\n 20611: a2 = u64 [a4 + 0x50]\n 20614: a3 = u64 [a4 + 0x48]\n 20617: a1 = a1 | a2\n 20620: a0 = a0 | a3\n 20623: a0 = a0 | a1\n 20626: jump @734 if a0 == 0\n      : @729 (gas: 6)\n 20629: a1 = 0x20110\n 20634: i32 a1 = a1 + 0\n 20636: a0 = 0x1\n 20639: a2 = 0\n 20641: ecalli 8 // 'seal_return'\n 20643: jump @732\n      : @730 (gas: 6)\n 20645: a1 = 0x20110\n 20650: i32 a1 = a1 + 0\n 20652: a0 = 0x1\n 20655: a2 = 0\n 20657: ecalli 8 // 'seal_return'\n 20659: jump @732\n      : @731 (gas: 5)\n 20661: i32 a1 = a1 + 0\n 20663: a0 = 0x1\n 20666: a2 = 0\n 20668: ecalli 8 // 'seal_return'\n 20670: fallthrough\n      : @732 (gas: 3)\n 20671: a0 = u64 [s1 + 0xf8]\n 20675: a0 = i32 [a0]\n 20677: jump @736 if a0 >u 35\n      : @733 (gas: 2)\n 20681: a1 = 0x20110\n 20686: jump @731\n      : @734 (gas: 4)\n 20688: a0 = u64 [s1 + 0xf8]\n 20692: a0 = i32 [a0]\n 20694: a1 = 0x43\n 20697: jump @742 if a1 <u a0\n      : @735 (gas: 2)\n 20701: a1 = 0x20110\n 20706: jump @731\n      : @736 (gas: 8)\n 20708: a1 = s1 + 0x1078\n 20712: u64 [a1 + 1376] = 0\n 20716: u64 [a1 + 1368] = 0\n 20720: u64 [a1 + 1360] = 0\n 20724: u64 [a1 + 1352] = 0x7\n 20729: a0 = s1 + 0x7c0\n 20733: a1 = s1 + 0x15c0\n 20737: ra = 678, jump @21\n      : @737 [@dyn 339] (gas: 14)\n 20743: a0 = u64 [s1 + 0x7c8]\n 20747: u64 [s1 + 0xf8] = a0\n 20751: a0 = u64 [s1 + 0x7c0]\n 20755: u64 [s1 + 0xf0] = a0\n 20759: a0 = u32 [s1 + 0x7d0]\n 20763: u64 [s1 + 0xe8] = a0\n 20767: a0 = 0x30110\n 20772: u64 [s1 + 0xe0] = a0\n 20776: i32 a0 = a0 + 0\n 20778: ra = 0x2a8\n 20782: ecalli 3 // 'caller'\n 20784: a2 = u64 [s1 + 0xe0]\n 20788: t0 = 0x2aa\n 20792: jump @926\n      : @738 [@dyn 340] (gas: 2)\n 20795: a2 = u64 [s1 + 0xe0]\n 20799: t0 = 682, jump @926\n      : @739 [@dyn 341] (gas: 15)\n 20805: a2 = u64 [s1 + 0xe8]\n 20809: a1 = a1 ^ a2\n 20812: a2 = u64 [s1 + 0xf0]\n 20816: a0 = a0 ^ a2\n 20819: a0 = a0 | a1\n 20822: a1 = u64 [s1 + 0xf8]\n 20826: a1 = a1 ^ a3\n 20829: a0 = a0 | a1\n 20832: a0 = a0 <u 0x1\n 20835: u64 [s1 + 1976] = 0\n 20839: u64 [s1 + 1968] = 0\n 20843: u64 [s1 + 0x7a0] = a0\n 20847: a0 = s1 + 0x7a0\n 20851: u64 [s1 + 1960] = 0\n 20855: ra = 684, jump @832\n      : @740 [@dyn 342] (gas: 21)\n 20861: a0 = s1 + 0x1000\n 20865: i32 a0 = a0 + 0x5e0\n 20869: a1 = 0x4\n 20872: ecalli 1 // 'call_data_load'\n 20874: a5 = s1 + 0x1078\n 20878: a0 = u64 [a5 + 0x568]\n 20882: a1 = u64 [a5 + 0x570]\n 20886: a2 = u64 [a5 + 0x578]\n 20890: a3 = u64 [a5 + 0x580]\n 20894: u64 [a5 + 1440] = 0\n 20898: u64 [a5 + 1432] = 0\n 20902: u64 [a5 + 1424] = 0\n 20906: u64 [a5 + 1416] = 0x6\n 20911: a4 = a5 + 0x500\n 20915: u64 [a4 + 0xc0] = a3\n 20919: u64 [a4 + 0xb8] = a2\n 20923: u64 [a4 + 0xb0] = a1\n 20927: u64 [a4 + 0xa8] = a0\n 20931: a0 = s1 + 0x1600\n 20935: a1 = s1 + 0x1620\n 20939: ra = 686, jump @22\n      : @741 [@dyn 343] (gas: 6)\n 20945: a1 = 0x20110\n 20950: i32 a1 = a1 + 0\n 20952: a0 = 0\n 20954: a2 = 0\n 20956: ecalli 8 // 'seal_return'\n 20958: jump @732\n      : @742 (gas: 5)\n 20961: a0 = s1 + 0x7ff\n 20965: a0 = a0 + 0x3e1\n 20969: ra = 0x2b0\n 20973: t0 = 0x2f4\n 20977: jump @954\n      : @743 [@dyn 344] (gas: 20)\n 20980: a1 = s1 + 0x7ff\n 20984: a1 = a1 + 0x71\n 20987: a2 = a1 + 0x300\n 20991: a0 = u64 [a2 + 0x88]\n 20995: u64 [s1 + 0xe0] = a0\n 20999: a0 = u64 [a2 + 0x80]\n 21003: u64 [s1 + 0xe8] = a0\n 21007: a0 = u64 [a2 + 0x78]\n 21010: u64 [s1 + 0xf0] = a0\n 21014: a0 = u64 [a2 + 0x70]\n 21017: u64 [s1 + 0xf8] = a0\n 21021: a1 = s1 + 0x1078\n 21025: u64 [a1 + 1664] = 0\n 21029: u64 [a1 + 1656] = 0\n 21033: u64 [a1 + 1648] = 0\n 21037: u64 [a1 + 1640] = 0x7\n 21042: a0 = s1 + 0x7ff\n 21046: a0 = a0 + 0x3c1\n 21050: a1 = s1 + 0x16e0\n 21054: ra = 690, jump @21\n      : @744 [@dyn 345] (gas: 16)\n 21060: a0 = s1 + 0x7ff\n 21064: a0 = a0 + 0x71\n 21067: a1 = u64 [a0 + 0x358]\n 21071: u64 [s1 + 0xd8] = a1\n 21075: a1 = u64 [a0 + 0x350]\n 21079: u64 [s1 + 0xd0] = a1\n 21083: a0 = u32 [a0 + 0x360]\n 21087: u64 [s1 + 0xc8] = a0\n 21091: a0 = 0x30110\n 21096: u64 [s1 + 0xc0] = a0\n 21100: i32 a0 = a0 + 0\n 21102: ra = 0x2b4\n 21106: ecalli 3 // 'caller'\n 21108: a2 = u64 [s1 + 0xc0]\n 21112: t0 = 0x2b6\n 21116: jump @926\n      : @745 [@dyn 346] (gas: 2)\n 21119: a2 = u64 [s1 + 0xc0]\n 21123: t0 = 694, jump @926\n      : @746 [@dyn 347] (gas: 18)\n 21129: a2 = u64 [s1 + 0xc8]\n 21133: a1 = a1 ^ a2\n 21136: a2 = u64 [s1 + 0xd0]\n 21140: a0 = a0 ^ a2\n 21143: a0 = a0 | a1\n 21146: a1 = u64 [s1 + 0xd8]\n 21150: a1 = a1 ^ a3\n 21153: a0 = a0 | a1\n 21156: a0 = a0 <u 0x1\n 21159: a1 = s1 + 0x7ff\n 21163: a1 = a1 + 0x71\n 21166: u64 [a1 + 840] = 0\n 21170: u64 [a1 + 832] = 0\n 21174: u64 [a1 + 0x330] = a0\n 21178: a0 = s1 + 0x7ff\n 21182: a0 = a0 + 0x3a1\n 21186: u64 [a1 + 824] = 0\n 21190: ra = 696, jump @832\n      : @747 [@dyn 348] (gas: 8)\n 21196: a0 = u64 [s1 + 0xe8]\n 21200: a0 = a0 << 0x20\n 21203: a0 = a0 >> 0x20\n 21206: a1 = u64 [s1 + 0xf0]\n 21210: a2 = u64 [s1 + 0xf8]\n 21214: a1 = a1 | a2\n 21217: a0 = a0 | a1\n 21220: jump @752 if a0 == 0\n      : @748 (gas: 7)\n 21224: a0 = s1 + 0x1000\n 21228: i32 a0 = a0 + 0x700\n 21232: a1 = 0x24\n 21235: ra = 0x2ba\n 21239: ecalli 1 // 'call_data_load'\n 21241: t0 = 0x2bc\n 21245: jump @931\n      : @749 [@dyn 349] (gas: 1)\n 21248: t0 = 700, jump @931\n      : @750 [@dyn 350] (gas: 24)\n 21254: a0 = u64 [a4 + 0x88]\n 21258: a1 = u64 [a4 + 0x90]\n 21262: a2 = u64 [a4 + 0x98]\n 21266: a3 = u64 [a4 + 0xa0]\n 21270: a4 = s1 + 0x7ff\n 21274: a4 = a4 + 0x71\n 21277: a5 = a4 + 0x300\n 21281: u64 [a5 + 0x8] = a3\n 21284: u64 [a5] = a2\n 21286: u64 [a4 + 0x2f8] = a1\n 21290: u64 [a4 + 0x2f0] = a0\n 21294: a0 = u64 [s1 + 0xe0]\n 21298: u64 [a5 + 0x28] = a0\n 21301: a0 = u64 [s1 + 0xe8]\n 21305: u64 [a5 + 0x20] = a0\n 21308: a0 = u64 [s1 + 0xf0]\n 21312: u64 [a5 + 0x18] = a0\n 21315: a0 = s1 + 0x7ff\n 21319: a0 = a0 + 0x381\n 21323: a1 = s1 + 0x7ff\n 21327: a1 = a1 + 0x361\n 21331: a2 = u64 [s1 + 0xf8]\n 21335: u64 [a5 + 0x10] = a2\n 21338: ra = 702, jump @896\n      : @751 [@dyn 351] (gas: 6)\n 21344: a1 = 0x20110\n 21349: i32 a1 = a1 + 0\n 21351: a0 = 0\n 21353: a2 = 0\n 21355: ecalli 8 // 'seal_return'\n 21357: jump @732\n      : @752 (gas: 12)\n 21360: a0 = s1 + 0x7ff\n 21364: a0 = a0 + 0x71\n 21367: u64 [a0 + 736] = 0\n 21371: u64 [a0 + 728] = 0\n 21375: u64 [a0 + 720] = 0\n 21379: a2 = a0\n 21381: a0 = 0xec442f0500000000\n 21391: a1 = s1 + 0x7ff\n 21395: a1 = a1 + 0x341\n 21399: u64 [a2 + 0x2e8] = a0\n 21403: a0 = 0\n 21405: ra = 704, jump @19\n      : @753 [@dyn 352] (gas: 11)\n 21411: a0 = s1 + 0x7ff\n 21415: a0 = a0 + 0x71\n 21418: u64 [a0 + 712] = 0\n 21422: u64 [a0 + 704] = 0\n 21426: u64 [a0 + 696] = 0\n 21430: a2 = a0\n 21432: a0 = 0x4\n 21435: a1 = s1 + 0x7ff\n 21439: a1 = a1 + 0x321\n 21443: u64 [a2 + 688] = 0\n 21447: ra = 706, jump @19\n      : @754 [@dyn 353] (gas: 2)\n 21453: a1 = i32 [0x200fc]\n 21458: jump @756 if a1 >u 63\n      : @755 (gas: 3)\n 21462: u32 [0x200fc] = 0x40\n 21468: a1 = 0x20110\n 21473: jump @705\n      : @756 (gas: 2)\n 21476: a1 = 0x20110\n 21481: jump @705\n      : @757 (gas: 17)\n 21484: sp = sp + 0xffffffffffffff30\n 21488: u64 [sp + 0xc8] = ra\n 21492: u64 [sp + 0xc0] = s0\n 21496: u64 [sp + 0xb8] = s1\n 21500: s0 = sp + 0xd0\n 21504: sp = sp & 0xfffffffffffffff0\n 21507: a2 = u64 [a1 + 0x18]\n 21510: u64 [sp + 0x10] = a2\n 21513: a2 = u64 [a1 + 0x10]\n 21516: u64 [sp + 0x8] = a2\n 21519: a2 = u64 [a1 + 0x8]\n 21522: u64 [sp] = a2\n 21524: s1 = u64 [a1]\n 21526: u64 [sp + 0x28] = a0\n 21529: a0 = sp + 0x90\n 21533: a1 = 0x40\n 21536: ra = 708, jump @17\n      : @758 [@dyn 354] (gas: 39)\n 21542: a1 = u64 [sp + 0x98]\n 21546: a2 = u64 [sp + 0x90]\n 21550: a0 = s1 + 0x1f\n 21553: ra = a0 <u s1\n 21556: a3 = u64 [sp]\n 21558: a4 = a3 + ra\n 21561: a0 = a0 & 0xffffffffffffffe0\n 21564: t1 = a1 + a4\n 21567: t0 = a2 + a0\n 21570: u64 [sp + 0x20] = a2\n 21573: a5 = t0 <u a2\n 21576: t1 = t1 + a5\n 21579: s1 = t1 ^ a1\n 21582: u64 [sp + 0x18] = a1\n 21585: a2 = t1 <u a1\n 21588: a2 = a5 if s1 == 0\n 21591: t2 = u64 [sp + 0xa8]\n 21595: a4 = a4 <u a3\n 21598: s1 = u64 [sp + 0xa0]\n 21602: a4 = ra if ra == 0\n 21605: a0 = u64 [sp + 0x8]\n 21608: a4 = a4 + a0\n 21611: a5 = a4 <u a0\n 21614: a4 = a4 + s1\n 21617: a3 = a4 + a2\n 21620: a0 = u64 [sp + 0x10]\n 21623: a0 = a0 + t2\n 21626: a0 = a0 + a5\n 21629: a5 = a3 <u a4\n 21632: a4 = a4 <u s1\n 21635: a0 = a0 + a4\n 21638: a4 = a0 + a5\n 21641: a0 = a4 >u 0\n 21643: a5 = a3 >u 0\n 21645: a5 = a0 if a4 != 0\n 21648: a0 = a3 | a4\n 21651: a1 = t1 >u 0\n 21653: a1 = a5 if a0 != 0\n 21656: jump @762 if a1 != 0\n      : @759 (gas: 8)\n 21659: a0 = a3 <u s1\n 21662: a1 = a4 ^ t2\n 21665: a5 = a4 <u t2\n 21668: a5 = a0 if a1 == 0\n 21671: a0 = a3 ^ s1\n 21674: a0 = a0 | a1\n 21677: a2 = a5 if a0 != 0\n 21680: jump @762 if a2 != 0\n      : @760 (gas: 8)\n 21683: u64 [sp + 0x70] = t0\n 21686: u64 [sp + 0x78] = t1\n 21689: u64 [sp + 0x80] = a3\n 21693: a0 = 0x40\n 21696: a1 = sp + 0x70\n 21699: u64 [sp + 0x88] = a4\n 21703: u64 [sp + 0x10] = t2\n 21706: ra = 710, jump @19\n      : @761 [@dyn 355] (gas: 14)\n 21712: a0 = u64 [sp + 0x28]\n 21715: a1 = u64 [sp + 0x10]\n 21718: u64 [a0 + 0x18] = a1\n 21721: u64 [a0 + 0x10] = s1\n 21724: a1 = u64 [sp + 0x18]\n 21727: u64 [a0 + 0x8] = a1\n 21730: a1 = u64 [sp + 0x20]\n 21733: u64 [a0] = a1\n 21735: sp = s0 + 0xffffffffffffff30\n 21739: ra = u64 [sp + 0xc8]\n 21743: s0 = u64 [sp + 0xc0]\n 21747: s1 = u64 [sp + 0xb8]\n 21751: sp = sp + 0xd0\n 21755: ret\n      : @762 (gas: 6)\n 21757: u64 [sp + 96] = 0\n 21760: u64 [sp + 88] = 0\n 21763: u64 [sp + 80] = 0\n 21766: t0 = 0x2c8\n 21770: a0 = 0x4e487b7100000000\n 21780: fallthrough\n      : @763 [@dyn 356] (gas: 4)\n 21781: a1 = sp + 0x50\n 21784: u64 [sp + 0x68] = a0\n 21787: a0 = 0\n 21789: ra = 714, jump @19\n      : @764 [@dyn 357] (gas: 7)\n 21795: u64 [sp + 72] = 0\n 21798: u64 [sp + 64] = 0\n 21801: u64 [sp + 48] = 0x41\n 21805: a0 = 0x4\n 21808: a1 = sp + 0x30\n 21811: u64 [sp + 56] = 0\n 21814: ra = 716, jump @19\n      : @765 [@dyn 358] (gas: 2)\n 21820: a1 = i32 [0x200fc]\n 21825: jump @767 if a1 >u 63\n      : @766 (gas: 2)\n 21829: u32 [0x200fc] = 0x40\n 21835: fallthrough\n      : @767 (gas: 7)\n 21836: a1 = 0x20110\n 21841: i32 a1 = a1 + 0\n 21843: a0 = 0x1\n 21846: a2 = 0x24\n 21849: ra = 0x2ce\n 21853: ecalli 8 // 'seal_return'\n 21855: fallthrough\n      : @768 [@dyn 359] (gas: 37)\n 21856: sp = sp + 0xfffffffffffffe70\n 21860: u64 [sp + 0x188] = ra\n 21864: u64 [sp + 0x180] = s0\n 21868: u64 [sp + 0x178] = s1\n 21872: s0 = sp + 0x190\n 21876: sp = sp & 0xfffffffffffffff0\n 21879: t2 = u64 [a1]\n 21881: a4 = u64 [a2 + 0x8]\n 21884: ra = u64 [a1 + 0x8]\n 21887: s1 = u64 [a2]\n 21889: a3 = t2 + 0x1f\n 21892: t0 = a3 <u t2\n 21895: a5 = ra + t0\n 21898: u64 [sp + 0x20] = s1\n 21901: t1 = a3 <u s1\n 21904: a3 = a5 ^ a4\n 21907: u64 [sp + 0x28] = a4\n 21910: a4 = a5 <u a4\n 21913: a4 = t1 if a3 == 0\n 21916: s1 = u64 [a1 + 0x10]\n 21919: a3 = a5 <u ra\n 21922: a3 = t0 if t0 == 0\n 21925: a5 = u64 [a2 + 0x18]\n 21928: t0 = u64 [a1 + 0x18]\n 21931: t1 = u64 [a2 + 0x10]\n 21934: a3 = a3 + s1\n 21937: a1 = a3 <u s1\n 21940: a1 = a1 + t0\n 21943: a2 = a1 ^ a5\n 21946: u64 [sp + 0x10] = a5\n 21949: a1 = a1 <s a5\n 21952: a5 = a3 <u t1\n 21955: a1 = a5 if a2 == 0\n 21958: a3 = a3 ^ t1\n 21961: a2 = a2 | a3\n 21964: a4 = a1 if a2 != 0\n 21967: jump @786 if a4 == 0\n      : @769 (gas: 13)\n 21971: u64 [sp + 0x8] = a0\n 21974: u64 [sp + 0x18] = t1\n 21977: a0 = t2 | s1\n 21980: u64 [sp + 0x38] = ra\n 21983: u64 [sp + 0x30] = t0\n 21986: a1 = ra | t0\n 21989: a0 = a0 | a1\n 21992: a0 = a0 >> 0x20\n 21995: u64 [sp + 0x58] = s1\n 21998: a1 = a1 | s1\n 22001: a1 = a1 << 0x20\n 22004: a0 = a0 | a1\n 22007: jump @785 if a0 != 0\n      : @770 (gas: 4)\n 22011: a0 = sp + 0x150\n 22015: u64 [sp + 0x50] = t2\n 22018: a1 = t2\n 22020: ra = 720, jump @17\n      : @771 [@dyn 360] (gas: 12)\n 22026: a3 = u64 [sp + 0x168]\n 22030: a2 = u64 [sp + 0x160]\n 22034: a4 = u64 [sp + 0x158]\n 22038: a0 = a3 >u 0\n 22040: a1 = a2 >u 0\n 22042: a1 = a0 if a3 != 0\n 22045: u64 [sp + 0x80] = a2\n 22049: u64 [sp + 0x88] = a3\n 22053: a0 = a2 | a3\n 22056: a2 = a4 >u 0\n 22058: a2 = a1 if a0 != 0\n 22061: jump @787 if a2 != 0\n      : @772 (gas: 20)\n 22065: a1 = u64 [sp + 0x150]\n 22069: a0 = a1 + 0x1f\n 22072: u64 [sp + 0x48] = a1\n 22075: a1 = a0 <u a1\n 22078: u64 [sp + 0x78] = a4\n 22081: a1 = a1 + a4\n 22084: a1 = a1 & 0x1\n 22087: a0 = a0 & 0xffffffffffffffe0\n 22090: a2 = a0 + 0x20\n 22093: a0 = a2 <u a0\n 22096: a3 = a1 + a0\n 22099: a4 = a3 <u a1\n 22102: a4 = a0 if a0 == 0\n 22105: u64 [sp + 296] = 0\n 22109: u64 [sp + 0x110] = a2\n 22113: u64 [sp + 0x118] = a3\n 22117: a0 = sp + 0x130\n 22121: a1 = sp + 0x110\n 22125: u64 [sp + 0x120] = a4\n 22129: ra = 722, jump @757\n      : @773 [@dyn 361] (gas: 15)\n 22135: a2 = u64 [sp + 0x148]\n 22139: a3 = u64 [sp + 0x140]\n 22143: a1 = u64 [sp + 0x138]\n 22147: a0 = u64 [sp + 0x130]\n 22151: u64 [sp + 0x40] = a1\n 22154: u64 [sp + 0x68] = a2\n 22157: a2 = a2 | a1\n 22160: a1 = a0 | a3\n 22163: a1 = a1 | a2\n 22166: a1 = a1 >> 0x20\n 22169: u64 [sp + 0x70] = a3\n 22172: a2 = a2 | a3\n 22175: a2 = a2 << 0x20\n 22178: a1 = a1 | a2\n 22181: jump @785 if a1 != 0\n      : @774 (gas: 11)\n 22185: s1 = u64 [sp + 0x48]\n 22188: u64 [sp + 0xf0] = s1\n 22192: a1 = u64 [sp + 0x78]\n 22195: u64 [sp + 0xf8] = a1\n 22199: a1 = u64 [sp + 0x80]\n 22203: u64 [sp + 0x100] = a1\n 22207: a1 = sp + 0xf0\n 22211: a2 = u64 [sp + 0x88]\n 22215: u64 [sp + 0x108] = a2\n 22219: u64 [sp + 0x60] = a0\n 22222: ra = 724, jump @19\n      : @775 [@dyn 362] (gas: 45)\n 22228: a0 = u64 [sp + 0x50]\n 22231: a3 = a0 + s1\n 22234: a2 = a3 <u a0\n 22237: t2 = u64 [sp + 0x38]\n 22240: a0 = u64 [sp + 0x78]\n 22243: a0 = a0 + t2\n 22246: a0 = a0 + a2\n 22249: a4 = a0 ^ t2\n 22252: a1 = a0 <u t2\n 22255: a1 = a2 if a4 == 0\n 22258: t1 = u64 [sp + 0x58]\n 22261: a2 = u64 [sp + 0x80]\n 22265: a2 = a2 + t1\n 22268: a5 = a3 + 0x20\n 22271: t0 = a5 <u a3\n 22274: a4 = a0 + t0\n 22277: a3 = u64 [sp + 0x20]\n 22280: a5 = a3 <u a5\n 22283: a3 = u64 [sp + 0x28]\n 22286: s1 = a4 ^ a3\n 22289: a3 = a3 <u a4\n 22292: a5 = a3 if s1 != 0\n 22295: a3 = a2 <u t1\n 22298: t1 = u64 [sp + 0x30]\n 22301: s1 = u64 [sp + 0x88]\n 22305: s1 = s1 + t1\n 22308: a3 = a3 + s1\n 22311: a1 = a1 + a2\n 22314: a2 = a1 <u a2\n 22317: a2 = a2 + a3\n 22320: a0 = a4 <u a0\n 22323: a0 = t0 if t0 == 0\n 22326: a0 = a0 + a1\n 22329: a1 = a0 <u a1\n 22332: a1 = a1 + a2\n 22335: a3 = u64 [sp + 0x10]\n 22338: a2 = a1 ^ a3\n 22341: a1 = a3 <u a1\n 22344: a4 = u64 [sp + 0x18]\n 22347: a3 = a4 <u a0\n 22350: a1 = a3 if a2 == 0\n 22353: a0 = a0 ^ a4\n 22356: a0 = a0 | a2\n 22359: a5 = a1 if a0 != 0\n 22362: jump @793 if a5 != 0\n      : @776 (gas: 10)\n 22366: a0 = u64 [sp + 0x70]\n 22369: a1 = u64 [sp + 0x68]\n 22372: a1 = a1 | a0\n 22375: a0 = 0xffffffe0\n 22385: a4 = u64 [sp + 0x60]\n 22388: a2 = a4 <u a0\n 22391: a3 = u64 [sp + 0x40]\n 22394: a2 = 0 if a3 != 0\n 22396: a2 = 0 if a1 != 0\n 22398: jump @785 if a2 == 0\n      : @777 (gas: 12)\n 22402: a3 = a4\n 22404: a1 = u64 [sp + 0x58]\n 22407: a1 = a1 | t1\n 22410: a5 = u64 [sp + 0x50]\n 22413: a0 = a5 <u a0\n 22416: a0 = 0 if t2 != 0\n 22418: a0 = 0 if a1 != 0\n 22420: ra = u64 [sp + 0x88]\n 22424: a2 = u64 [sp + 0x80]\n 22428: a4 = u64 [sp + 0x78]\n 22431: s1 = u64 [sp + 0x48]\n 22434: jump @785 if a0 == 0\n      : @778 (gas: 8)\n 22438: a0 = s1 | a2\n 22441: a1 = a4 | ra\n 22444: a0 = a0 | a1\n 22447: a0 = a0 >> 0x20\n 22450: a1 = a1 | a2\n 22453: a1 = a1 << 0x20\n 22456: a0 = a0 | a1\n 22459: jump @785 if a0 != 0\n      : @779 (gas: 5)\n 22463: i32 a0 = a3 + 0x20\n 22466: i32 a1 = a5 + 0x20\n 22469: u64 [sp + 0x58] = a1\n 22472: a1 = s1\n 22474: ra = 726, jump @26\n      : @780 [@dyn 363] (gas: 4)\n 22480: u64 [sp + 0x50] = a0\n 22483: a0 = u64 [sp + 0x58]\n 22486: a1 = s1\n 22488: ra = 728, jump @26\n      : @781 [@dyn 364] (gas: 4)\n 22494: a1 = a0\n 22496: a0 = u64 [sp + 0x50]\n 22499: a2 = s1\n 22501: ra = 730, jump @0\n      : @782 [@dyn 365] (gas: 27)\n 22507: a1 = u64 [sp + 0x60]\n 22510: a0 = a1 + s1\n 22513: a1 = a0 <u a1\n 22516: s1 = u64 [sp + 0x40]\n 22519: a2 = u64 [sp + 0x78]\n 22522: a2 = a2 + s1\n 22525: a2 = a2 + a1\n 22528: a3 = a2 ^ s1\n 22531: a4 = a2 <u s1\n 22534: a4 = a1 if a3 == 0\n 22537: a5 = u64 [sp + 0x70]\n 22540: a1 = u64 [sp + 0x80]\n 22544: a1 = a1 + a5\n 22547: a4 = a4 + a1\n 22550: t0 = a4 <u a1\n 22553: a1 = a1 <u a5\n 22556: a5 = u64 [sp + 0x88]\n 22560: a3 = u64 [sp + 0x68]\n 22563: a5 = a5 + a3\n 22566: a1 = a1 + a5\n 22569: a1 = a1 + t0\n 22572: a1 = a1 | a4\n 22575: a3 = 0xffffffe0\n 22585: a3 = a0 <u a3\n 22588: a3 = 0 if a2 != 0\n 22590: a3 = 0 if a1 != 0\n 22592: jump @785 if a3 == 0\n      : @783 (gas: 7)\n 22595: i32 a0 = a0 + 0x20\n 22598: u64 [sp + 232] = 0\n 22602: u64 [sp + 224] = 0\n 22606: u64 [sp + 216] = 0\n 22610: a1 = sp + 0xd0\n 22614: u64 [sp + 208] = 0\n 22618: ra = 732, jump @19\n      : @784 [@dyn 366] (gas: 14)\n 22624: a0 = u64 [sp + 0x8]\n 22627: a1 = u64 [sp + 0x68]\n 22630: u64 [a0 + 0x18] = a1\n 22633: a1 = u64 [sp + 0x70]\n 22636: u64 [a0 + 0x10] = a1\n 22639: u64 [a0 + 0x8] = s1\n 22642: a1 = u64 [sp + 0x60]\n 22645: u64 [a0] = a1\n 22647: sp = s0 + 0xfffffffffffffe70\n 22651: ra = u64 [sp + 0x188]\n 22655: s0 = u64 [sp + 0x180]\n 22659: s1 = u64 [sp + 0x178]\n 22663: sp = sp + 0x190\n 22667: ret\n      : @785 (gas: 1)\n 22669: trap\n      : @786 (gas: 2)\n 22670: a1 = 0x20110\n 22675: jump @794\n      : @787 (gas: 6)\n 22677: u64 [sp + 192] = 0\n 22681: u64 [sp + 184] = 0\n 22685: u64 [sp + 176] = 0\n 22689: t0 = 0x2de\n 22693: a0 = 0x4e487b7100000000\n 22703: fallthrough\n      : @788 [@dyn 367] (gas: 4)\n 22704: a1 = sp + 0xb0\n 22708: u64 [sp + 0xc8] = a0\n 22712: a0 = 0\n 22714: ra = 736, jump @19\n      : @789 [@dyn 368] (gas: 7)\n 22720: u64 [sp + 168] = 0\n 22724: u64 [sp + 160] = 0\n 22728: u64 [sp + 144] = 0x41\n 22733: a0 = 0x4\n 22736: a1 = sp + 0x90\n 22740: u64 [sp + 152] = 0\n 22744: ra = 738, jump @19\n      : @790 [@dyn 369] (gas: 2)\n 22750: a1 = i32 [0x200fc]\n 22755: jump @792 if a1 >u 63\n      : @791 (gas: 2)\n 22759: u32 [0x200fc] = 0x40\n 22765: fallthrough\n      : @792 (gas: 7)\n 22766: a1 = 0x20110\n 22771: i32 a1 = a1 + 0\n 22773: a0 = 0x1\n 22776: a2 = 0x24\n 22779: ecalli 8 // 'seal_return'\n 22781: a1 = 0x20110\n 22786: jump @794\n      : @793 (gas: 2)\n 22788: a1 = 0x20110\n 22793: fallthrough\n      : @794 (gas: 6)\n 22794: i32 a1 = a1 + 0\n 22796: a0 = 0x1\n 22799: a2 = 0\n 22801: ra = 0x2e4\n 22805: ecalli 8 // 'seal_return'\n 22807: fallthrough\n      : @795 [@dyn 370] (gas: 22)\n 22808: sp = sp + 0xfffffffffffffee0\n 22812: u64 [sp + 0x118] = ra\n 22816: u64 [sp + 0x110] = s0\n 22820: u64 [sp + 0x108] = s1\n 22824: s0 = sp + 0x120\n 22828: sp = sp & 0xfffffffffffffff0\n 22831: a4 = u64 [a1 + 0x10]\n 22834: a3 = u64 [a1 + 0x18]\n 22837: a5 = u64 [a1 + 0x8]\n 22840: t0 = u64 [a1]\n 22842: u64 [sp + 0x68] = a3\n 22845: u64 [sp + 0x78] = a5\n 22848: a1 = a5 | a3\n 22851: a3 = t0 | a4\n 22854: a3 = a3 | a1\n 22857: a3 = a3 >> 0x20\n 22860: u64 [sp + 0x70] = a4\n 22863: a1 = a1 | a4\n 22866: a1 = a1 << 0x20\n 22869: a1 = a1 | a3\n 22872: u64 [sp + 0x8] = a0\n 22875: jump @810 if a1 != 0\n      : @796 (gas: 15)\n 22879: a0 = u64 [a2 + 0x18]\n 22882: u64 [sp + 0x48] = a0\n 22885: s1 = u64 [a2 + 0x10]\n 22888: a0 = u64 [a2 + 0x8]\n 22891: u64 [sp + 0x50] = a0\n 22894: a0 = u64 [a2]\n 22896: u64 [sp + 0x58] = a0\n 22899: u64 [sp + 248] = 0\n 22903: u64 [sp + 240] = 0\n 22907: u64 [sp + 232] = 0\n 22911: a1 = sp + 0xe0\n 22915: u64 [sp + 224] = 0x20\n 22920: a0 = t0\n 22922: u64 [sp + 0x60] = t0\n 22925: ra = 742, jump @19\n      : @797 [@dyn 371] (gas: 12)\n 22931: a1 = u64 [sp + 0x58]\n 22934: a0 = a1 | s1\n 22937: a2 = u64 [sp + 0x48]\n 22940: a3 = u64 [sp + 0x50]\n 22943: a2 = a2 | a3\n 22946: a0 = a0 | a2\n 22949: a0 = a0 >> 0x20\n 22952: u64 [sp + 0x20] = s1\n 22955: a2 = a2 | s1\n 22958: a2 = a2 << 0x20\n 22961: a0 = a0 | a2\n 22964: jump @810 if a0 != 0\n      : @798 (gas: 2)\n 22968: a0 = sp + 0xc0\n 22972: ra = 744, jump @17\n      : @799 [@dyn 372] (gas: 13)\n 22978: a0 = u64 [sp + 0x70]\n 22981: a1 = u64 [sp + 0x68]\n 22984: a1 = a1 | a0\n 22987: a0 = 0x100000000\n 22997: u64 [sp + 0x10] = a0\n 23000: a0 = 0xffffffe0\n 23010: a2 = u64 [sp + 0x60]\n 23013: a0 = a2 <u a0\n 23016: a3 = u64 [sp + 0x78]\n 23019: a0 = 0 if a3 != 0\n 23021: u64 [sp + 0x18] = a1\n 23024: a0 = 0 if a1 != 0\n 23026: jump @810 if a0 == 0\n      : @800 (gas: 16)\n 23030: a3 = u64 [sp + 0xd8]\n 23034: a4 = u64 [sp + 0xd0]\n 23038: a5 = u64 [sp + 0xc8]\n 23042: a1 = u64 [sp + 0xc0]\n 23046: i32 a0 = a2 + 0x20\n 23049: u64 [sp + 0x28] = a1\n 23052: u64 [sp + 0xa0] = a1\n 23056: u64 [sp + 0x30] = a5\n 23059: u64 [sp + 0xa8] = a5\n 23063: u64 [sp + 0x38] = a4\n 23066: u64 [sp + 0xb0] = a4\n 23070: a1 = sp + 0xa0\n 23074: u64 [sp + 0x40] = a3\n 23077: u64 [sp + 0xb8] = a3\n 23081: s1 = a2\n 23083: ra = 746, jump @19\n      : @801 [@dyn 373] (gas: 8)\n 23089: a0 = u64 [sp + 0x10]\n 23092: a0 = a0 + 0xffffffffffffffc0\n 23095: a0 = s1 <u a0\n 23098: a1 = u64 [sp + 0x78]\n 23101: a0 = 0 if a1 != 0\n 23103: a1 = u64 [sp + 0x18]\n 23106: a0 = 0 if a1 != 0\n 23108: jump @810 if a0 == 0\n      : @802 (gas: 10)\n 23112: a0 = u64 [sp + 0x48]\n 23115: a1 = u64 [sp + 0x20]\n 23118: a0 = a0 | a1\n 23121: a1 = 0xffffffe0\n 23131: a3 = u64 [sp + 0x58]\n 23134: a1 = a3 <u a1\n 23137: a4 = u64 [sp + 0x50]\n 23140: a1 = 0 if a4 != 0\n 23142: a1 = 0 if a0 != 0\n 23144: jump @810 if a1 == 0\n      : @803 (gas: 13)\n 23148: a2 = s1\n 23150: a1 = u64 [sp + 0x28]\n 23153: a5 = u64 [sp + 0x38]\n 23156: a0 = a1 | a5\n 23159: a4 = u64 [sp + 0x40]\n 23162: s1 = u64 [sp + 0x30]\n 23165: a4 = a4 | s1\n 23168: a0 = a0 | a4\n 23171: a0 = a0 >> 0x20\n 23174: a4 = a4 | a5\n 23177: a4 = a4 << 0x20\n 23180: a0 = a0 | a4\n 23183: jump @810 if a0 != 0\n      : @804 (gas: 5)\n 23187: i32 a0 = a2 + 0x40\n 23190: i32 a3 = a3 + 0x20\n 23193: u64 [sp + 0x58] = a3\n 23196: s1 = a1\n 23198: ra = 748, jump @26\n      : @805 [@dyn 374] (gas: 4)\n 23204: u64 [sp + 0x50] = a0\n 23207: a0 = u64 [sp + 0x58]\n 23210: a1 = s1\n 23212: ra = 750, jump @26\n      : @806 [@dyn 375] (gas: 4)\n 23218: a1 = a0\n 23220: a0 = u64 [sp + 0x50]\n 23223: a2 = s1\n 23225: ra = 752, jump @0\n      : @807 [@dyn 376] (gas: 27)\n 23231: a0 = u64 [sp + 0x60]\n 23234: a0 = a0 + s1\n 23237: a1 = a0 <u s1\n 23240: a2 = u64 [sp + 0x78]\n 23243: a4 = u64 [sp + 0x30]\n 23246: a2 = a2 + a4\n 23249: a2 = a2 + a1\n 23252: a3 = a2 ^ a4\n 23255: a4 = a2 <u a4\n 23258: a4 = a1 if a3 == 0\n 23261: a1 = u64 [sp + 0x70]\n 23264: a3 = u64 [sp + 0x38]\n 23267: a1 = a1 + a3\n 23270: a3 = a1 <u a3\n 23273: a5 = u64 [sp + 0x68]\n 23276: s1 = u64 [sp + 0x40]\n 23279: a5 = a5 + s1\n 23282: a3 = a3 + a5\n 23285: a4 = a4 + a1\n 23288: a1 = a4 <u a1\n 23291: a1 = a1 + a3\n 23294: a1 = a1 | a4\n 23297: a3 = 0xffffffc0\n 23307: a3 = a0 <u a3\n 23310: a3 = 0 if a2 != 0\n 23312: a3 = 0 if a1 != 0\n 23314: jump @810 if a3 == 0\n      : @808 (gas: 7)\n 23318: i32 a0 = a0 + 0x40\n 23321: u64 [sp + 152] = 0\n 23325: u64 [sp + 144] = 0\n 23329: u64 [sp + 136] = 0\n 23333: a1 = sp + 0x80\n 23337: u64 [sp + 128] = 0\n 23341: ra = 754, jump @19\n      : @809 [@dyn 377] (gas: 35)\n 23347: s1 = u64 [sp + 0x28]\n 23350: s1 = s1 + 0x1f\n 23353: a0 = 0x1ffffffe0\n 23363: a0 = a0 & s1\n 23366: a1 = u64 [sp + 0x60]\n 23369: a0 = a0 + a1\n 23372: a1 = a0 <u a1\n 23375: a3 = u64 [sp + 0x78]\n 23378: a2 = a3 + a1\n 23381: a3 = a2 <u a3\n 23384: a3 = a1 if a1 == 0\n 23387: a1 = u64 [sp + 0x70]\n 23390: a3 = a3 + a1\n 23393: a1 = a3 <u a1\n 23396: a4 = u64 [sp + 0x68]\n 23399: a1 = a1 + a4\n 23402: a4 = a0 + 0x40\n 23405: a0 = a4 <u a0\n 23408: a5 = a2 + a0\n 23411: a2 = a5 <u a2\n 23414: a2 = a0 if a0 == 0\n 23417: a2 = a2 + a3\n 23420: a0 = a2 <u a3\n 23423: a0 = a0 + a1\n 23426: a1 = u64 [sp + 0x8]\n 23429: u64 [a1] = a4\n 23431: u64 [a1 + 0x8] = a5\n 23434: u64 [a1 + 0x10] = a2\n 23437: u64 [a1 + 0x18] = a0\n 23440: sp = s0 + 0xfffffffffffffee0\n 23444: ra = u64 [sp + 0x118]\n 23448: s0 = u64 [sp + 0x110]\n 23452: s1 = u64 [sp + 0x108]\n 23456: sp = sp + 0x120\n 23460: ret\n      : @810 (gas: 1)\n 23462: trap\n      : @811 [@dyn 378] (gas: 5)\n 23463: a1 = 0x4\n 23466: ra = 0x2f6\n 23470: ecalli 1 // 'call_data_load'\n 23472: t0 = 0x2f8\n 23476: jump @934\n      : @812 [@dyn 379] (gas: 1)\n 23479: t0 = 760, jump @934\n      : @813 [@dyn 380] (gas: 1)\n 23485: jump @816 if a3 == 0\n      : @814 (gas: 1)\n 23488: t0 = 762, jump @940\n      : @815 [@dyn 381] (gas: 1)\n 23494: ret\n      : @816 (gas: 8)\n 23496: a1 = 0x20110\n 23501: i32 a1 = a1 + 0\n 23503: a0 = 0x1\n 23506: a2 = 0\n 23508: ra = 0x2fc\n 23512: ecalli 8 // 'seal_return'\n 23514: t0 = 0x2fe\n 23518: jump @954\n      : @817 [@dyn 382] (gas: 1)\n 23521: t0 = 766, jump @954\n      : @818 [@dyn 383] (gas: 5)\n 23527: a1 = 0x24\n 23530: ra = 0x300\n 23534: ecalli 1 // 'call_data_load'\n 23536: t0 = 0x302\n 23540: jump @934\n      : @819 [@dyn 384] (gas: 1)\n 23543: t0 = 770, jump @934\n      : @820 [@dyn 385] (gas: 1)\n 23549: jump @823 if a3 == 0\n      : @821 (gas: 1)\n 23552: t0 = 772, jump @940\n      : @822 [@dyn 386] (gas: 1)\n 23558: ret\n      : @823 (gas: 7)\n 23560: a1 = 0x20110\n 23565: i32 a1 = a1 + 0\n 23567: a0 = 0x1\n 23570: a2 = 0\n 23572: ra = 0x306\n 23576: ecalli 8 // 'seal_return'\n 23578: fallthrough\n      : @824 [@dyn 387] (gas: 45)\n 23579: sp = sp + 0xffffffffffffff90\n 23582: u64 [sp + 0x68] = ra\n 23585: u64 [sp + 0x60] = s0\n 23588: u64 [sp + 0x58] = s1\n 23591: s0 = sp + 0x70\n 23594: sp = sp & 0xfffffffffffffff0\n 23597: a3 = u64 [a1 + 0x18]\n 23600: u64 [sp + 0x8] = a3\n 23603: a4 = u64 [a2 + 0x18]\n 23606: t2 = u64 [a1]\n 23608: u64 [sp] = t2\n 23610: a3 = u64 [a1 + 0x8]\n 23613: s1 = u64 [a2 + 0x8]\n 23616: a5 = u64 [a2]\n 23618: t1 = u64 [a1 + 0x10]\n 23621: t0 = u64 [a2 + 0x10]\n 23624: a2 = s1 + a3\n 23627: t2 = t2 + a5\n 23630: a5 = t2 <u a5\n 23633: a2 = a2 + a5\n 23636: ra = a2 ^ s1\n 23639: s1 = a2 <u s1\n 23642: s1 = a5 if ra == 0\n 23645: a1 = t0 + t1\n 23648: a5 = u64 [sp + 0x8]\n 23651: a5 = a5 + a4\n 23654: a4 = a1 <u t0\n 23657: a4 = a4 + a5\n 23660: a5 = a1 + s1\n 23663: a1 = a5 <u a1\n 23666: ra = a4 + a1\n 23669: a4 = a2 ^ a3\n 23672: a3 = a2 <u a3\n 23675: a1 = u64 [sp]\n 23677: s1 = t2 <u a1\n 23680: s1 = a3 if a4 != 0\n 23683: t0 = a5 <u t1\n 23686: a1 = u64 [sp + 0x8]\n 23689: a4 = ra ^ a1\n 23692: a3 = ra <u a1\n 23695: a3 = t0 if a4 == 0\n 23698: a1 = a5 ^ t1\n 23701: a1 = a1 | a4\n 23704: s1 = a3 if a1 != 0\n 23707: jump @826 if s1 != 0\n      : @825 (gas: 10)\n 23710: u64 [a0] = t2\n 23712: u64 [a0 + 0x8] = a2\n 23715: u64 [a0 + 0x10] = a5\n 23718: u64 [a0 + 0x18] = ra\n 23721: sp = s0 + 0xffffffffffffff90\n 23724: ra = u64 [sp + 0x68]\n 23727: s0 = u64 [sp + 0x60]\n 23730: s1 = u64 [sp + 0x58]\n 23733: sp = sp + 0x70\n 23736: ret\n      : @826 (gas: 6)\n 23738: u64 [sp + 64] = 0\n 23741: u64 [sp + 56] = 0\n 23744: u64 [sp + 48] = 0\n 23747: t0 = 0x308\n 23751: a0 = 0x4e487b7100000000\n 23761: fallthrough\n      : @827 [@dyn 388] (gas: 4)\n 23762: a1 = sp + 0x30\n 23765: u64 [sp + 0x48] = a0\n 23768: a0 = 0\n 23770: ra = 778, jump @19\n      : @828 [@dyn 389] (gas: 7)\n 23776: u64 [sp + 40] = 0\n 23779: u64 [sp + 32] = 0\n 23782: u64 [sp + 16] = 0x11\n 23786: a0 = 0x4\n 23789: a1 = sp + 0x10\n 23792: u64 [sp + 24] = 0\n 23795: ra = 780, jump @19\n      : @829 [@dyn 390] (gas: 2)\n 23801: a1 = i32 [0x200fc]\n 23806: jump @831 if a1 >u 63\n      : @830 (gas: 2)\n 23810: u32 [0x200fc] = 0x40\n 23816: fallthrough\n      : @831 (gas: 7)\n 23817: a1 = 0x20110\n 23822: i32 a1 = a1 + 0\n 23824: a0 = 0x1\n 23827: a2 = 0x24\n 23830: ra = 0x30e\n 23834: ecalli 8 // 'seal_return'\n 23836: fallthrough\n      : @832 [@dyn 391] (gas: 14)\n 23837: sp = sp + 0xffffffffffffff20\n 23841: u64 [sp + 0xd8] = ra\n 23845: u64 [sp + 0xd0] = s0\n 23849: u64 [sp + 0xc8] = s1\n 23853: s0 = sp + 0xe0\n 23857: sp = sp & 0xfffffffffffffff0\n 23860: a1 = u64 [a0 + 0x10]\n 23863: a2 = u64 [a0 + 0x18]\n 23866: a3 = u64 [a0 + 0x8]\n 23869: a0 = u64 [a0]\n 23871: a2 = a2 | a3\n 23874: a0 = a0 | a1\n 23877: a0 = a0 | a2\n 23880: jump @834 if a0 == 0\n      : @833 (gas: 6)\n 23883: sp = s0 + 0xffffffffffffff20\n 23887: ra = u64 [sp + 0xd8]\n 23891: s0 = u64 [sp + 0xd0]\n 23895: s1 = u64 [sp + 0xc8]\n 23899: sp = sp + 0xe0\n 23903: ret\n      : @834 (gas: 3)\n 23905: a0 = sp + 0xa0\n 23909: a1 = 0x40\n 23912: ra = 784, jump @17\n      : @835 [@dyn 392] (gas: 15)\n 23918: a2 = u64 [sp + 0xb8]\n 23922: s1 = u64 [sp + 0xb0]\n 23926: a0 = u64 [sp + 0xa8]\n 23930: a1 = u64 [sp + 0xa0]\n 23934: u64 [sp + 0x10] = a0\n 23937: u64 [sp + 0x8] = a2\n 23940: a0 = a0 | a2\n 23943: u64 [sp + 0x18] = a1\n 23946: a1 = a1 | s1\n 23949: a1 = a1 | a0\n 23952: a1 = a1 >> 0x20\n 23955: a0 = a0 | s1\n 23958: a0 = a0 << 0x20\n 23961: a0 = a0 | a1\n 23964: jump @842 if a0 != 0\n      : @836 (gas: 8)\n 23968: u64 [sp + 144] = 0\n 23972: u64 [sp + 136] = 0\n 23976: u64 [sp + 128] = 0\n 23980: a0 = 0x8c379a000000000\n 23990: a1 = sp + 0x80\n 23994: u64 [sp + 0x98] = a0\n 23998: a0 = u64 [sp + 0x18]\n 24001: ra = 786, jump @19\n      : @837 [@dyn 393] (gas: 11)\n 24007: a2 = u64 [sp + 0x8]\n 24010: a2 = a2 | s1\n 24013: s1 = 0x100000000\n 24023: a0 = 0xfffffffc\n 24033: a1 = u64 [sp + 0x18]\n 24036: a0 = a1 <u a0\n 24039: a1 = u64 [sp + 0x10]\n 24042: a0 = 0 if a1 != 0\n 24044: u64 [sp + 0x8] = a2\n 24047: a0 = 0 if a2 != 0\n 24049: jump @842 if a0 == 0\n      : @838 (gas: 8)\n 24052: a0 = u64 [sp + 0x18]\n 24055: i32 a0 = a0 + 0x4\n 24058: u64 [sp + 120] = 0\n 24061: u64 [sp + 112] = 0\n 24064: u64 [sp + 96] = 0x20\n 24068: a1 = sp + 0x60\n 24071: u64 [sp + 104] = 0\n 24074: ra = 788, jump @19\n      : @839 [@dyn 394] (gas: 8)\n 24080: a0 = s1 + 0xffffffffffffffdc\n 24083: a1 = u64 [sp + 0x18]\n 24086: a0 = a1 <u a0\n 24089: a1 = u64 [sp + 0x10]\n 24092: a0 = 0 if a1 != 0\n 24094: a1 = u64 [sp + 0x8]\n 24097: a0 = 0 if a1 != 0\n 24099: jump @842 if a0 == 0\n      : @840 (gas: 8)\n 24102: s1 = u64 [sp + 0x18]\n 24105: i32 a0 = s1 + 0x24\n 24108: u64 [sp + 88] = 0\n 24111: u64 [sp + 80] = 0\n 24114: u64 [sp + 64] = 0x9\n 24118: a1 = sp + 0x40\n 24121: u64 [sp + 72] = 0\n 24124: ra = 790, jump @19\n      : @841 [@dyn 395] (gas: 7)\n 24130: a0 = 0xffffffbc\n 24140: a0 = s1 <u a0\n 24143: a1 = u64 [sp + 0x10]\n 24146: a0 = 0 if a1 != 0\n 24148: a1 = u64 [sp + 0x8]\n 24151: a0 = 0 if a1 != 0\n 24153: jump @843 if a0 != 0\n      : @842 (gas: 1)\n 24156: trap\n      : @843 (gas: 10)\n 24157: s1 = u64 [sp + 0x18]\n 24160: i32 a0 = s1 + 0x44\n 24163: a1 = u64 [0x200b0]\n 24168: u64 [sp + 40] = 0\n 24171: u64 [sp + 0x38] = a1\n 24174: a1 = 0x7200000000000000\n 24184: u64 [sp + 0x30] = a1\n 24187: a1 = sp + 0x20\n 24190: u64 [sp + 32] = 0\n 24193: ra = 792, jump @19\n      : @844 [@dyn 396] (gas: 3)\n 24199: a1 = 0x64\n 24202: a0 = s1\n 24204: ra = 794, jump @26\n      : @845 [@dyn 397] (gas: 6)\n 24210: i32 a1 = a0 + 0\n 24212: a0 = 0x1\n 24215: a2 = 0x64\n 24218: ra = 0x31c\n 24222: ecalli 8 // 'seal_return'\n 24224: fallthrough\n      : @846 [@dyn 398] (gas: 14)\n 24225: sp = sp + 0xfffffffffffffc20\n 24229: a3 = sp + 0x300\n 24233: u64 [a3 + 0xd8] = ra\n 24237: u64 [a3 + 0xd0] = s0\n 24241: u64 [a3 + 0xc8] = s1\n 24245: s0 = sp + 0x3e0\n 24249: sp = sp & 0xffffffffffffffe0\n 24252: s1 = sp\n 24254: t2 = u32 [a0 + 0x10]\n 24257: a3 = u64 [a0]\n 24259: a4 = u64 [a0 + 0x8]\n 24262: a0 = a3 | t2\n 24265: a0 = a0 | a4\n 24268: jump @878 if a0 == 0\n      : @847 (gas: 13)\n 24272: t0 = u64 [a1 + 0x10]\n 24275: t1 = u64 [a1 + 0x8]\n 24278: ra = u64 [a1]\n 24280: a5 = 0xffffffff\n 24290: a1 = t1 & 0xffffffffffffffff\n 24293: a0 = ra & 0xffffffffffffffff\n 24296: a5 = t0 & a5\n 24299: u64 [s1 + 0x48] = a0\n 24302: u64 [s1 + 0x38] = a5\n 24305: a0 = a0 | a5\n 24308: u64 [s1 + 0x40] = a1\n 24311: a0 = a0 | a1\n 24314: jump @883 if a0 == 0\n      : @848 (gas: 18)\n 24318: a0 = u64 [a2 + 0x18]\n 24321: u64 [s1 + 0x98] = a0\n 24325: a0 = u64 [a2 + 0x10]\n 24328: u64 [s1 + 0x88] = a0\n 24332: a0 = u64 [a2 + 0x8]\n 24335: u64 [s1 + 0x80] = a0\n 24339: a0 = u64 [a2]\n 24341: u64 [s1 + 0x90] = a0\n 24345: u64 [s1 + 824] = 0\n 24349: u64 [s1 + 0x60] = a3\n 24352: u64 [s1 + 0x320] = a3\n 24356: u64 [s1 + 0x58] = a4\n 24359: u64 [s1 + 0x328] = a4\n 24363: a1 = s1 + 0x320\n 24367: u64 [s1 + 0x50] = t2\n 24370: u64 [s1 + 0x330] = t2\n 24374: a0 = 0\n 24376: ra = 798, jump @19\n      : @849 [@dyn 399] (gas: 7)\n 24382: u64 [s1 + 792] = 0\n 24386: u64 [s1 + 784] = 0\n 24390: u64 [s1 + 776] = 0\n 24394: a0 = 0x20\n 24397: a1 = s1 + 0x300\n 24401: u64 [s1 + 768] = 0\n 24405: ra = 800, jump @19\n      : @850 [@dyn 400] (gas: 3)\n 24411: a2 = 0x200fc\n 24416: a0 = i32 [0x200fc]\n 24421: jump @852 if a0 >u 63\n      : @851 (gas: 2)\n 24425: u32 [0x200fc] = 0x40\n 24431: fallthrough\n      : @852 (gas: 15)\n 24432: u64 [s1 + 0x70] = a2\n 24435: a0 = sp + 0xffffffffffffffe0\n 24438: a2 = a0 & 0xffffffffffffffe0\n 24441: u64 [s1 + 0x68] = a2\n 24444: sp = a2\n 24446: a0 = 0x20110\n 24451: i32 a0 = a0 + 0\n 24453: i32 a2 = a2 + 0\n 24455: a1 = 0x40\n 24458: u64 [s1 + 0x78] = a0\n 24461: ra = 0x322\n 24465: ecalli 6 // 'hash_keccak_256'\n 24467: a3 = u64 [s1 + 0x68]\n 24470: t0 = 0x324\n 24474: jump @935\n      : @853 [@dyn 401] (gas: 2)\n 24477: a3 = u64 [s1 + 0x68]\n 24480: t0 = 804, jump @935\n      : @854 [@dyn 402] (gas: 7)\n 24486: u64 [a4 + 0x58] = a3\n 24489: u64 [a4 + 0x50] = a2\n 24492: u64 [a4 + 0x48] = a1\n 24495: u64 [a4 + 0x40] = a0\n 24498: a0 = s1 + 0x2e0\n 24502: a1 = s1 + 0x340\n 24506: ra = 806, jump @21\n      : @855 [@dyn 403] (gas: 28)\n 24512: a1 = s1 + 0x200\n 24516: a2 = u64 [a1 + 0xf8]\n 24520: a0 = u64 [a1 + 0xf0]\n 24524: a5 = u64 [a1 + 0xe8]\n 24528: a4 = u64 [a1 + 0xe0]\n 24532: a1 = u64 [s1 + 0x98]\n 24536: t1 = a2 ^ a1\n 24539: u64 [s1 + 0x28] = a2\n 24542: a1 = a2 <u a1\n 24545: a2 = u64 [s1 + 0x88]\n 24549: a3 = a0 <u a2\n 24552: u64 [s1 + 0x10] = a3\n 24555: a1 = a3 if t1 == 0\n 24558: a3 = u64 [s1 + 0x80]\n 24562: t0 = a5 ^ a3\n 24565: u64 [s1 + 0x30] = a5\n 24568: a5 = a5 <u a3\n 24571: a3 = u64 [s1 + 0x90]\n 24575: u64 [s1 + 0x68] = a4\n 24578: a3 = a4 <u a3\n 24581: u64 [s1 + 0x18] = a3\n 24584: a5 = a3 if t0 == 0\n 24587: u64 [s1 + 0x20] = a0\n 24590: a2 = a2 ^ a0\n 24593: a0 = a2 | t1\n 24596: u64 [s1 + 0x8] = a5\n 24599: a1 = a5 if a0 == 0\n 24602: jump @889 if a1 != 0\n      : @856 (gas: 11)\n 24606: u64 [s1 + 728] = 0\n 24610: a0 = u64 [s1 + 0x60]\n 24613: a2 = s1 + 0x200\n 24617: u64 [a2 + 0xc0] = a0\n 24621: a0 = u64 [s1 + 0x58]\n 24624: u64 [a2 + 0xc8] = a0\n 24628: a1 = s1 + 0x2c0\n 24632: a0 = u64 [s1 + 0x50]\n 24635: u64 [a2 + 0xd0] = a0\n 24639: a0 = 0\n 24641: ra = 808, jump @19\n      : @857 [@dyn 404] (gas: 7)\n 24647: u64 [s1 + 696] = 0\n 24651: u64 [s1 + 688] = 0\n 24655: u64 [s1 + 680] = 0\n 24659: a0 = 0x20\n 24662: a1 = s1 + 0x2a0\n 24666: u64 [s1 + 672] = 0\n 24670: ra = 810, jump @19\n      : @858 [@dyn 405] (gas: 27)\n 24676: a0 = u64 [s1 + 0x88]\n 24680: a1 = u64 [s1 + 0x20]\n 24683: a0 = a1 - a0\n 24686: a2 = u64 [s1 + 0x8]\n 24689: a1 = a0 - a2\n 24692: u64 [s1 + 0x20] = a1\n 24695: a0 = a0 <u a2\n 24698: a1 = u64 [s1 + 0x98]\n 24702: a2 = u64 [s1 + 0x28]\n 24705: a1 = a2 - a1\n 24708: a2 = u64 [s1 + 0x10]\n 24711: a1 = a1 - a2\n 24714: a1 = a1 - a0\n 24717: u64 [s1 + 0x28] = a1\n 24720: a2 = u64 [s1 + 0x70]\n 24723: a0 = i32 [a2]\n 24725: a1 = u64 [s1 + 0x80]\n 24729: a3 = u64 [s1 + 0x30]\n 24732: a1 = a3 - a1\n 24735: a3 = u64 [s1 + 0x18]\n 24738: a1 = a1 - a3\n 24741: u64 [s1 + 0x30] = a1\n 24744: a1 = u64 [s1 + 0x90]\n 24748: a3 = u64 [s1 + 0x68]\n 24751: a3 = a3 - a1\n 24754: u64 [s1 + 0x68] = a3\n 24757: jump @860 if a0 >u 63\n      : @859 (gas: 2)\n 24761: u32 [a2 + 0] = 0x40\n 24764: fallthrough\n      : @860 (gas: 12)\n 24765: a0 = sp + 0xffffffffffffffe0\n 24768: a0 = a0 & 0xffffffffffffffe0\n 24771: u64 [s1 + 0x18] = a0\n 24774: sp = a0\n 24776: i32 a2 = a0 + 0\n 24778: a1 = 0x40\n 24781: a0 = u64 [s1 + 0x78]\n 24784: ra = 0x32c\n 24788: ecalli 6 // 'hash_keccak_256'\n 24790: a3 = u64 [s1 + 0x18]\n 24793: t0 = 0x32e\n 24797: jump @935\n      : @861 [@dyn 406] (gas: 2)\n 24800: a3 = u64 [s1 + 0x18]\n 24803: t0 = 814, jump @935\n      : @862 [@dyn 407] (gas: 15)\n 24809: u64 [a4 + 0x78] = a3\n 24812: u64 [a4 + 0x70] = a2\n 24815: u64 [a4 + 0x68] = a1\n 24818: u64 [a4 + 0x60] = a0\n 24821: a0 = u64 [s1 + 0x28]\n 24824: u64 [a4 + 0x98] = a0\n 24828: a0 = u64 [s1 + 0x20]\n 24831: u64 [a4 + 0x90] = a0\n 24835: a0 = u64 [s1 + 0x30]\n 24838: u64 [a4 + 0x88] = a0\n 24842: a0 = u64 [s1 + 0x68]\n 24845: u64 [a4 + 0x80] = a0\n 24849: a0 = s1 + 0x360\n 24853: a1 = s1 + 0x380\n 24857: ra = 816, jump @22\n      : @863 [@dyn 408] (gas: 11)\n 24863: u64 [s1 + 664] = 0\n 24867: a0 = u64 [s1 + 0x38]\n 24870: a2 = s1 + 0x200\n 24874: u64 [a2 + 0x90] = a0\n 24878: a0 = u64 [s1 + 0x40]\n 24881: u64 [a2 + 0x88] = a0\n 24885: a1 = s1 + 0x280\n 24889: a0 = u64 [s1 + 0x48]\n 24892: u64 [a2 + 0x80] = a0\n 24896: a0 = 0\n 24898: ra = 818, jump @19\n      : @864 [@dyn 409] (gas: 7)\n 24904: u64 [s1 + 632] = 0\n 24908: u64 [s1 + 624] = 0\n 24912: u64 [s1 + 616] = 0\n 24916: a0 = 0x20\n 24919: a1 = s1 + 0x260\n 24923: u64 [s1 + 608] = 0\n 24927: ra = 820, jump @19\n      : @865 [@dyn 410] (gas: 7)\n 24933: a1 = u64 [s1 + 0x70]\n 24936: a0 = sp + 0xffffffffffffffe0\n 24939: a0 = a0 & 0xffffffffffffffe0\n 24942: u64 [s1 + 0x68] = a0\n 24945: sp = a0\n 24947: a0 = i32 [a1]\n 24949: jump @867 if a0 >u 63\n      : @866 (gas: 2)\n 24953: u32 [a1 + 0] = 0x40\n 24956: fallthrough\n      : @867 (gas: 12)\n 24957: a0 = sp + 0xffffffffffffffe0\n 24960: a0 = a0 & 0xffffffffffffffe0\n 24963: u64 [s1 + 0x70] = a0\n 24966: sp = a0\n 24968: i32 a2 = a0 + 0\n 24970: a1 = 0x40\n 24973: a0 = u64 [s1 + 0x78]\n 24976: ra = 0x336\n 24980: ecalli 6 // 'hash_keccak_256'\n 24982: a3 = u64 [s1 + 0x70]\n 24985: t0 = 0x338\n 24989: jump @922\n      : @868 [@dyn 411] (gas: 2)\n 24992: a3 = u64 [s1 + 0x70]\n 24995: t0 = 824, jump @922\n      : @869 [@dyn 412] (gas: 7)\n 25001: a1 = u64 [s1 + 0x68]\n 25004: u64 [a1 + 0x18] = a3\n 25007: u64 [a1 + 0x10] = a2\n 25010: u64 [a1 + 0x8] = a4\n 25013: u64 [a1] = a0\n 25015: a0 = s1 + 0x240\n 25019: ra = 826, jump @21\n      : @870 [@dyn 413] (gas: 30)\n 25025: a0 = u64 [s1 + 0x248]\n 25029: a1 = u64 [s1 + 0x240]\n 25033: t0 = u64 [s1 + 0x258]\n 25037: a3 = u64 [s1 + 0x250]\n 25041: a4 = u64 [s1 + 0x80]\n 25045: a4 = a4 + a0\n 25048: a5 = u64 [s1 + 0x90]\n 25052: a5 = a5 + a1\n 25055: a1 = a5 <u a1\n 25058: a4 = a4 + a1\n 25061: a2 = a4 ^ a0\n 25064: a0 = a4 <u a0\n 25067: a0 = a1 if a2 == 0\n 25070: a1 = u64 [s1 + 0x88]\n 25074: a1 = a1 + a3\n 25077: a2 = u64 [s1 + 0x98]\n 25081: t0 = t0 + a2\n 25084: a2 = a1 <u a3\n 25087: a2 = a2 + t0\n 25090: a0 = a0 + a1\n 25093: a1 = a0 <u a1\n 25096: a1 = a1 + a2\n 25099: a2 = s1 + 0x300\n 25103: u64 [a2 + 0xa0] = a5\n 25107: u64 [a2 + 0xa8] = a4\n 25111: u64 [a2 + 0xb0] = a0\n 25115: u64 [a2 + 0xb8] = a1\n 25119: a1 = s1 + 0x3a0\n 25123: a0 = u64 [s1 + 0x68]\n 25126: ra = 828, jump @22\n      : @871 [@dyn 414] (gas: 3)\n 25132: a0 = s1 + 0x220\n 25136: a1 = 0x40\n 25139: ra = 830, jump @17\n      : @872 [@dyn 415] (gas: 6)\n 25145: a4 = s1 + 0x200\n 25149: a3 = u64 [a4 + 0x38]\n 25152: a1 = u64 [a4 + 0x30]\n 25155: a2 = u64 [a4 + 0x28]\n 25158: a0 = u64 [a4 + 0x20]\n 25161: t0 = 832, jump @930\n      : @873 [@dyn 416] (gas: 1)\n 25167: jump @877 if a1 != 0\n      : @874 (gas: 12)\n 25171: a1 = u64 [s1 + 0x90]\n 25175: a3 = s1 + 0x200\n 25179: u64 [a3] = a1\n 25181: a1 = u64 [s1 + 0x80]\n 25185: u64 [a3 + 0x8] = a1\n 25188: a1 = u64 [s1 + 0x88]\n 25192: u64 [a3 + 0x10] = a1\n 25195: a1 = s1 + 0x200\n 25199: a2 = u64 [s1 + 0x98]\n 25203: u64 [a3 + 0x18] = a2\n 25206: u64 [s1 + 0x98] = a0\n 25210: ra = 834, jump @19\n      : @875 [@dyn 417] (gas: 29)\n 25216: u64 [s1 + 440] = 0\n 25220: a0 = u64 [s1 + 0x38]\n 25223: a5 = s1 + 0x100\n 25227: u64 [a5 + 0xb0] = a0\n 25231: a0 = u64 [s1 + 0x40]\n 25234: u64 [a5 + 0xa8] = a0\n 25238: a0 = u64 [s1 + 0x48]\n 25241: u64 [a5 + 0xa0] = a0\n 25245: u64 [s1 + 472] = 0\n 25249: a0 = u64 [s1 + 0x50]\n 25252: u64 [a5 + 0xd0] = a0\n 25256: a0 = u64 [s1 + 0x58]\n 25259: u64 [a5 + 0xc8] = a0\n 25263: a0 = u64 [0x200b8]\n 25268: a1 = u64 [0x200c0]\n 25273: a2 = u64 [0x200c8]\n 25278: a3 = u64 [s1 + 0x60]\n 25281: u64 [a5 + 0xc0] = a3\n 25285: u64 [a5 + 0xf8] = a0\n 25289: u64 [a5 + 0xf0] = a1\n 25293: u64 [a5 + 0xe8] = a2\n 25297: a0 = u64 [0x200d0]\n 25302: a1 = 0x20\n 25305: a2 = s1 + 0x1e0\n 25309: a3 = s1 + 0x1c0\n 25313: a4 = s1 + 0x1a0\n 25317: u64 [a5 + 0xe0] = a0\n 25321: a0 = u64 [s1 + 0x98]\n 25325: ra = 836, jump @23\n      : @876 [@dyn 418] (gas: 7)\n 25331: sp = s0 + 0xfffffffffffffc20\n 25335: a0 = sp + 0x300\n 25339: ra = u64 [a0 + 0xd8]\n 25343: s0 = u64 [a0 + 0xd0]\n 25347: s1 = u64 [a0 + 0xc8]\n 25351: sp = sp + 0x3e0\n 25355: ret\n      : @877 (gas: 1)\n 25357: trap\n      : @878 (gas: 8)\n 25358: u64 [s1 + 208] = 0\n 25362: u64 [s1 + 200] = 0\n 25366: u64 [s1 + 192] = 0\n 25370: a0 = 0x96c6fd1e00000000\n 25380: a1 = s1 + 0xc0\n 25384: u64 [s1 + 0xd8] = a0\n 25388: a0 = 0\n 25390: ra = 838, jump @19\n      : @879 [@dyn 419] (gas: 7)\n 25396: u64 [s1 + 184] = 0\n 25400: u64 [s1 + 176] = 0\n 25404: u64 [s1 + 168] = 0\n 25408: a0 = 0x4\n 25411: a1 = s1 + 0xa0\n 25415: u64 [s1 + 160] = 0\n 25419: ra = 840, jump @19\n      : @880 [@dyn 420] (gas: 2)\n 25425: a1 = i32 [0x200fc]\n 25430: jump @882 if a1 >u 63\n      : @881 (gas: 3)\n 25434: u32 [0x200fc] = 0x40\n 25440: a1 = 0x20110\n 25445: jump @888\n      : @882 (gas: 2)\n 25447: a1 = 0x20110\n 25452: jump @888\n      : @883 (gas: 8)\n 25454: u64 [s1 + 272] = 0\n 25458: u64 [s1 + 264] = 0\n 25462: u64 [s1 + 256] = 0\n 25466: a0 = 0xec442f0500000000\n 25476: a1 = s1 + 0x100\n 25480: u64 [s1 + 0x118] = a0\n 25484: a0 = 0\n 25486: ra = 842, jump @19\n      : @884 [@dyn 421] (gas: 7)\n 25492: u64 [s1 + 248] = 0\n 25496: u64 [s1 + 240] = 0\n 25500: u64 [s1 + 232] = 0\n 25504: a0 = 0x4\n 25507: a1 = s1 + 0xe0\n 25511: u64 [s1 + 224] = 0\n 25515: ra = 844, jump @19\n      : @885 [@dyn 422] (gas: 2)\n 25521: a1 = i32 [0x200fc]\n 25526: jump @887 if a1 >u 63\n      : @886 (gas: 3)\n 25530: u32 [0x200fc] = 0x40\n 25536: a1 = 0x20110\n 25541: jump @888\n      : @887 (gas: 2)\n 25543: a1 = 0x20110\n 25548: fallthrough\n      : @888 (gas: 5)\n 25549: i32 a1 = a1 + 0\n 25551: a0 = 0x1\n 25554: a2 = 0x24\n 25557: ecalli 8 // 'seal_return'\n 25559: fallthrough\n      : @889 (gas: 8)\n 25560: u64 [s1 + 400] = 0\n 25564: u64 [s1 + 392] = 0\n 25568: u64 [s1 + 384] = 0\n 25572: a0 = 0xe450d38c00000000\n 25582: a1 = s1 + 0x180\n 25586: u64 [s1 + 0x198] = a0\n 25590: a0 = 0\n 25592: ra = 846, jump @19\n      : @890 [@dyn 423] (gas: 10)\n 25598: u64 [s1 + 376] = 0\n 25602: a0 = u64 [s1 + 0x50]\n 25605: u64 [s1 + 0x170] = a0\n 25609: a0 = u64 [s1 + 0x58]\n 25612: u64 [s1 + 0x168] = a0\n 25616: a0 = 0x4\n 25619: a1 = s1 + 0x160\n 25623: a2 = u64 [s1 + 0x60]\n 25626: u64 [s1 + 0x160] = a2\n 25630: ra = 848, jump @19\n      : @891 [@dyn 424] (gas: 11)\n 25636: a0 = u64 [s1 + 0x28]\n 25639: u64 [s1 + 0x158] = a0\n 25643: a0 = u64 [s1 + 0x20]\n 25646: u64 [s1 + 0x150] = a0\n 25650: a0 = u64 [s1 + 0x30]\n 25653: u64 [s1 + 0x148] = a0\n 25657: a0 = 0x24\n 25660: a1 = s1 + 0x140\n 25664: a2 = u64 [s1 + 0x68]\n 25667: u64 [s1 + 0x140] = a2\n 25671: ra = 850, jump @19\n      : @892 [@dyn 425] (gas: 12)\n 25677: a0 = u64 [s1 + 0x98]\n 25681: a3 = s1 + 0x100\n 25685: u64 [a3 + 0x38] = a0\n 25688: a0 = u64 [s1 + 0x88]\n 25692: u64 [a3 + 0x30] = a0\n 25695: a0 = u64 [s1 + 0x80]\n 25699: u64 [a3 + 0x28] = a0\n 25702: a0 = 0x44\n 25705: a1 = s1 + 0x120\n 25709: a2 = u64 [s1 + 0x90]\n 25713: u64 [a3 + 0x20] = a2\n 25716: ra = 852, jump @19\n      : @893 [@dyn 426] (gas: 3)\n 25722: a0 = u64 [s1 + 0x70]\n 25725: a0 = i32 [a0]\n 25727: jump @895 if a0 >u 127\n      : @894 (gas: 3)\n 25731: a1 = u64 [s1 + 0x70]\n 25734: u32 [a1 + 0] = 0x80\n 25738: fallthrough\n      : @895 (gas: 6)\n 25739: a0 = 0x1\n 25742: a2 = 0x64\n 25745: a1 = u64 [s1 + 0x78]\n 25748: ra = 0x356\n 25752: ecalli 8 // 'seal_return'\n 25754: fallthrough\n      : @896 [@dyn 427] (gas: 29)\n 25755: sp = sp + 0xfffffffffffffd00\n 25759: a2 = sp + 0x200\n 25763: u64 [a2 + 0xf8] = ra\n 25767: u64 [a2 + 0xf0] = s0\n 25771: u64 [a2 + 0xe8] = s1\n 25775: s0 = sp + 0x300\n 25779: sp = sp & 0xffffffffffffffe0\n 25782: s1 = sp\n 25784: a2 = u64 [a0 + 0x8]\n 25787: u64 [s1 + 0x38] = a2\n 25790: a2 = u32 [a0 + 0x10]\n 25793: u64 [s1 + 0x28] = a2\n 25796: a0 = u64 [a0]\n 25798: u64 [s1 + 0x30] = a0\n 25801: a0 = u64 [a1]\n 25803: u64 [s1 + 0x50] = a0\n 25806: a0 = u64 [a1 + 0x8]\n 25809: u64 [s1 + 0x48] = a0\n 25812: a0 = u64 [a1 + 0x10]\n 25815: u64 [s1 + 0x40] = a0\n 25818: a0 = u64 [a1 + 0x18]\n 25821: u64 [s1 + 0x58] = a0\n 25824: u64 [s1 + 536] = 0\n 25828: u64 [s1 + 528] = 0\n 25832: u64 [s1 + 520] = 0\n 25836: u64 [s1 + 512] = 0x2\n 25841: a0 = s1 + 0x1e0\n 25845: a1 = s1 + 0x200\n 25849: ra = 856, jump @21\n      : @897 [@dyn 428] (gas: 20)\n 25855: a3 = u64 [s1 + 0x1e0]\n 25859: a0 = u64 [s1 + 0x1e8]\n 25863: a1 = u64 [s1 + 0x1f0]\n 25867: a2 = u64 [s1 + 0x1f8]\n 25871: a4 = u64 [s1 + 0x58]\n 25874: u64 [s1 + 0x198] = a4\n 25878: a4 = u64 [s1 + 0x40]\n 25881: u64 [s1 + 0x190] = a4\n 25885: a4 = u64 [s1 + 0x48]\n 25888: u64 [s1 + 0x188] = a4\n 25892: a4 = u64 [s1 + 0x50]\n 25895: u64 [s1 + 0x180] = a4\n 25899: u64 [s1 + 0x1b8] = a2\n 25903: u64 [s1 + 0x1b0] = a1\n 25907: u64 [s1 + 0x1a8] = a0\n 25911: a0 = s1 + 0x1c0\n 25915: a1 = s1 + 0x1a0\n 25919: a2 = s1 + 0x180\n 25923: u64 [s1 + 0x1a0] = a3\n 25927: ra = 858, jump @824\n      : @898 [@dyn 429] (gas: 17)\n 25933: a4 = s1 + 0x100\n 25937: a0 = u64 [a4 + 0xc0]\n 25941: a1 = u64 [a4 + 0xc8]\n 25945: a2 = u64 [a4 + 0xd0]\n 25949: a3 = u64 [a4 + 0xd8]\n 25953: u64 [s1 + 568] = 0\n 25957: u64 [s1 + 560] = 0\n 25961: u64 [s1 + 552] = 0\n 25965: a5 = s1 + 0x200\n 25969: u64 [a5 + 32] = 0x2\n 25973: u64 [a5 + 0x58] = a3\n 25976: u64 [a5 + 0x50] = a2\n 25979: u64 [a5 + 0x48] = a1\n 25982: u64 [a5 + 0x40] = a0\n 25985: a0 = s1 + 0x220\n 25989: a1 = s1 + 0x240\n 25993: ra = 860, jump @22\n      : @899 [@dyn 430] (gas: 6)\n 25999: a3 = u64 [s1 + 0x28]\n 26002: a2 = u64 [s1 + 0x30]\n 26005: a1 = u64 [s1 + 0x38]\n 26008: a0 = a2 | a3\n 26011: a0 = a0 | a1\n 26014: jump @908 if a0 == 0\n      : @900 (gas: 8)\n 26018: u64 [s1 + 376] = 0\n 26022: a0 = s1 + 0x100\n 26026: u64 [a0 + 0x60] = a2\n 26029: u64 [a0 + 0x68] = a1\n 26032: a1 = s1 + 0x160\n 26036: u64 [a0 + 0x70] = a3\n 26039: a0 = 0\n 26041: ra = 862, jump @19\n      : @901 [@dyn 431] (gas: 7)\n 26047: u64 [s1 + 344] = 0\n 26051: u64 [s1 + 336] = 0\n 26055: u64 [s1 + 328] = 0\n 26059: a0 = 0x20\n 26062: a1 = s1 + 0x140\n 26066: u64 [s1 + 320] = 0\n 26070: ra = 864, jump @19\n      : @902 [@dyn 432] (gas: 6)\n 26076: a0 = sp + 0xffffffffffffffe0\n 26079: a0 = a0 & 0xffffffffffffffe0\n 26082: u64 [s1 + 0x20] = a0\n 26085: sp = a0\n 26087: a1 = i32 [0x200fc]\n 26092: jump @904 if a1 >u 63\n      : @903 (gas: 2)\n 26096: u32 [0x200fc] = 0x40\n 26102: fallthrough\n      : @904 (gas: 13)\n 26103: a0 = sp + 0xffffffffffffffe0\n 26106: a2 = a0 & 0xffffffffffffffe0\n 26109: u64 [s1 + 0x18] = a2\n 26112: sp = a2\n 26114: a0 = 0x20110\n 26119: i32 a0 = a0 + 0\n 26121: i32 a2 = a2 + 0\n 26123: a1 = 0x40\n 26126: ra = 0x362\n 26130: ecalli 6 // 'hash_keccak_256'\n 26132: a3 = u64 [s1 + 0x18]\n 26135: t0 = 0x364\n 26139: jump @922\n      : @905 [@dyn 433] (gas: 2)\n 26142: a3 = u64 [s1 + 0x18]\n 26145: t0 = 868, jump @922\n      : @906 [@dyn 434] (gas: 7)\n 26151: a1 = u64 [s1 + 0x20]\n 26154: u64 [a1 + 0x18] = a3\n 26157: u64 [a1 + 0x10] = a2\n 26160: u64 [a1 + 0x8] = a4\n 26163: u64 [a1] = a0\n 26165: a0 = s1 + 0x120\n 26169: ra = 870, jump @21\n      : @907 [@dyn 435] (gas: 32)\n 26175: a2 = s1 + 0x100\n 26179: a0 = u64 [a2 + 0x28]\n 26182: a1 = u64 [a2 + 0x20]\n 26185: t0 = u64 [s1 + 0x138]\n 26189: a3 = u64 [a2 + 0x30]\n 26192: a4 = u64 [s1 + 0x48]\n 26195: a4 = a4 + a0\n 26198: a5 = u64 [s1 + 0x50]\n 26201: a5 = a5 + a1\n 26204: a1 = a5 <u a1\n 26207: a4 = a4 + a1\n 26210: a2 = a4 ^ a0\n 26213: a0 = a4 <u a0\n 26216: a0 = a1 if a2 == 0\n 26219: a1 = u64 [s1 + 0x40]\n 26222: a1 = a1 + a3\n 26225: a2 = u64 [s1 + 0x58]\n 26228: t0 = t0 + a2\n 26231: a2 = a1 <u a3\n 26234: a2 = a2 + t0\n 26237: a0 = a0 + a1\n 26240: a1 = a0 <u a1\n 26243: a1 = a1 + a2\n 26246: a2 = s1 + 0x200\n 26250: u64 [a2 + 0x60] = a5\n 26253: u64 [a2 + 0x68] = a4\n 26256: u64 [a2 + 0x70] = a0\n 26259: u64 [a2 + 0x78] = a1\n 26262: a1 = s1 + 0x260\n 26266: a0 = u64 [s1 + 0x20]\n 26269: ra = 0x36a\n 26273: jump @22\n      : @908 (gas: 7)\n 26276: u64 [s1 + 664] = 0\n 26280: u64 [s1 + 656] = 0\n 26284: u64 [s1 + 648] = 0\n 26288: u64 [s1 + 640] = 0x2\n 26293: a0 = s1 + 0x100\n 26297: a1 = s1 + 0x280\n 26301: ra = 872, jump @21\n      : @909 [@dyn 436] (gas: 34)\n 26307: a1 = u64 [s1 + 0x108]\n 26311: t0 = u64 [s1 + 0x118]\n 26315: t1 = u64 [s1 + 0x100]\n 26319: a3 = u64 [s1 + 0x110]\n 26323: a4 = u64 [s1 + 0x48]\n 26326: a0 = a1 ^ a4\n 26329: a5 = a1 <u a4\n 26332: ra = u64 [s1 + 0x50]\n 26335: t2 = t1 <u ra\n 26338: a5 = t2 if a0 == 0\n 26341: a0 = u64 [s1 + 0x40]\n 26344: a2 = a3 - a0\n 26347: a3 = a3 <u a0\n 26350: a0 = u64 [s1 + 0x58]\n 26353: a0 = t0 - a0\n 26356: a0 = a0 - a3\n 26359: a3 = a2 <u a5\n 26362: a0 = a0 - a3\n 26365: a3 = a2 - a5\n 26368: a1 = a1 - a4\n 26371: a1 = a1 - t2\n 26374: a4 = s1 + 0x200\n 26378: u64 [a4 + 160] = 0x2\n 26383: a2 = t1 - ra\n 26386: u64 [a4 + 0xc0] = a2\n 26390: u64 [a4 + 0xc8] = a1\n 26394: u64 [a4 + 0xd0] = a3\n 26398: u64 [a4 + 0xd8] = a0\n 26402: u64 [s1 + 696] = 0\n 26406: u64 [s1 + 688] = 0\n 26410: u64 [s1 + 680] = 0\n 26414: a0 = s1 + 0x2a0\n 26418: a1 = s1 + 0x2c0\n 26422: ra = 874, jump @22\n      : @910 [@dyn 437] (gas: 3)\n 26428: a0 = s1 + 0xe0\n 26432: a1 = 0x40\n 26435: ra = 876, jump @17\n      : @911 [@dyn 438] (gas: 5)\n 26441: a0 = u64 [s1 + 0xf8]\n 26445: a1 = u64 [s1 + 0xf0]\n 26449: a2 = u64 [s1 + 0xe8]\n 26453: a3 = u64 [s1 + 0xe0]\n 26457: t0 = 878, jump @932\n      : @912 [@dyn 439] (gas: 1)\n 26463: jump @916 if a0 != 0\n      : @913 (gas: 12)\n 26467: a0 = u64 [s1 + 0x50]\n 26470: u64 [s1 + 0xc0] = a0\n 26474: a0 = u64 [s1 + 0x48]\n 26477: u64 [s1 + 0xc8] = a0\n 26481: a0 = u64 [s1 + 0x40]\n 26484: u64 [s1 + 0xd0] = a0\n 26488: a1 = s1 + 0xc0\n 26492: a0 = u64 [s1 + 0x58]\n 26495: u64 [s1 + 0xd8] = a0\n 26499: a0 = a3\n 26501: u64 [s1 + 0x58] = a3\n 26504: ra = 880, jump @19\n      : @914 [@dyn 440] (gas: 25)\n 26510: u64 [s1 + 120] = 0\n 26513: a0 = u64 [s1 + 0x28]\n 26516: u64 [s1 + 0x70] = a0\n 26519: a0 = u64 [s1 + 0x38]\n 26522: u64 [s1 + 0x68] = a0\n 26525: a0 = u64 [s1 + 0x30]\n 26528: u64 [s1 + 0x60] = a0\n 26531: u64 [s1 + 152] = 0\n 26535: u64 [s1 + 144] = 0\n 26539: u64 [s1 + 136] = 0\n 26543: a0 = u64 [0x200d8]\n 26548: a1 = u64 [0x200e0]\n 26553: a2 = u64 [0x200e8]\n 26558: u64 [s1 + 128] = 0\n 26562: u64 [s1 + 0xb8] = a0\n 26566: u64 [s1 + 0xb0] = a1\n 26570: u64 [s1 + 0xa8] = a2\n 26574: a0 = u64 [0x200f0]\n 26579: a1 = 0x20\n 26582: a2 = s1 + 0xa0\n 26586: a3 = s1 + 0x80\n 26590: a4 = s1 + 0x60\n 26593: u64 [s1 + 0xa0] = a0\n 26597: a0 = u64 [s1 + 0x58]\n 26600: ra = 882, jump @23\n      : @915 [@dyn 441] (gas: 7)\n 26606: sp = s0 + 0xfffffffffffffd00\n 26610: a0 = sp + 0x200\n 26614: ra = u64 [a0 + 0xf8]\n 26618: s0 = u64 [a0 + 0xf0]\n 26622: s1 = u64 [a0 + 0xe8]\n 26626: sp = sp + 0x300\n 26630: ret\n      : @916 (gas: 1)\n 26632: trap\n      : @917 [export #0: 'call'] (gas: 2)\n 26633: a0 = 0\n 26635: ra = 884, jump @32\n      : @918 [@dyn 442] [export #1: 'deploy'] (gas: 2)\n 26641: a0 = 0x1\n 26644: ra = 886, jump @32\n      : @919 [@dyn 443] (gas: 14)\n 26650: a0 = u64 [a2 + 0x8]\n 26653: a1 = i32 [a2 + 0x10]\n 26656: a2 = u64 [a2]\n 26658: a0 = reverse a0\n 26660: a3 = a0 << 0x20\n 26663: a1 = reverse a1\n 26665: a1 = a1 >> 0x20\n 26668: a3 = a3 | a1\n 26671: a0 = a0 >> 0x20\n 26674: a1 = reverse a2\n 26676: a2 = a1 << 0x20\n 26679: a0 = a0 | a2\n 26682: a1 = a1 >> 0x20\n 26685: jump [t0]\n      : @920 (gas: 17)\n 26687: a2 = u64 [s1 + 0xb0]\n 26691: a0 = u64 [a2 + 0x8]\n 26694: a1 = i32 [a2 + 0x10]\n 26697: a2 = u64 [a2]\n 26699: a0 = reverse a0\n 26701: a3 = a0 << 0x20\n 26704: a1 = reverse a1\n 26706: a1 = a1 >> 0x20\n 26709: a3 = a3 | a1\n 26712: a0 = a0 >> 0x20\n 26715: a1 = reverse a2\n 26717: a2 = a1 << 0x20\n 26720: a0 = a0 | a2\n 26723: a1 = a1 >> 0x20\n 26726: a2 = s1 + 0x7ff\n 26730: a2 = a2 + 0x71\n 26733: jump [t0]\n      : @921 (gas: 22)\n 26735: a4 = u64 [s1 + 0x118]\n 26739: a2 = a4 <u 0x80\n 26743: a3 = u64 [s1 + 0xd0]\n 26747: a1 = a3 if a2 != 0\n 26750: a5 = u64 [s1 + 0xd8]\n 26754: a3 = u64 [s1 + 0xe8]\n 26758: a3 = a3 | a5\n 26761: a3 = a0 if a2 == 0\n 26764: a1 = 0xffffffffffffffff if a4 == 0\n 26767: a3 = 0xffffffffffffffff if a4 == 0\n 26770: a4 = u64 [s1 + 0xe0]\n 26774: a4 = 0 if a2 == 0\n 26776: a5 = 0 if a2 == 0\n 26778: a0 = u64 [s1 + 0xf8]\n 26782: a0 = a0 & ~a3\n 26785: a2 = u64 [s1 + 0x100]\n 26789: a1 = a2 & ~a1\n 26792: a2 = u64 [s1 + 0x108]\n 26796: a2 = a2 & ~a5\n 26799: a3 = u64 [s1 + 0x110]\n 26803: a3 = a3 & ~a4\n 26806: jump [t0]\n      : @922 (gas: 9)\n 26808: a0 = u64 [a3 + 0x18]\n 26811: a1 = u64 [a3 + 0x10]\n 26814: a2 = u64 [a3 + 0x8]\n 26817: a3 = u64 [a3]\n 26819: a0 = reverse a0\n 26821: a4 = reverse a1\n 26823: a2 = reverse a2\n 26825: a3 = reverse a3\n 26827: jump [t0]\n      : @923 (gas: 10)\n 26829: a0 = u64 [a3 + 0x18]\n 26832: a1 = u64 [a3 + 0x10]\n 26835: a2 = u64 [a3 + 0x8]\n 26838: a3 = u64 [a3]\n 26840: a0 = reverse a0\n 26842: a1 = reverse a1\n 26844: a2 = reverse a2\n 26846: a3 = reverse a3\n 26848: a4 = s1 + 0x1078\n 26852: jump [t0]\n      : @924 (gas: 8)\n 26854: a0 = a0 | a2\n 26857: a2 = a4 | a1\n 26860: a2 = a2 | a0\n 26863: a2 = a2 >> 0x20\n 26866: a0 = a0 | a1\n 26869: a0 = a0 << 0x20\n 26872: a0 = a0 | a2\n 26875: jump [t0]\n      : @925 (gas: 12)\n 26877: a3 = u64 [s1 + 0xd8]\n 26881: a0 = u64 [a3 + 0x18]\n 26884: a1 = u64 [a3 + 0x10]\n 26887: a2 = u64 [a3 + 0x8]\n 26890: a3 = u64 [a3]\n 26892: a0 = reverse a0\n 26894: a1 = reverse a1\n 26896: a2 = reverse a2\n 26898: a3 = reverse a3\n 26900: a4 = s1 + 0x1078\n 26904: a5 = a4 + 0x400\n 26908: jump [t0]\n      : @926 (gas: 14)\n 26910: a0 = u64 [a2 + 0x8]\n 26913: a1 = u64 [a2]\n 26915: a2 = i32 [a2 + 0x10]\n 26918: a0 = reverse a0\n 26920: a3 = a0 >> 0x20\n 26923: a1 = reverse a1\n 26925: a4 = a1 << 0x20\n 26928: a3 = a3 | a4\n 26931: a0 = a0 << 0x20\n 26934: a2 = reverse a2\n 26936: a2 = a2 >> 0x20\n 26939: a0 = a0 | a2\n 26942: a1 = a1 >> 0x20\n 26945: jump [t0]\n      : @927 (gas: 13)\n 26947: a4 = a0 << 0x3f\n 26950: a5 = a1 >> 0x1\n 26953: t1 = a5 | a4\n 26956: a5 = a3 << 0x3f\n 26959: a0 = a0 >> 0x1\n 26962: a0 = a0 | a5\n 26965: a1 = a1 << 0x3f\n 26968: a5 = a2 >> 0x1\n 26971: a1 = a1 | a5\n 26974: a3 = a3 >> 0x1\n 26977: a2 = a2 & 0x1\n 26980: a5 = -a2\n 26982: jump [t0]\n      : @928 (gas: 10)\n 26984: a4 = 0 if a2 == 0\n 26986: a1 = u64 [s1 + 0xf8]\n 26990: a1 = a1 & ~a3\n 26993: a2 = u64 [s1 + 0x100]\n 26997: a0 = a2 & ~a0\n 27000: a2 = u64 [s1 + 0x108]\n 27004: a2 = a2 & ~a4\n 27007: a3 = u64 [s1 + 0x110]\n 27011: a3 = a3 & ~a5\n 27014: jump [t0]\n      : @929 (gas: 11)\n 27016: a3 = u64 [s1 + 0xf8]\n 27020: a0 = u64 [a3 + 0x18]\n 27023: a1 = u64 [a3 + 0x10]\n 27026: a2 = u64 [a3 + 0x8]\n 27029: a3 = u64 [a3]\n 27031: a0 = reverse a0\n 27033: a1 = reverse a1\n 27035: a2 = reverse a2\n 27037: a3 = reverse a3\n 27039: a4 = s1 + 0x1878\n 27043: jump [t0]\n      : @930 (gas: 8)\n 27045: a3 = a3 | a2\n 27048: a2 = a0 | a1\n 27051: a2 = a2 | a3\n 27054: a2 = a2 >> 0x20\n 27057: a1 = a1 | a3\n 27060: a1 = a1 << 0x20\n 27063: a1 = a1 | a2\n 27066: jump [t0]\n      : @931 (gas: 4)\n 27068: a0 = 0x1078\n 27072: a3 = s1 + a0\n 27075: a4 = a3 + 0x600\n 27079: jump [t0]\n      : @932 (gas: 8)\n 27081: a0 = a0 | a2\n 27084: a2 = a3 | a1\n 27087: a2 = a2 | a0\n 27090: a2 = a2 >> 0x20\n 27093: a0 = a0 | a1\n 27096: a0 = a0 << 0x20\n 27099: a0 = a0 | a2\n 27102: jump [t0]\n      : @933 (gas: 8)\n 27104: a2 = a4 >u 0\n 27106: a1 = a1 ^ 0x1\n 27109: a1 = a2 if a4 != 0\n 27112: a2 = t2 >u 0\n 27114: a3 = a5 >u 0\n 27116: a3 = a2 if a5 == 0\n 27119: a3 = a1 if a0 == 0\n 27122: jump [t0]\n      : @934 (gas: 10)\n 27124: a0 = u64 [sp + 0x10]\n 27127: a1 = u64 [sp + 0x18]\n 27130: a2 = 0x100000000\n 27140: a2 = a2 ^ a0\n 27143: a2 = a2 | a1\n 27146: a3 = a0 >> 0x20\n 27149: a3 = a3 <u 0x1\n 27152: a3 = 0 if a1 != 0\n 27154: a3 = 0 if a2 == 0\n 27156: jump [t0]\n      : @935 (gas: 10)\n 27158: a0 = u64 [a3 + 0x18]\n 27161: a1 = u64 [a3 + 0x10]\n 27164: a2 = u64 [a3 + 0x8]\n 27167: a3 = u64 [a3]\n 27169: a0 = reverse a0\n 27171: a1 = reverse a1\n 27173: a2 = reverse a2\n 27175: a3 = reverse a3\n 27177: a4 = s1 + 0x300\n 27181: jump [t0]\n      : @936 (gas: 8)\n 27183: a0 = u64 [a4 + 0x38]\n 27186: a1 = u64 [a4 + 0x40]\n 27189: a2 = u64 [a4 + 0x30]\n 27192: a3 = u64 [a4 + 0x28]\n 27195: a1 = a1 | a2\n 27198: a0 = a0 | a3\n 27201: a0 = a0 | a1\n 27204: jump [t0]\n      : @937 (gas: 8)\n 27206: a4 = a4 | a2\n 27209: a2 = a0 | a1\n 27212: a2 = a2 | a4\n 27215: a2 = a2 >> 0x20\n 27218: a1 = a1 | a4\n 27221: a1 = a1 << 0x20\n 27224: a1 = a1 | a2\n 27227: jump [t0]\n      : @938 (gas: 8)\n 27229: a2 = a1 | a5\n 27232: a0 = a0 | a3\n 27235: a2 = a2 | a0\n 27238: a2 = a2 >> 0x20\n 27241: a0 = a0 | a5\n 27244: a0 = a0 << 0x20\n 27247: a0 = a0 | a2\n 27250: jump [t0]\n      : @939 (gas: 10)\n 27252: u64 [s1 + 264] = 0\n 27256: a4 = 0\n 27258: ra = 0\n 27260: u64 [s1 + 248] = 0\n 27264: u64 [s1 + 256] = 0\n 27268: a3 = u64 [s1 + 0xe8]\n 27272: a0 = u64 [a3 + 0x18]\n 27275: a1 = u64 [a3 + 0x10]\n 27278: a2 = u64 [a3 + 0x8]\n 27281: jump [t0]\n      : @940 (gas: 12)\n 27283: a2 = u64 [sp]\n 27285: a3 = u64 [sp + 0x8]\n 27288: u64 [s1] = a2\n 27290: u64 [s1 + 0x8] = a3\n 27293: u64 [s1 + 0x10] = a0\n 27296: u64 [s1 + 0x18] = a1\n 27299: sp = s0 + 0xffffffffffffffc0\n 27302: ra = u64 [sp + 0x38]\n 27305: s0 = u64 [sp + 0x30]\n 27308: s1 = u64 [sp + 0x28]\n 27311: sp = sp + 0x40\n 27314: jump [t0]\n      : @941 (gas: 7)\n 27316: a0 = a0 << 0x3b\n 27319: a1 = a0 >> 0x38\n 27322: u64 [s1 + 0x118] = a1\n 27326: a2 = 0x80 - a1\n 27330: a0 = 0xffffffffffffffff\n 27333: a1 = 0xffffffffffffffff\n 27336: jump [t0]\n      : @942 (gas: 9)\n 27338: a0 = u64 [a2 + 0x8]\n 27341: a1 = i32 [a2 + 0x10]\n 27344: a2 = u64 [a2]\n 27346: a0 = reverse a0\n 27348: a3 = a0 << 0x20\n 27351: a1 = reverse a1\n 27353: a1 = a1 >> 0x20\n 27356: a1 = a1 | a3\n 27359: jump [t0]\n      : @943 (gas: 10)\n 27361: u64 [s1 + 0xd8] = a0\n 27365: u64 [s1 + 0xe0] = a1\n 27369: a0 = u64 [s1 + 0xd0]\n 27373: a0 = a0 | a1\n 27376: u64 [s1 + 0xd0] = a0\n 27380: a0 = u64 [s1 + 0x118]\n 27384: a2 = a0 + 0xffffffffffffff80\n 27387: a0 = 0xffffffffffffffff\n 27390: a1 = 0xffffffffffffffff\n 27393: jump [t0]\n      : @944 (gas: 6)\n 27395: a0 = u32 [a2 + 0x10]\n 27398: a1 = u64 [a2]\n 27400: a2 = u64 [a2 + 0x8]\n 27403: a0 = a0 | a1\n 27406: a0 = a0 | a2\n 27409: jump [t0]\n      : @945 (gas: 8)\n 27411: a0 = sp + 0xffffffffffffffe0\n 27414: a0 = a0 & 0xffffffffffffffe0\n 27417: u64 [s1 + 0xf8] = a0\n 27421: sp = a0\n 27423: i32 a2 = a0 + 0\n 27425: a1 = 0x40\n 27428: a0 = u64 [s1 + 0xd0]\n 27432: jump [t0]\n      : @946 (gas: 8)\n 27434: a0 = u64 [a2 + 0x8]\n 27437: a1 = i32 [a2 + 0x10]\n 27440: a2 = u64 [a2]\n 27442: a3 = reverse a0\n 27444: a0 = a3 << 0x20\n 27447: a1 = reverse a1\n 27449: a1 = a1 >> 0x20\n 27452: jump [t0]\n      : @947 (gas: 8)\n 27454: a0 = a0 + a4\n 27457: a3 = a3 + a1\n 27460: a5 = a3 <u a1\n 27463: a0 = a0 + a5\n 27466: ra = u64 [s1 + 0xe0]\n 27470: ra = ra + a3\n 27473: a3 = ra <u a3\n 27476: jump [t0]\n      : @948 (gas: 4)\n 27478: a0 = 0x1078\n 27482: a3 = s1 + a0\n 27485: a4 = a3 + 0x700\n 27489: jump [t0]\n      : @949 (gas: 4)\n 27491: a0 = 0x1078\n 27495: a3 = s1 + a0\n 27498: a4 = a3 + 0x300\n 27502: jump [t0]\n      : @950 (gas: 6)\n 27504: a1 = a3 << 0x3\n 27507: u64 [s1 + 0x118] = a1\n 27511: i32 a2 = 0x80 - a1\n 27515: a0 = 0xffffffffffffffff\n 27518: a1 = 0xffffffffffffffff\n 27521: jump [t0]\n      : @951 (gas: 7)\n 27523: a3 = a3 | a5\n 27526: a3 = a1 if a2 == 0\n 27529: a1 = 0xffffffffffffffff\n 27532: a0 = a1 if a4 == 0\n 27535: a3 = a1 if a4 == 0\n 27538: a5 = 0 if a2 == 0\n 27540: jump [t0]\n      : @952 (gas: 8)\n 27542: a0 = u64 [a4 + 0xb8]\n 27546: a1 = u64 [a4 + 0xc0]\n 27550: a2 = u64 [a4 + 0xb0]\n 27554: a3 = u64 [a4 + 0xa8]\n 27558: a1 = a1 | a2\n 27561: a0 = a0 | a3\n 27564: a0 = a0 | a1\n 27567: jump [t0]\n      : @953 (gas: 6)\n 27569: a0 = u64 [a3 + 0x18]\n 27572: a1 = u64 [a3 + 0x10]\n 27575: a2 = u64 [a3 + 0x8]\n 27578: a3 = u64 [a3]\n 27580: a0 = reverse a0\n 27582: jump [t0]\n      : @954 (gas: 9)\n 27584: sp = sp + 0xffffffffffffffc0\n 27587: u64 [sp + 0x38] = ra\n 27590: u64 [sp + 0x30] = s0\n 27593: u64 [sp + 0x28] = s1\n 27596: s0 = sp + 0x40\n 27599: sp = sp & 0xffffffffffffffe0\n 27602: s1 = a0\n 27604: i32 a0 = sp + 0\n 27606: jump [t0]\n      : @955 (gas: 8)\n 27608: a1 = sp + 0xffffffffffffffe0\n 27611: a1 = a1 & 0xffffffffffffffe0\n 27614: u64 [s1 + 0xe8] = a1\n 27618: sp = a1\n 27620: i32 a0 = a0 + 0\n 27622: i32 a2 = a1 + 0\n 27624: a1 = 0x20\n 27627: jump [t0]\n      : @956 (gas: 2)\n 27629: a3 = a2 & 0x40\n 27632: jump @960 if a3 != 0\n      : @957 (gas: 1)\n 27635: jump @959 if a2 == 0\n      : @958 (gas: 6)\n 27638: i32 a3 = 0x40 - a2\n 27641: a3 = a1 << a3\n 27644: a1 = a1 >> a2\n 27647: a0 = a0 >> a2\n 27650: a0 = a0 | a3\n 27653: ret\n      : @959 (gas: 1)\n 27655: ret\n      : @960 (gas: 4)\n 27657: a0 = a2 + 0xffffffffffffffc0\n 27660: a0 = a1 >> a0\n 27663: a1 = 0\n 27665: ret\n      : @961 (gas: 2)\n 27667: a3 = a2 & 0x40\n 27670: jump @965 if a3 != 0\n      : @962 (gas: 1)\n 27673: jump @964 if a2 == 0\n      : @963 (gas: 6)\n 27676: i32 a3 = 0x40 - a2\n 27679: a3 = a0 >> a3\n 27682: a0 = a0 << a2\n 27685: a1 = a1 << a2\n 27688: a1 = a1 | a3\n 27691: ret\n      : @964 (gas: 1)\n 27693: ret\n      : @965 (gas: 4)\n 27695: a1 = a2 + 0xffffffffffffffc0\n 27698: a1 = a0 << a1\n 27701: a0 = 0\n 27703: ret\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": "50564d00002f7f000000000000010700c13001c000800380f8ffff7f09b51e38fd9bc8e21bad52f2ddaa8d37fc68b0c26916a1c463f1a72b95efb323f54d5af5281af85fc1fbac358af209d74f347dae39c6658caab400868e9bd16be37ffe4bb66465656e20756f5974696177206f742072756f68206e61206e65657774656220000073746e696d205b7decebe5e15b8cf3841e7d42714fd11e29b2f7c01403dd25b9c3c7c80a205b003c599e0e5a57c228db122fc9f859f9d002053b5a39c3695bf8716f4416255e656e776f20746f4e9bc8e21bad52f2ddaa8d37fc68b0c26916a1c463f1a72b95efb323f54d5af5289bc8e21bad52f2ddaa8d37fc68b0c26916a1c463f1a72b95efb323f54d5af5280480c40c000000000e0000001c0000002a000000300000003d00000048000000570000005a00000065000000770000008200000063616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a6563616c6c65726465706f7369745f6576656e746765745f73746f72616765686173685f6b656363616b5f3235366e6f777365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e73666572726564051302c009680463616c6cc01168066465706c6f7906c03d7d81bb02c0396c9b00e30100040804de0422056105bd0505062706f0064607e30736089608af08d80812092b0ae00a8e0ba40ba90bbb0b8e0cbf0cfa0d090e300e350e4c0e510e560e5b0e7c0e010f510f560f6f0f940fb00fb90f28105810cc10e5100c11471163122b13a413ba13bf13d11377149014ce140f161c1645164a16611666166c167216981631179a17a017bb17e117fe170818601880188a18cd186419791983199f19bc19011a0b1a241a841a911aab1adb1af01afa1a681b7d1b871bcc1b251c661c731c8d1cec1cfc1c1a1d541d641d821dbc1dcc1dea1d241e341e521e971eb41eec1efc1e1a1f551f6b1f761f9c1f45204b2051207920ab20d6200f2119213f217b219c21002206220c222c227a225c23cc23c1242325e825f625292633264f266d26b026b626d02604270e272a2748277c2782279d27e0273228bd281c297629b4291a2a5c2a6a2a9b2aa12af12a2d2b4e2ba62be32b1f2c282c482c8a2c902caa2cff2c082d282d422d4f2d552d702db72d0d2e922eac2ef92eff2e052f292f4a2fd82f1230ab30d6301c3126315f3165318931c331f531fe311a32b732c132fb322633583361338f339533b633ed3395343d354d357335be35c4351036ac36ea362e3734377537ac37d6370f3819383b3877389638f438fa38493976399039ee39f439fa39343a653a823ae13ae73aed3a113b993ba33be03bea3b063c243c6a3c743cbe3cef3c443d513d6b3d9e3db33dbd3d373e443e5a3ed33e3c3f463fb43fc13fe23f6c409740e140ea400a4150415a41b941ee410842194223423c426d428742bb42c842ef429443ec4300454345f645d0466a47f94703486d4882488c48a848c64831493b497b49fd49284a2e4b3e4b5c4ba64bb44b774c944cd94cf64c7f4d9c4dee4d194e684e794e7f4e9c4ecc4e024f674fc54fef4f3a5077507d5007513b5145517d51d151f45144527f528952cc52005306536053a353cd532654d054155523553c5560550a567756d456d057de57eb576058b058c058de5818599359c259315aa45ab25abf5a335ba75bb75bbd5bc65be15be75bf75bfd5b065c1b5cd25ce05cf95c1d5d6e5dc75d105e425e875e925ea15e3e5f5b5f9d5fa65fc05f47606460e060e9601f6148616561a061a961c1612c6239624f628062f362346351639463b163fe6324644d647a649b64ff644d658f65bf65dc651e6627663f66c3663c6749675f678e67ee6711681a68aa876e978a2098aa20977b2098bb20c89b0bc9ba0a979b019abbaeab20ae873751094ec87909647a017c8b95880195ac0178ab64caab9cf42836510934c87909647a017c8b95880195ac0178ab64caab9cf4281c51091a839aff01c8a80b7cbb9599ffc8a70c78cb83aaff5209f0320039080001025108ea1e330730010383770a0928dd1e9511f07b10087b15648964753308206497501002f9037c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032009511d87b10207b15187b161082897b19088289087b19828510828618330820501004b1026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511a07b10587b15507b16489515608411e06476828718828910828a0882886f776f996faa6f887b18187b1a107b19087b17491138491130491128491120481140208318831a20831b403309ff33070a05821738821830821928821a206f776f886f996faa7b6a187b69107b68087b679551a082105882155082164895116032009511a07b10587b15509515608411e08272827a08827b108277188283828908828c108288186f746fbb6faa6f276f826fcc6f996f387b17187b1a107b1b087b147b18387b19307b1c287b12208318831a203309ff330b2033070a0a9551a08210588215509511603200951120ff7b10d8007b15d0007b16c8009515e0008411e082bc7b1c4082bc087b1c4882bc107b1c5082bb187b1b5833020682ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b1910491138203300082892007b18385010088c006f687b187882186f887b18708218086f887b18688218106f887b18608218186f887b1898008218206f887b1890008218286f887b1888008218306f887b1880008218406f887b18b8008218486f887b18b0008218506f887b18a8008218586f887b18a0008379811a388317603308030a04955120ff8210d8008215d0008216c8009511e00032008b7910520931c8780883881f8488e05638000001253309fc0002390afc0002ae8a093d08fc00020133081001028377c887073200009511f07b10087b158475010a02013d07f8000251050750100a4833000c951110fe7b10e8017b15e0017b16d8019515f001951170e88411e064169569781049294003492938034929280380003307409568a013492930033300ee0028a0fc951108f8951700077b70f0007b75e8007b76e0009515f807951198fd8411e064164926180749261007492600078000330740956800074926080750100e63fc49263807492630074926280749262007836720070a0b01956b000782b73082b83882b92882ba20d49808d4a707d4870751070628fe163809f800024926d8064926d0064926c8069567e0069568c0067b6918017b69c006501010344e956b000682baf80082b9f00082b8e80082b7e000956b00017bba107bb8d48a0ad49708d4a8089888207bb908d4a909979920d49808510806289c167b67f800826818015010128ffe83778168180133090a018268180156183f07288b169567a0068268f80050101463fa8267b8068262b006826ba8067b67f000d4720988ba01949a520a06287016826aa0068263f80082641801c83404d83408c8a3037b631801d8a30a82690001c89b07649cc8a703d3b309d8b30bda9a0b64c9c88c0cd89c09da880982680801c8820ad82a00826710018262f000c87202c82000c89802c8ab0bd8ab09c8900ad88208c878087b64f0007b6440067b6ce8007b6c480682671801956c00067bc7607b6218017b6250067b68e0007bc8587b6368067bcb709567800695686006956940067bca78501016754e8269f800956b000182b70882b810d487071408e0ffffff00000000d8890882ba94a89478520806287a15826798067b67a000826790067b679800826788067b67a800826780067b67b0008398209567200650101844f9826238068268300682692806d4280a889b0194ab520b06286515826a2006826bf800c8ab0bd8ab0a826c0001c89c0cc8ac0cd39c07d89c09da7a0982670801c88707c87909d8790ad8870782681001c88202c82707c87a0a8267f0007b67c0058267e8007b67c8057b6be00582671801956b00057bb7d0008267e0007bb7d8007bbce8007bb9f000956700069568e0059569c0057bbaf80050101a824d82699800826bb000d49b078268a000826aa800d4a808d48707987720d49808978820d4870751070628861464b8956900068297187b67788297107b67708297087b67800082977b6788009567a00550101c54f895670005827ab8008278b0008279a8008ea78e8bdba70b7b69d0008e977b68607b6ac800d4a8087b67587b6b90007b68c000db8b075107062863148267a0057b67684926580749265007492648074926400703956780059568400750101e20fa956b000582b7900082b8880082b9800082ba9800501220996088920184807fd27c04d23c0bdb9800880820d2ac0c648994b9d4c4079479aa92062869145012220d618267688877207b67b800510a2f027b6bf0007b60f8007b6c00017b6410014926780549267005492668059568600549266005033307501024b2f83908fc000256181f0b2003fc000220019517e08479e07b69080164913307100102837783993308200a0682676895781fd87807826cd000c87c09d8c90ada770a826b60c8ba0a7b6ae80097aa3b989b05d4ab0b8267080182731897993b827a10988805d498076f346fa98268b80094c8826ac00094a8948b9487c87402d84207c8790cc8cb0b7b6b1801d39b0cd89b0adac70a7b6ae0008267f80095701fd8700b826af000c8ba07d8a70cdabb0c82631001c8c303973b3b987a05d4ba0a97773b980b05d4b707c847077b67f800d847076424c8790bc8ab0bd39b0a7b6bf000d89b09daa709826be800826760d87b07826ac800c8a70798ba05977b3bd4ba0a826b080182b282bb08987705948a94876fb86f2b5012261861c8a70282671001d87307826a0001c8a707983a05977c3bd4ca0a987705c8b707826b1801c88a0ad88a08c88707c8a9097b69e800d8a908c887077b67e0009517e08473e064317b63d800018267f800d874078269f000d39b08d89b09da8709826ce800d8c007826ae000d3a208d8a20ada870ad3c007d48707da790a7b347b3b087b30107b3218510a5f492678074926700749266807492660079568600764377b6410017b6b18017b6208017b60000150102857f88263d80082620801826b180182641001954401884701c87b0bd4b40788770182680001c88707d88708c8820264702868ff8267b800857701826cd000826858dbc807826890008269c000db98078260c800d40c0b82686098843f97000198c93f7b69589789017b6948826a6898a23f97c9017b695097a901510725027b6b207b62307b60387b64287b694084aae07b6a9000492638054926300549262805956820054926200503330750102a36f69517e08477e07b67f0006471330820330750102cf0f850122e34600a064926180120330c49261001501230be5e82a26f736f886f9a6f2964928267f0007b79187b6ad0007b7a107b68e8007b7808643a7b7301642464a3826790007b6be000d87b07857b017b60d800940b01826700018269f800d49707947b018268b00082671801c87808826aa80064c2c8ca0a8269980082671001c879098267a000826c0801c8c707520b7b01826b1801d8b80bc8ba00642ad32002d8a00cda2b0cc89c0cd89c02826b1001d8b909c89707c82707d4c809d47007d47909989920d4c707977720d497077b63c8007b64c0005107062813109567a0017b6ab800501032fcf38267b8018268b0018269a801826aa001956b00077bb798007bb890007bb988007bba8000956880078267f00050103478f68260c8009500018807018262e800c87202d420078877018268d000c87803d883088267c000c88707826818019589207b69c800d8890a8268b800c8a8097b69c000d8890bdaaa0b82681001c8b804d8840b82680801c8b8087b6808018268e000958b20d88b0c8269d800c8c908d89809dacc09826af800c8a909d8a90c826a0001c8ca0a7b6a0001642a7b6ae800826cf0007bca08640a7bc07bc31064727bc7187b63d0008267c8007b671801826cc0007b64100164807b69f8002867fed48a07d4b707826bb0008263a8008268a000826c980052073e017b6940492600014926f80049260801492610012884016420826368826b9000d33b0b826c60d4cb0b826c20d4cb0b826c38826230510bb800826b1801d8b80bc8ba0ad30a02d80a0cda2b0cc89c0cd89c02826b1001d8b909c89707c82707501236685c51070628940e9567000550103881f2956800058287187b6710018287107b6708018287087b67000182877b67f80082676850123a895c50103ce35d7b67e8007b68d0003307ff3308ff8269180150103ea65d501240955c5010429c5d501244195a956b00077bbab8007bb9b0007bb8a8007bb7a0009568a0078267f000501046bbf4826230826c3801826728d4c707826858826948d49808826950d42909826a4095aa014926d8074926d0074926c807956c0007492cc000037bcae0007bc9e8007bc8f0007bc7f8009567c0079568e0073300562864f4d48c071408e0ffffff00000000d88b08943894785108ac0d7b694083b820956740057b64287b60387b623050104889f1826230826038826428826a6895680005828758956900017b97108287507b97088287487b67f8008287407b9701826758826848d487077b67f000d440077b67e800826750d427077b67e00050124a245c50104cc25c7b67c0007b68d8008267688a79033307ff3308ff50104e835c7b67d0007b68c8008268c000d487077b67c000826718018379803307ff3308ff5010505e5c826b180188b98000826ac000db9a07826cc800826ad800501252d85b826bd000501254b459826b40d4b707826be000d4b808826be800d4ba0a826bf000d4b909956c0010492c00f803956b00107bb930f8956900107b9a38f8956900107b9828f8956800107b8720f895670010492718f895670010492710f895670010492708f89567ff079577019568ff079588215010560ff382688800826b70d4b80782698000826a78d4a909d49707987720d4b909979920d497075207460c9567e00450105832f095670004827af8008279f0008278e8008ea78e9bdba70b7b68a0008e877b6998007b6a9000d4a9097b67b8007b6bc0007b69d000db9b075207120d8267e0047b67a80095670010492758f895670010492750f895670010492748f895680010492840f8049567c0049568ff0795884150105aeaf1956b000482b7d00082b8c80082b9c00082bad80050125c635888920184807fd27c04d23c0bdb9800880820d2ac0c648994b9d4c4079479ab92060d50125ed9588267a8008877207b67c800510a45027b6bf0007b60f8007b6c00017b6410014926b8044926b0044926a8049568a0044926a0040433075010607df03908fc000256181f0b2003fc000220019517e08479e07b69080164913307100102837783993308200a068267a80095781fd87807826ca000c87c09d8c90ada770a826b9800c8ba0a7b6ae80097aa3b989b05d4ab0b8267080182721897993b827710988805d489096f246f778268c80094c8826ad00094a8948b9489c89402d84209c8970cc8cb0b7b6b1801d37b0cd87b0adac90a7b6ae0008269f80095901fd8900b826af000c8ba09d8a90cdabb0c82631001c8c303973b3b989a05d4ba0a97993b980b05d4b909c849097b69f800d8490b6424c8b709c8a909d3790a7b69f000d87909daab09826be80082679800d87b07826a9000c8a70798ba05977b3bd4ba0a826b080182b282bb08987705948a94876fb86f2b501262e058c8a70282671001d87307826a0001c8a707983a05977c3bd4ca0a987705c8b707826b1801c88a0ad88a08c88707c8a9097b69e800d8a908c887077b67e0009517e08473e064317b63d800018267f800d874078269f000d39b08d89b09da8709826ce800d8c007826ae000d3a208d8a20ada870ad3c007d48707da790a7b347b3b087b30107b3218510a7295670010492778f895670010492770f895670010492768f895670010492760f89568ff0795886164377b6410017b6b18017b6208017b6000015010640cf08263d80082620801826b180182641001954401884701c87b0bd4b40788770182680001c88707d88708c8820264702855ff8267c800857701826ba0008268b800dbb8078268c0008269d000db9807510713028267a8008477e07b67b000492678044926700449266804956860044926600404330750106620ee9517e08477e07b67f00064713308203307501068daf050126a1e580a064926100120330c4926180150126ca85682a26f736f886f9a6f2964928267f0007b79187b6ac8007b7a107b68e0007b7808643a7b7301642364a48267b0007b6bd800d87b07857b017b60d000940b01826700018269f800d49707947b018268880082601001c80808826a800064c2c8ca0a82697082671801c87909826778826c0801c8c7077b62e800520b7201d8080bc8ba0a642cd32a02d8ca0cda2b0cc89c0cd89c02826b1801d8b909c89707c8270750126eeb557b64c0007b63b80052071208956740027b601001501070faeb956b000282b75882b85082b94882ba40956bff0795bb99007bb77bb8f8956700107b7988f8956700107b7a80f89568ff07958881008267f00050107269ee8260c0009500018807018262e000c87202d420078877018268c800c87803d883088267b800c88707826810019589207b69c000d8890a8268e800c8a8097b69b800d8890bdaaa0b82681801c8b804d8840b82680801c8b8087b6808018268d800958b20d88b0c8269d000c8c908d89809dacc09826af800c8a909d8a90c826a0001c8ca0a7b6a0001642a7b6ae000826cf0007bca08640a7bc07bc31064727bc7187b63c8008267c0007b671001826cb8007b64180164807b69f800286efe826aa800826c9800d4ca0782699000d49b08d487078262880052075d01492600014926f800492608014926100128ad018262a800826bb000d32b0b82649800d44b0b8263a00082609000d4030cd4cb0b510bcd00826b1001d8b80bc8ba0a826ce800d3ca02d8ca0cda2b0cc89c0cd89c02826b1801d8b909c89707c82707501274535452078206956740045010766eea956800048287587b6710018287507b6708018287487b6700018287407b67f8008267a800501278745450107ace557b67e8007b68d0003307ff3308ff8269180150107c915550127e8054502080008755502282000352956bff0795bb99007bba207bb9187bb8107bb7089568ff079588a1008267f00050208400a0ec8262a8008263a00082649800826090000198473f970801d4870798383f974901d4980898293f973a01d4a909972a0195aa01956cff0795cc9900491c40491c38491c30491c28047bca487bc9507bc8587bc7609567ff079577c1009568ff079588e100330094002833ec826778826870d487071408e0ffffff00000000d88208826a800094a894785108710583282095678004502086005ae982699000826c9800826ba000826aa80095680004828798007b671001828790007b670801828788007b67f800828780007b6700010198b73f97c801d487077b67f00098c73f979801d487077b67e80098a73f97b801d487077b67e00097a7017b67d80050228800dc5350208a0079547b67b8007b68d0008267a8008a79033307ff3308ff50208c0038547b67c8007b68c0008268b800d487077b67b800826718018379803307ff3308ff50208e001254826b180188b98000826ab800db9a07826cc000826ad000502290008b53826bc800502292006651826bd800d4b707826be000d4b808826be800d4ba0a826bf000d4b909956cff0795cc9900491c68047bc998007bcaa0007bc890007bc78800492c8000491c78491c709567ff07957701019568ff079588210150209400d8ea33071001037b67180183777b671001330096000a03826918013302980028865282691801502298007f525107e705492608012d151407000080f64ae1c7027b6700019567ff07957799004927c0004927b8004927b0004927a80002956720049568ff079588410150209a00eae9826738047b67f80082643004826a2804826020049518e08488e0648182630001c80303d8030782690801c8a909c87909d3a90bd8a90cdab70c3a0200000285a7d2ea8eaad2ead8020bdb7a0b7b89087b83c84c0c7b8c10d84c078269f800c89707d29409959901949b7b8718520b98059567ff07957799004927e0004927d8004927d0004927c800029567ff079577610150209c00d4e98267100133009e000a03826918013302a00028a44e826918015022a0009d4e49261804956900047b98107b9708956800047b9a33075020a20026e84926f8034926f0034926e8033307209568e0034926e0035020a40009e89517e08477e07b67f80064713908fc000256183f0b2003fc000240019517e08479e07b69f00064913307100102837783993308403300a6000a06826af0003302a80028ba4e826af0005022a800b34e8268f8007b8a187b89107b8b087b879567c0035020aa0093e88267c8038268c0038262d803826ad003826b0801c87b0b826c0001c88c0cd88c08c88b0bd37b09d87b07da9807c8a707d8a708c828089569ff07959999007b9ce8007b9bf0007b97f8007b9800019568ff07958881018267f8005020ac00b4e89567a0033308405020ae00fae5956b000382b7b80082b8b00082b9a80082baa0005022b000244f5207e6014926980349269003492688032d151407000080f64ae1c702956880037b67800364a77b6a08015020b200eae6826710013300b4000a03826918013302b600283d50826918015022b6003650d4780298aa206f99979820d4a80898992049263803492658034926500349264803492640033a0a0800023a0b1000023a0c1800023a072000027b6a78037b6b70037b6c68037b6760037b6930037b68280333082095696003956a4003956b20037b622003826708015020b80039e8826710013300ba000a03826918013302bc0028504f826918015022bc00494f7b6818019877206f98978920d497077b6710019888207b6808019568ff07958899004928200149281801492810014928080107956700039568ff079588a1015020be00ebe68067140397772082681803956b000182b908d497079569ff0795999900492940014929380149293001959c0001491c28077bc86082b8107bc85082b8187bc8487bc7589567ff079577c1019568ff079588e1015020c00013e79568ff079588990049288001492878014928700149286801064928a001492898014928900149288801100e9567ff07957701029568ff07958821025020c200d2e69567e0023308405020c40018e4956b000282baf80082b8f00082b9e80082b7e0005022c6001e4d5108be02003308100102838833070133090a0828313308100102838833070133090a0828213308100102838833070133090a0828113308100102838833070133090a08014926500149264801492640013302c800140700000000717b484e01956840017b67580133075020ca00c9e44926380149263001492620014133070495682001492628015020cc00abe43908fc000256183f122003fc000240330810010228080233081001022800024926900149268801492680013302ce00140700000000717b484e01956880017b67980133075020d00061e44926780149267001492660012233070495686001492668015020d20043e43908fc000256183f122003fc000240330810010228a00133081001022898014926f0014926e8014926e0013302d400140700000000717b484e019568e0017b67f80133075020d600f9e34926d8014926d0014926c001413307049568c0014926c8015020d800dbe33908fc000256183f122003fc000240330810010228380133081001022830014926300249262802492620023302da00140700000000717b484e01956820027b67380233075020dc0091e34926180249261002492600022233070495680002492608025020de0073e33908fc000256183f122003fc000240330810010228d000330810010228c800492690024926880249268002140700000000052f44ec956880027b67980233075020e0002ee349267802492670024926680233070495686002492660025020e20011e33908fc000256183f112003fc0002403308100102286e330810010228674926d0024926c8024926c0023302e400140700000000717b484e019568c0027b67d80233075020e600c9e24926b8024926b0024926a002113307049568a0024926a8025020e800abe23908fc000256183f112003fc0002403308100102280833081001020183883307013309240a087b6718013300ea002847e57b6718015020ea0040e58377330833090a2814e18267180133085020ec002ae58378330733090a08285efd3307f800027b67f8003907f8000255170407281d31956700108377c00333083300f0000a0101956978108197640352475bcba58d0a281e1a5147fb367a94c80a5147419bd8952502956a78185247bb9c05a90a28b51e51474447bac2bf0b52473eed62dd0a282b20524703defd060a28b4155247b3a75e090a28cd1a5247dd0d16180a28d6185147d9ff0420cd055247dd72b8230a28690f514767e53c31c60e5147181da76a0a28e2164929c0064929b8064929b0064929a80695670010837720073300f2000a0b3302f400287a495022f40077495022f6004b4b5107062834298267f8008177330823ac78062836299567ff079577a1043300f8003302f402284a4b956aff0795aa7195ab000482b73082b83880a94004492a28047bb9207bb8189568ff07958881047bb71033075020fa001ae19568ff0795887149280804492800044928f0030564893307209568ff07958861044929f8035020fc00efe03908fc000256183f0b2003fc000240019517e08479e07b69f80064913307100102837783993308403300fe000a06826af8003302000128c147826af80050220001ba4795bc00067bcae0007bc9d8007bc8d0007bc7c8009567ff0795774104956840175020020178e19568ff07958871958900038297e8007b67f8008297e0007b67f0008297d8007b67e8008297d0007b67e0009567ff07957721043308405020040110df956aff0795aa7195ac000382c7c80082c8c00082c9b80082cbb000502206015047510706282e248267e00095a900037b9790008267e8007b9798008267f0007b97a0009568ff07958801048267f8007b97a80064b77b6bf8003300480228e7df4929c0074929b8074929b0074929a80795670020837720f8330008010a0b33020a0128594950220a01564950220c019049510706289b278267f800817756170307289f279567001033084050200e015fde9568ff07958871958900078297a8007b67588297a0007b6768829798007b6760829790007b6770956878104928e0074928d8074928d0074928c807049567ff079577e10795684018502010013de09567ff07957771827480078270780782738807827b700797473f980801d4870797383f984901d4980897093f98ba01d49a0c9839017b6bf00084bb019abad2a808d27a02d2a90984c77f7b67e800dab70c7b6cb00088c7207b62a00094277b68a8007b699800d4980894877b6bf80088b801aa780628dd26826968826a70d49a07826860826b58d4b808d48707987720d49808978820d4780851080628b72264a77b60d0007b64d8007b63e0008268b000956aff0795aa7195ab00077bb8508268a0007bb8588268a8007bb8609568ff079588c107826998007bb9685020120169de8267f800510706286b22826768826858d487071408e0ffffff00000000826a70d88a08826960949894785208062844228268f000848800ff83a7209569ff07959971826ad000959b00067bbad8007bb8d0008268d8007bb8e0009568ff0795884107826ae0007bbae80050201401f9dd330433034926f0008267e8008e779777057b67f800018268f80095873fd88708c884098477e0826070c870007b60f800d87007826260c8290ac87a00d3900ad8900bdaa70bd84907da8807c83707d83708826968c87909c89b0bd87907d89b09826358826af000c83a0ac8a808c88707c8970c8ec78eb8dbc708d4cb078e09db7809510906286a298267708268f800d87807d32008d82009da8709826768d87b04d33c08d83c0ada840ad3b707d48707da790a510a062839299569ff079599718267f800959a00067ba7b0007b90b8067babc0003307409568ff07958821077bacc8007b60e8007b6be0007b6cf0005020160104dd9568ff07958871826758958900067b97688267687b97608267607b97588267707b97508267f0007b9788008267e0007b9780008267e8007b9778648b9567ff07957701079568ff079588e1069569ff079599c106826af8007bba700650201801fb33826ae000826be8008262f800d4a2078268f000d4b808d48707987720d4a808978820d487075107062882209568ff07958871958c000682c7980082c9a8007b69d80064a98283900682caa000d3b704d8b70cd82300da400cc99a08c9c804d8c808d89a0a8269d800c9a90a8269f000c99a0ac98a0ac9b707c90707c92308d4a707d44809d47909d44707989920977720d4970751070628142064277b68f8003300a00228c9de49294004492938044929300449292804956700108377a00433001a010a0b01956a781095ab000450221c013f44510706284e248267f80081775617030728522433071001037b67f80083777b67e00033001e010a038269f8003302200128f4418269f80050222001ed41492698077b6890077b678807956880077b6a800733075020220176db4926780749267007492660070533072095686007492668075020240158db3307fc00027b67f0003907fc000256173f0c8268f000480840019517e08479e07b69d80064913307100102837783993308407b67e800330026010a0633022801285042502228014d427bca607bc9587bc8507bc748956740079568c01450202a01e7db956b000782b75082b85882b94882ba40d49808d4a707d4870752070628f8208267e00033002c010a038269f80033022e012819418269f80050222e011241492638077b6830077b672807956820077b6a20073307502030019bda492618074926100749260007053307209568000749260807502032017dda8267f000817756173f0c8268f000480840019517e08477e07b67d800647183793308408267e800330034010a06330236012884415022360181417bca80007bc9787bc8707bc7689567e0069568e014502038011adb8267e0067b67d8008267e8067b67d0008267f0067b67c8008267f8067b67c000956878104928a004492898044928900449288804069567c0069568001550203a01d7da8267c0068268c8068269d006826ad8067b6a78067b6970067b6868067b6760068267c0007b6798068267c8007b6790068267d0007b6788069567a0069568800695696006826ad8007b6a800650203c01ef33956800068287a0007b67d8008287a8007b67d0008287b0007b67c8008287b8007b67c00095670010837720050a0701956a781095a800048287c00082a2a8048289b800828ab0008268c000d3870bd878088267c800d8970cdbb80c8268d000d38a03d8a80a8268d800d82808db3a08d39707d4b707db7c0851080628371f9567400633084050203e01ced795680006828b58828c50828a48828740d4ba09d4c708d49808988820d4c909979920d4980851080628e81c492630064926280649262006140900000000a079c308956820067b6938067b67f8007b6af0007b6be8007b6ce00050204001a9d88268f8008267e800826ae000d47a0a140b00000000010000001407fcffffff00000000d878078269f000949794a752070628801c8387044926180649261006492600062095680006492608067b6ae8007b6be000502042014fd88268f8008267e0009577dcd878078269f00094978269e8009497520706283a1c8387244926f8054926f0054926e005269568e0054926e8055020440111d8826be800826af0008268f800140900000000010000001407bcffffff00000000d8780794a794b752070628ef1b8387443a08480002956b00057bb8d8003a085000027b69e0003a095800023a0a6000027bb8d0007bb9c8009568c0057bbac00050204601abd78269f8008267e00095779cd879078268f00094878268e800948752070628961b8397643a086800024926b0054926a8057b68b8059568a0054926a0055020480169d7330884008267f80050204a012bda8378330701330984000a080149298007492978074929700749296807956700108377e00733004c010a0b33024e0128be4050224e01bb4082b77882b8800082b97082ba68d49808d4a707d4870751070628af1f8267f80081775617030728b31f956878104928a007492898074928900749288807069567ff07957721069568001850205001c6d79568ff07958871958900058297c8007b67f8008297c0007b67f0008297b8007b67e8008297b0007b67e0009567ff0795770106330840502052015ed5956aff0795aa7195ac000582c7a80082c8a00082c9980082cb9000502254019e3d510706287c1a8267e00095a900057b97708267e8007b97788267f0007b9780009568ff079588e1058267f8007b97880064b77b6bf800330048022837d6491a40491a38491a30491a28956700208377a0f8330056010a0b01956a781882a73882a84082a93082aa28d49808d4a707d4870751070628c91e8267f8008177330823ac780628cb1e95676012330058013302f40228e03f956a781095ab000182b9e80082b8f00080a7f801492ae0017b67f0007bb7d8007b68e0007bb8d000956840127b69e8007bb9c800330750205a01a6d533025c0195687810014928c0014928b8014928a801056489330720956820124929b00150205e017dd53309fc00023907fc000256173f0b2003fc000240017b69d8009517e08479e07b69f80064913307100102837783993308407b67d000330060010a063302620128013d50226201fe3c7bba607bb9587bb8507bb748956700129568c018502064010dd6956a781095ab000182b7980082b8a00082b9900082ba8800d49808d4a707d487073308015107b30195697810492980018267e800959a00017ba7688267e0007ba7709568e0118267f0007ba778330750206601c6d43302680195687810014928600149285801492848010564893307209568c0114929500150206a019dd48269d800819756173f0e48094033026c0128da3d50226c01d73d33006e010a0633027001283c3c50227001393c7bba80007bb9787bb8707bb7689567a0119568e0185020720147d595687810958900018297287b67f8008297307b67f0008297387b67e8008297407b67e000956878184928a0004928980049289000492888000695678011956800195020740100d5956b781095bc000182c70882c81082c91882ca207bbac0007bb9b8007bb8b0007bb7a8008267e0007bb7e0008267e8007bb7d8008267f0007bb7d000956760119568401195692011826af8007bbac80050207601142e956878108287e8007b67f8008287f0007b67f0008287f8007b67e800828700017b67e00095670020837720f90a07956a781882a7c00082a2a80082a9b80082aab0008268e000d3870bd878088267e800d8970cdbb80c8268f000d38a03d8a80a8268f800d82808db3a08d39707d4b707db7c08017b68f8009567001133084050207801f9d1956a781082a7a00082a8980082a9900082ab880050227a01403a510706281e17492a8000491a788267f8007ba7689568e010491a7064b77b6bf8003300480228eed249294006492938064929300649292806956700108377a00633007c010a0b33027e0128c63a50227e01c33a50228001303b51070628a51b8267f80081775617030728a91b9567ff07957701033308405020820162d1956aff0795aa7195ac000282cba80082c8a00082c9980082c7900050228401023b510806288016492a8802492a8002492a7002129568ff079588e102492a78027b67f80033004802284ed24929e0054929d8054929d0054929c80595670010837740060a0b01956a781095ab000582b7d80082b8e00082b9d00082bac800d49808d4a707d48707510706281c1b8267f8008177330863ac7806281e1b9567ff079577c102330086013302f40228eb3b9568ff07958871958900028297687b67a8008297607b67e8008297587b67f8008297507b67f0009567ff079577a102330088013302fe0228b13b9568ff07958871958900028297487b67a0008297407b6798008297387b6790008297307b67880095670010837760063308440a0195677810827800067b68e000957900058298f8007b68d0008298f0007b68c0008297e8007b67c8008267e8009777209877209569ff07959971492928027b6778959a00027ba7208267f8007ba7189568ff07958881028267f0007ba710330750208a011ad19568ff0795887149280802492800024928f0010164893307209568ff07958861024929f80150208c01efd03308fc00023907fc000256173f0b2003fc000240019517e08479e07b69b00064913307100102837783997b68b8003308407b67d80033008e010a06826ab0003302900128983a826ab00050229001913a7b67686f877b67606f977b67586fa77b67509517e08477e07b6770647133071001037b67b00083777b678000330092010a033302940128e33650229401e0364929e801959b00017bb8e0007bb7d8009568ff07958841027bbad0003307502096013cd08267509568ff07958871958900017b97c8008267587b97c0008267607b97b800648a3307209568ff07958821028269687ba9b0015020980102d08268b800818756173f08480840019517e08477e07b6768647183793308408267d80033009a010a06826a6833029c0128c636826a6850229c01c0368268707b8a187b89107b8b087b879567ff079577010250209e019dd0956aff0795aa7182a3a80182a0a00182ac980182a29001d23c07d20208d287075117ff63028267c800d872098268c000d38c07d88c0b7b6950da790b8269d000d890048268e000d38307d883087b6440da7408d39009d49707da7b087b62707b6c687b63607b605851080628bb1b7b6b488267f000826878d487078268f800d4870752070628951c826780003300a0010a038269b0003302a201284f388269b0005022a201483852070628ce1c9569ff07959971492988018267f000959a00017ba7708267f8007ba7789568ff079588e1018267787ba7800033075020a401cace9568ff079588714928680149286001492850010164893307209568ff079588c101492958015020a6019fce8268b800818756173f08480840019517e08477e07b6778647183793308408267d8003300a8010a06826a783302aa01285c38826a785022aa0156387b67386f877b67306f977b67286fa77b67209517e08477e07b67786471826780003300ac010a033302ae0128b3345022ae01b03449294801959b00017bb8407bb7389568ff079588a1017bba3033075020b0010fce8267209568ff07958871958900017b97288267287b97208267307b9718648a3307209568ff07958881018269387ba910015020b201d8cd8268b800818756173f08480840019517e08477e07b67b800647183793308408267d8000a068267d000826858c97807826948c99708d897078269e000826a60c99a09826a40c9a909c979098267c000826a68c97a07826a50c9a707956a781095ac00067bc9207bc8187bc710826bb80082b78268c800826970c989087bc80882b8086f798267787b791882ba1082b9186f887b78106fa87b78086f987b78956880165020b401a3ce956aff0795aa71018267c800956800107b8720f882678800956800107b8740f88267f000956800107b8760f88267c000956800107b8728f882679000956800107b8748f88267f800956800107b8768f88267d000956800107b8730f882679800956800107b8750f88267e8007ba78267e000956800107b8738f88267a000956800107b8758f89567ff079577619568ff079588419569ff07959921826ba8007bab085020b6016a299567ff079577013308405020b8013ecb95670010827a18f895670010827810f895670010827908f895670010827700f85022ba0138345108062857104926f8074926f0074926e8079568e0074926e007017b67f800330048022829cc49298003492978034929700349296803956700108377e0033300bc010a0b3302be0128a8355022be01a53582b77882b8800082b97082ba68d49808d4a707d487075107062814158267f800817856180307281815956878104928a0034928980349289003492888030395676002956800145020c001a7cc95680002828970828a68828c78828760979b3f98a801d4b80297c83f7b69f000989901d498087b6ae00097a93f987a01d49a0b7b6ce80098c3017b67d000847c019acad28a04d22a09d23a0a84b77f7b67d800dac70b88b7209497d4a40894877b6cf80088c801aa78062899147b6bb800956c00027bcb407b69a8007bc9487b64b0007b64500233078000956840027b6aa0007bca585020c20119cb8267f8005207220c8267d000847700ff8268e000956900017b98c8007b97c0008267f0007b97d0008267e8007b97d8003307a0009568c0015020c401dbca330833073302330ac0008269d800939aa00028840d51473182a0700a287514492900074929f8064929f0064929e80695670010837760073300c6010a0b3302c8012891325022c8018e3282b7f80082a8000782b9f00082bae800d49808d4a707d487075107062879148267f8008177330823ac7806287b149567ff07957761053300ca013302f402284e34956aff0795aa7195ab000482b7f00082b8f80080a90005492ae8047bb9e0007bb8d8009568ff07958841057bb7d00033075020cc0119ca9567ff079577714927c8044927c0044927b80464793307209568ff07958821054929b0045020ce01efc93908fc000256183f0b2003fc000240019517e08479e07b69f80064913307100102837783993308403300d0010a06826af8003302d20128c130826af8005022d201ba3095bc00077bca207bc9187bc8107bc7089567ff0795770105956880175020d4017cca9568ff07958871958900048297a8007b67f8008297a0007b67f000829798007b67e800829790007b67e0009567ff079577e1043308405020d60114c8956aff0795aa7195ac000482c7880082c8800082c97882cb705022d80156305207370d8267e00095a900047b97508267e8007b97588267f0007b97609568ff079588c1048267f8007b976864b77b6bf8003300480228f3c8492900044929f8034929f0034929e80395670010837760043300da010a0b3302dc012872325022dc016f3282b7f80082a8000482b9f00082bae800d49808d4a707d4870751070628d5128267f80081775617030728d9129568781049282004492818044928100449280804029567c004956880145020de016ec98267d8047b67f8008267d0047b67f0008267c8047b67e8008267c0047b67e0009567a0043308405020e00115c7956b000482b7b80082b8b00082b9a80082baa0005022e2013f3052073d0c8267e000956900047b9780008267e8007b9788008267f0007b979000956880048267f8007b97980064a77b6af8003300480228f9c749294007492938074929300749292807956700108377a0073300e4010a0b3302e601286b315022e60168315022e8013b305107062810128267f8008177561703072814129568781049286007492858074928500749284807079567ff079577c1059568c0175020ea0183c89568ff07958871958900058297607b67e8008297587b67f8008297507b67f0009567ff079577a1053308405020ec0126c6956aff0795aa7195ac000582cb4882c84082c93882c7305022ee01ca2f52084b0b8268e800978820988920492a28058268f00095ab00057bb8108268f8007bb8189568ff07958881057bb9207b67f800330048022806c74929c0034929b8034929b0034929a80395670010837720043300f0010a0b3302f2012885305022f20182305022f401af30510706283f118267f8008177330843ac7806284111956760043300f6013302f40228b230956800048287707b67d8008287687b67f0008287607b67f8009517e08477e07b67e000647195670010837740043308240a0195677810957b000382b8e00082b9d80082bad00082b7c8007b689000826be0007bb8187b6988007bb9107b6a80007bba087b67787bb733071001037b67e80083777b67d0003300f8010a038269e8003302fa01286d2f8269e8005022fa01662f52070628ab108267d8009777209878208267f0008269f800d497077b68d800d4870752070628eb108267d0003300fc010a038269e8003302fe01283d2c8269e8005022fe01362c492658047b6850047b674804956840047b6a4004330750200002bfc549263804492630044926200401330720956820044926280450200202a1c53308fc00023907fc000256173f0b2003fc000240019517e08479e07b69b80064913307100102837783997b68c8003308407b67c000330004020a06826ab80033020602284a2f826ab80050220602432f7b67b0006f877b67a8006f977b67a0006fa77b6798009517e08477e07b67b8006471492618048267d800956900047b97108267f0007b9708956800048267f8007b9733075020080207c582679800956a00037ba7f8008267a0007ba7f0008267a8007ba7e8003307209568e0038269b0007ba9e00050200a02d6c48268c800818756173f08480840019517e08477e07b67c800647183793308408267c0000a06826ac80082a71882a81082a90882aa6f7b6f886f996faa8267b8007b7a187b79107b78087b7b8268e00050200c02f4c59567c00333084050200e023ac3956b000382b7d80082b8d00082b9c80082bac00050221002642c520762088267787b67a003826780007b67a803826788007b67b0039568a003826790007b67b80364a77b6ae0005020120227c48267d000330014020a038269e80033021602287a2d8269e80050221602732dd4780298aa206f99979820d4a808989920492658038267d8007b6750038267f0007b6748038267f8007b674003492678033a0a7000023a0b7800023a0c8000023a078800027b6a98037b6b90037b6c88037b6780037b6970037b68680333082095698003956a6003956b40037b6260038267e000502018026ac59567200333084050201a0247c2956b000382ba3882b83082b92882b72050221c02512b520873074926180349261003492608039568000349260003017b67f800330048022844c3490a491af8491af0491ae895670020837760f80a0b01956a781895ab00ff82b7f80082a882b9f00082bae800d49808d4a707d487075207620e8267f8008177330843ae78660e9567c01033001e023302f40228f02c956878108287487b67f8008287507b67f0008287587b67e8008287607b67e00095670020837780f83308240a01956778188278087b68d8008278107b68d0008278187b68c8008277207b67c00033071001037b67b8008377330020020a038269b8003302220228912b8269b800502222028a2b9877206f99979a20d4a707989920956a7810826bc0007bab826bc80095ac00ff7bcbf800826bd0007bcbf000826bd8007bcbe800826be0007bab20826be8007bab18826bf0007bab10826bf8007bab087ba9387ba7307ba8289567a0109568801095696010491a4050202402f31e9567401033084050202602cac0956aff0795aa7195ac000782cbe80082c8e00082c9d80082c7d000502228026a2a5208eb05492ac807492ac007492ab0070195682010492ab8077b67f8003300480228bcc1492ae000492ad800492ad000492ac80095670020837740f90a0b01956a781882a7d80082a8e00082a9d00082aac800d49808d4a707d487075207f90c8267f8008177330843ae78fd0c1407ffffffff000000007b67f8009567801333002a023302f40228572b95687810828708037b67f000828710037b67d000808718037b67c8009567601333002c023302fe02282c2b95687810958900028297f8007b67e8008297f0007b67e0008297e8007b67d8004928e0028267c8007b97d8008267d0007b97d0006489956840138267f0007b97c802330750202e02e4c03302300295687810014928c0024928b8024928a802016489330720956820134929b00250203202bbc03308fc00023907fc000256173f0b2003fc000240019517e08479e07b69c80064913307100102837783997b68f0003308407b67d000330034020a06826ac8003302360228642a826ac800502236025d2a7b67c0006f877b67b8006f977b67b0006fa77b67a8009517e08477e07b67c80064718267d8008477ff8269e0008498ff8269f800826ae800d2a909956a7810492aa00295ab00027bb998007bb89000956800137bb788003307502038020cc08267a80095687810958900027b9780008267b0007b97788267b8007b9770648a3307209568e0128269c0007ba9680250203a02d7bf8268f000818756173f0e48084033023c0228142950223c02112933003e020a06826af8003302400228a226826af800502240029b268268c8007b8a187b89107b8b087b879567c012502042027bc095687810958900028297607b67f8008297587b67f0008297507b67e8008297487b67e0009567a012330840502044021ebe956a781095ac000282c74082c83882c93082cb28502246026526520746038267e00095a900027b97088267e8007b97108267f0007b9718956880128267f8007b972064b77b6bf800502048020abf3308208267f80050204a02cdc1837833092033070a0801492638024926300249262802956820024926200203330750204c02d6be9517e08478e064814926f800330c330433023a039000023a099800023a00a000023a07a800027b83187b69d0007b89107b800864797b87140760ffffff000000007b6798007b689000017b69d8008267b8008269f800d879078269a800d39c0a7b6cf000d89c09daa709826bb000d8b407826aa000d3a20cd8a20adac70ad3b407d4c707da790a510ae800956700027b62e8007b63c8007b64e0007b60c00050204e0223bf826ce0008267e800d4c7078268f80082699800d898088269f0009498947851081b028262180295670002827810827a08827b8267f8008377a000956900017b9be0007b9ae8007b98f0009568e0017b62f80150205002d9bd8262e800826cd80095cc0188c7018260c000c87000d40c078877018268d000c88707d88708826ac800c88a0a8268f800958320d88309826bf000c89b04d8b40bda990b8268e000c88b0bd88b09c89202826890007b800864c97b8c7b87107b8a187b67d0007b63f800644c64b464a328defe8267f800957aa000d87a078269f000c87908d89809da7709c89407d84709c892020195a39fd8a30ac8a80c95ccff7b6cd800d38c09d88c08da9a08957affc88a0bd8ab08887701c97209c889027b62c0008437e07b67d000957a80007b6af800d87a07c87c097b69f000d8c908da77087b6bc800c8b8087b68e800d8b807c872027b62e0007b6aa0017b69a8017b68b0013307409568a0017b62b80150205202c5bc492658014926500149264801956b0001491b4080008267e0007bb7788267e8007bb7708267f0007bb768956780019568600195694001826af8007bba6050205402db138267c8008268c000d48707140880ffffff000000008269d000d889088269d80094989478510866826090018268980182638001826a88018269e800d8900bc9b8088267e000c978028268f000d38a0bd88a0c8267f800d87304dab40cc99009d8c90bc9b20bc9c90cc94a0ac98a0ac97308d4c809d4ba0ad4a909989920d4ca0a97aa20d4a9095109670a009569ff079599714929480749294007492938079568ff079588a1074929300704330750205602cfbb9517e0847be064b14926f800330433034926f0003a022800023a0a3000028268709587207b679000d88707826860c878097b698800d88908da77083a0c3800023a0740000264207bb2187b6ab8007bba1064c27bbc087b6bd80064797bb7826768c878087b688000d87807826858c887077b6778017b69c0007b62c8007b60d0008267b0008268f800d878078269a000d39408d89409da8709826ba800d8b307826a98008268f000d3a80cd8a80adac70ad3b307d4c707da790a520a06282fdd9567ff07957781078268d8007b63e8007b64e00050205802e7bb8264f8008263e0008260e80082689000c84807d88708826b8800c83b09c88909d3b90cd8b90bdac80b826c8000c80c08d8c802826cf000826a78c8ac0cc82c0cc88b0bd88b08c8c808d49808d4b709d48909d4b808989920978820d4980852089ffe956cff0795cc7182c2280795ca000782a82082a91882ab107bcbf0067bc9f8067ba89568ff07958861077bc208077b64f80050205a025bba826ac00095aa0188a7018260c800c87000d40a078877018268b800c87804d884088267d000c887078268f800958320d88309826be000c89b08d8b80bda990b8269e800c89b0bd89b09826cf000c89c0c7b6cf0006402826cd8007bc00864a97bca644a7bca1064707bc7187b6ab8007b63f800648464b3288afe8267e00033005c020a038269f80033025e02280d238269f80050225e020623510756058267e0000a038269f800829708819810829a6f779779206f88988820d489099877206fa8978a20d4a70798882049267805492670054926680505140a000010632d5ec76b7b6a6005492698057b6890057b67880595678005956860057b69800550206002341c8267e000330062020a038269f80033026402289b1f8269f80050226402941f492658057b6850057b674805956840057b6a40053307502066021db949263805492630054926200505330720956820054926280550206802ffb895670010837740050a079568781001958900048297e0007b67d8008297d8007b67e0008297d0007b67f8008267f00081778298c8007b68d00056173f0c8268f000480840019517e08477e07b67f000647183793308408267e80033006a020a06826af00033026c02289f1f826af00050226c02981f95bc00057bca95ba00047ba9f8007ba8f0007ba7e8008267d8007bc7208267e0007bc7188267f8007bc7108267d0007bc708956760159568801550206e02bdb933078268e80033090a08283a073308100102838833070133090a082829073308100102838833070133090a082818073308100102838833070133090a082807073308100102838833070133090a0828f6069569ff07959971492900064929f8054929f005140700000000717b484e9568ff07958861067b970806330750207002c8b79568ff079588714928e8054928e0054928d0052264893307049568ff07958841064929d805502072029db73908fc000256183f122003fc000240330810010228f903330810010228f1033308100102838833070133090a08286a063308100102838833070133090a082859063308100102838833070133090a082848063308100102838833070133090a082837063308100102838833070133090a082826063308100102838833070133090a082815063308100102838833070133090a082804063308100102838833070133090a0828f3053308100102838833070133090a0828e2053308100102838833070133090a0828d1053308100102838833070133090a0828c0053308100102838833070133090a0828af0549263001492628014926200133027402140700000000717b484e01956820017b67380133075020760287b64926180149261001492600012233070495680001492608015020780269b63908fc000256183f122003fc000240330810010228c502330810010228bd0252478200a922cc049567781049274005492738054927300549272805956700108377a00533007a020a0b01956a781095ab000550227c02811e51070b053308100102838833070133090a0828f9043308100102838833070133090a0828e8043308100102838833070133090a0828d7043308100102838833070133090a0828c6043308100102838833070133090a0828b5043308100102838833070133090a0828a4043308100102838833070133090a082893043308100102838833070133090a082882043308100102838833070133090a082871044926b0024926a8024926a00214070000000005df02e69568a0027b67b802330750207e024eb549269802492690024926880233070495688002492680025020800231b53908fc000256183f122003fc0002403308100102288d0133081001022885014926f0024926e8024926e002140700000000620d28949568e0027b67f802330750208202ecb44926d8024926d0024926c8023307049568c0024926c00250208402cfb43908fc000256183f122003fc0002403308100102282b0133081001022823013308100102838833070133090a08289c033308100102838833070133090a08288b033308100102838833070133090a08287a033308100102838833070133090a08286903492610054926080549260005140700000000052f44ec956800057b67180533075020860246b44926f8044926f0044926e8043307049568e0044926e0045020880229b48267f000817756173f0c8268f000480840013307013309248268e8000a08019567ff079577714927400649273806492730066479140700000000717b484e9568ff079588a1067b974806330750208a02d7b39568ff079588714928280649282006492810064164893307049568ff07958881064929180650208c02acb33908fc000256183f112003fc0002403308100102280833081001020183883307013309240a0801492a8000491a78491a70140700000000b2418ffb9568ff079588e1007ba78800330750208e025db382678000330090020a033302920228c91950229202c6194919687b98607b97583307049568ff079588c1007b9a505020940229b39569ff079599718267607b97488267587b97408267687b97383307249568ff079588a100826a707b9a3050209602f9b28267e0009568ff079588717b87288267d0007b87208267c0007b8718648a3307449568ff07958881008269c8007ba91050209802c3b28267b800817756177f158268b800480880003307013309642805013307013309648268d8000a087b68f8003300a002285eb59567ff079577714927c0004927b8004927b000647914070000000005df02e69568ff07958821017b97c800330750209a025eb29567ff079577714927a8004927a0004927980064793307049568ff07958801014929900033009e022830b29567ff07957771492700014927f8004927f0006479140700000000620d28949568ff07958861017b970801330750209c0200b29567ff079577714927e8004927e0004927d80064793307049568ff07958841014929d00050209e02d6b18267b800817756173f138268b80048084033070133092428193307013309248268d8000a087b68f8003300a0022873b48268d8000a087b68f8003300a0022862b47b68f8005020a0025bb483788169f80033070a08288ef29569781052473c974b485a49296006492958064929500649294806956700108377c0063300a2020a0b3302a4022848195022a402451982b75882b86082b95082ba48d49808d4a707d4870751073e3308100102838833070133090a08281c3308100102838833070133090a08280c838833070133090a08018267f80081775617231f330810010228e78267f8008177330843ac780801330810010228d39568781049286005492858054928500549284805079567c0079568c0155020a602b0b18267c8077b67f8008267c0077b67f0008067d0077b67e80033071001037b67e00083773300a8020a038269e0003302aa0228e6178269e0005022aa02df178269e800d398088269f000d39707d487078268f800d3a808d487078877014926b8074926b0077b67a0079567a0074926a8075020ac02a60b956700108377e0053308040a01956c781082c7680582c8700582c9780582ca8005492ca005492c9805492c9005492c88050695cb00057bbac0007bb9b8007bb8b0007bb7a80095670016956820165020ae0267b133081001028388330733090a0828e1fe9567ff079577e1033300b0023302f40228cf199568ff0795887195890003829788007b67e000829780007b67e8008297787b67f0008297707b67f8009568781049288006492878064928700649286806079567ff079577c1039568e0165020b20273b09567ff07957771827858037b68d800827850037b68d000807760037b67c80033071001037b67c00083773300b4020a038269c0003302b60228a2168269c0005022b6029b168269c800d398088269d000d39707d487078268d800d3a808d487078877019568ff0795887149284803492840037b8730039567ff079577a103492838035020b802570a8267e8009777209877208268f0008269f800d49808d4870751078c0095670010837700073308243300ba020a013302bc0228bf165022bc02bc1682b7880082b8900082b9980082baa000956bff0795bb7195bc00037bca087bc97bb8f8027bb7f0028267e0007bc7288267e8007bc7208267f0007bc7189567ff07957781039568ff07958861038269f8007bc9105020be02411133081001028388330733090a082852fd9567ff079577714927e0024927d8024927d0026479140700000000052f44ec9568ff07958841037b97e80233075020c00222ae9567ff079577714927c8024927c0024927b80264793307049568ff07958821034929b0025020c202f8ad3908fc000256183f122003fc00024033081001022854fa3308100102284cfa951130ff7b10c8007b15c0007b16b8009515d0008411f08289187b19108289107b19088289087b1982867b1728951790003308405020c40265ac821898008219900095671fd86700821ac80a0b8477e0c8b803c879027b1920d8920cc8c303d383067b1818d88309da6c098214a800d8ab0b8216a000da000b821708c87b0bd87b0cc86b0bc89b0a821710c84707c8c707d8ba0cd86b0bc8b707c8c70b8eb78eacdbb70cd4ba078e38db7c08520865d86a07d34b08d84b0cda870cd36a07d48707db7c0952094d7b12707b13787b1a80003307409518707b1b88007b14105020c602f5ac8217288218107b78187b76108218187b78088218207b78955130ff8210c8008215c0008216b8009511d00032004911604911584911503302c802140700000000717b484e019518507b176833075020ca02a2ac491148491140491130413307049518304911385020cc0289ac3908fc000256183f0b2003fc00024001330810010283883307013309243300ce020a0801951170fe7b1088017b1580017b167801951590018411f08284829b088280088296954a1fd84a02c8200c7b1620d86a03d3bc0a7b1b28d8bc0bdaa30b828610d80c0ada220a829c18828218829310c86a0ad86a08c82808d3c8097b1c10d9c808d83a0cda9c08d33a0ad4a909db980b510bbf027b17087b1318d464077b10387b1230d42008d487079877207b1658d46808978820d4870752079602951750017b145064485020d00281aa821a680182196001821b58018ea78e98dba7087b1980007b1a8800d4a9078eb9db7809520968028218500195871f7b1848d887087b1b78c8b8088488018477e0957920d87907c8780ad88a0bda770b492128017b1910017b1a180195173001951810017b1b20015020d2027bfd82194801821a400182183801821730017b18407b1968d48909d4a708d498089888207b1a70d4a909979920d498085208e8018216487b16f0008218787b18f800821880007b1800019518f000821988007b1908017b17605020d402f1aa821750c8670ad87a09821438821778c84707c89707d3470bd84708dab90882135882198000c8390995ac20d8ac02c8270b821a20d8ca0c821a28d3ab06d8ba0adb6a0cd8390a82133082168800c83606c86a0ac89808d89809c8a909d87b07da2207c88707d88708c89808821a10d3a809d88a08821b18d87b0ada9a08d3b707d49707db780c520caa01821770821868d478081407e0ffffff00000000821b60d87b09821a4094a9948951090f0164ba821858d43808821c50d87c07944794878210880082198000821b788216485107eb00d49607d40b08d48707987720d49808978820d487075207d20083a72083c8207b185864685020d602c5ac7b175082175864685020d802b7ac647882175064695020da021ba8821860c86807d88708821640821978c86909c88909d3690ad8690bdaa80b821c7082188000c8c808c88b0bd88b02d8c808821c8800821a68c8ac0cc8c808c82808d4b808140ae0ffffff00000000d8a70a949a948a510a4d8377204921e8004921e0004921d8009518d0004921d0005020dc0265a98217088218687b78188218707b78107b76088218607b78955170fe82108801821580018216780195119001320000330810010228774921c0004921b8004921b0003302de02140700000000717b484e019518b0007b17c80033075020e00205a94921a8004921a000492190004133070495189000492198005020e202e7a83908fc000256183f0b2003fc00024001330810010283883307013309240a0833081001022808330810010201838833070133093300e4020a08019511e0fe7b1018017b1510017b160801951520018411f0828b10828a18828c0882827b1a687b1c78d4ac08d4b20ad48a0a98aa207b1b70d4b808978820d4a8087b170852084b028297187b17488296108297087b175082977b17584921f8004921f0004921e8009518e0004921e0002064277b12605020e60232a8821858d46807821948821a50d4a909d497079877207b1620d46909979920d497075207f2019517c0005020e802c9a6821770821868d47808140700000000010000007b17101407e0ffffff00000000821960d87907821a7894a77b181894875107b401821ad800821bd000821cc8008218c0008397207b18287b18a0007b1c307b1ca8007b1b387b1bb0009518a0007b1a407b1ab80064965020ea0294a78217109577c0d876078218789487821818948751076201821748821820d487071408e0ffffff00000000821a58d88a08821b5094b8947851083e016469821828821c38d4c807821b40821630d46b0bd4b707987720d4cb0b97bb20d4b7075207170183974083aa207b1a5864865020ec02f1a97b175082175864685020ee02e3a9647882175064695020f00247a5821760c86707d86708821978821b30c8b909c88909d3b90ad8b90bdaa80b821870821a38c8a808d8a80a821c68821640c86c0cc8ca0ac88b0bd88b08c8a808d4b808140ac0ffffff00000000d8a70a949a948a510a940083774049219800492190004921880095188000492180005020f20292a682162895661f1407e0ffffff01000000d26707821860c88707d88708821a78c88a09d8a90ada880a821870c88a0ad88a08821b68c8b808957b40d87b07c8790cd89c09da7709c8a909d8a907c887078218087b8b7b8c087b89107b87189551e0fe821018018215100182160801951120013200003308043300f6020a013302f80228400e5022f8023d0e510a0b5022fa02d30e32003308100102838833070133093300fc020a083302fe0228e20f5022fe02df0f330824330000030a013302020328000e50220203fd0d510a0b50220403930e3200330810010283883307013309330006030a08019511907b10687b15607b16589515708411f0828a187b1a08829b1882847b14828a08829608829c828310829210c8a609c8c404d8c40cc8c909d36900d86906da0c06c83208821c08c8bc0cd8280bc8cb0bc8680cd88c08c88b00d3a90bd8a90a8218d88406dbba06d83c02821808d3800bd8800adab20ad33c08d4b808db8a0652061f7b747b79087b7c107b7018955190821068821560821658951170320049114049113849113033020803140700000000717b484e019518307b1748330750200a03e5a44911284911204911101133070495181049111850200c03cca43908fc000256183f0b2003fc000240013308100102838833070133092433000e030a0801951120ff7b10d8007b15d0007b16c8009515e0008411f0827810827918827a088277d4a909d48707d49707510719955120ff8210d8008215d0008216c8009511e00032009517a000330840502010031da38219b8008216b0008217a8008218a0007b17107b1908d497077b1818d46808d47808988820d46707977720d487075207c000492190004921880049218000140700000000a079c308951880007b17980082171850201203fea3821908d46909140600000000010000001407fcffffff00000000821818d8780782181094877b1908949751076b8217188377044911784911704911602095186049116850201403b5a39567dc821818d8780782181094878218089487510739821618836724491158491150491140099518404911485020160383a31407bcffffff00000000d8760782181094878218089487520704008216188367443a08b000024911287b1838140800000000000000727b1830951820491120502018033ea3330864646750201a0303a6837833070133096433001c030a0801951120fc951a00037ba0d8007ba5d0007ba6c8009515e0038411e06416807410827a827b08d44a07d4b707510742048282108283088280140cffffffff000000008438ff8407ffd2c20c7b67487b6c38d4c7077b6840d48707510774048297187b6798008297107b6788008297087b67800082977b679000492638037b6a607b6a20037b6b587b6b2803956820037b64507b643003330750201e0387a24926180349261003492608033307209568000349260003502020036aa23309fc00023907fc000256173f0b2003fc000240017b69709517e08479e07b696864913307100102837783993308407b6778330022030a06826a6833022403287c0a826a6850222403760a7bba587bb9507bb8487bb7409567e0029568400350202603f7a2956800028289f8008287f000828ce800828be00082689800d389037b6928d8890882698800d8970a7b6a10da3a08826a8000d3ac027b6c30d8ac0c826a90007b6b68d8ab0a7b6a18da2a0c7b6720d37909d439077b6c08da7c085208be034926d802826760956900027b97c0008267587b97c8009568c0028267507b97d0003307502028037ea14926b8024926b0024926a8023307209568a0024926a00250202a0361a182678800826820c97807826908c997087b6820d8970782689800826928c98908826910c99808c978087b6828826970819782688000826a30c98a08826a18c9a8087b683082689000826a68c98a0a7b6a6856173f08480940019517e08477e07b67186471837933084082677833002c030a06826a1833022e03283909826a1850222e0333097bba787bb9707bb8687bb7608267287bb798008267207bb790008267307bb788008267687bb7800095676003956880035020300319a249269802826738956900027b9790008267407b978800956880028267487b9780003307502032037da049267802492670024926680233072095686002492660025020340360a08268709517e08477e07b67686471818756173f08480840019517e08477e07b677064718379330840826778330036030a06826a7033023803281b07826a705022380315078268687b8a187b89107b8b087b879567400250203a03f6a0826748028268400282625802826a5002826b8000c87b0b826c9000c88c0cd88c08c88b0bd37b09d87b07da980782688800c8a80882699800c89202d8a809c82909c88707d88708c89808956900037b9ca0007b9ba8007b97b0007b98b8009568a00382676850203c030ca19567200233084050203e03529e956b000282ba3882b83082b92882b720502240035c075208be0082689000956a00027ba8826880007ba808826888007ba81095680002826998007ba9187b67980050204203459f4926b801826738956c00017bc7b0008267407bc7a8008267487bc7a0004926d8018267507bc7d0008267587bc7c8003a07b800023a08c000023a09c80002826a607bcac0007bc7f8007bc8f0007bc9e8003a07d000023308209569e001956ac001956ba0017bc7e0008267980050204403aea0955120fc951700038270d8008275d0008276c8009511e0033200004926d0004926c8004926c0001407000000001efdc6969568c0007b67d800330750204603919e4926b8004926b0004926a8003307049568a0004926a00050204803749e3908fc000256183f112003fc0002403308100102286833081001022861492610014926080149260001140700000000052f44ec956800017b671801330750204a03319e4926f8004926f0004926e8003307049568e0004926e00050204c03149e3908fc000256183f112003fc0002403308100102280833081001020183883307013309240a08014926900149268801492680011407000000008cd350e4956880017b679801330750204e03c79d492678018267507b6770018267587b676801330704956860018269607b69600150205003a19d8267287b6758018267207b6750018267307b674801330724956840018269687b69400150205203789d82679800956a00017ba738826788007ba730826780007ba72833074495682001826990007ba920502054034b9d826770817756177f0c8268704808800001330701330964826878330056030a0801951100fd951900027b90f8007b95f0007b96e800951500038411e064168279087b69388079107b692882777b673082877b67508287087b67488287107b67408287187b675849261802492610024926080249260002029567e0019568000250205803b89d826ae0018267e8018268f0018269f801826b587b6b9801826b407b6b9001826b487b6b8801826b507b6b80017b69b8017b68b0017b67a8019567c0019568a001956980017b6aa00150205a03d4f6956b000182b7c00082b8c80082b9d00082bad800492638024926300249262802956c0002491c20027bca587bc9507bc8487bc740956720029568400250205c03a99d826a28826930826838d4a907d487075107060149267801956700017b79607b7868956860017b7a70330750205e03069c492658014926500149264801330720956840014926400150206003e99b9517e08477e07b672064713908fc000256183f0b2003fc000240019517e08479e07b69186491330710010283778399330840330062030a06826a1833026403289d02826a185022640397028268207b8a187b89107b8b087b879567200150206603789c9569000182972882982082623801829a30826b48c87b0b826c50c88c0cd88c08c88b0bd37b09d87b07da9807826840c8a808826958c89202d8a809c82909c88707d88708c89808956900027b9c607b9b687b97707b98789568600282672033006a0328919c4926980249269002492688024926800202956700019568800250206803f49b826808018262180182630001826a1001826b48d3b807d8b80c826050d80304da740c826740c97a09d87a0a826758c97207c9a707d8c90ac9a707c9c90ac9b808c94808956b0002492ba00002c903097bb9c0007bb8c8007bbad0007bb7d8004926b8024926b0024926a8029567a0029568c00250206a03fc9b9567e00033084050206c0342998267f8008268f0008269e800826ae00050226e0370025207a9008267507b67c0008267487b67c8008267407b67d0009568c0008267587b67d80064a77b6a5850207003379a4916788267287b67708267387b67688267307b67604926980049269000492688003a07d800023a08e000023a09e80002492680007b67b8007b68b0007b69a8003a07f000023308209569a000956a8000956b607b67a00082675850207203b39b955100fd951700028270f8008275f0008276e80095110003320000330750207403b99c33070150207603b09c82970881981082996f77977a206f88988820d48a0a9877206f98978920d4970798882032028269b00082970881981082996f77977a206f88988820d48a0a9877206f98978920d497079888209569ff079599713202826b180188b98000826ad000db9a08826cd800826ae800d4ca0ada970a93b8ff93baff826be000939b939c8267f800e0a70782690001e0890882690801e0c909826a1001e0ba0a320282a71882a81082a90882aa6f776f8b6f996faa320282a71882a81082a90882aa6f776f886f996faa956b78103202d49707d48b09d47909989920d48707977720d497073202826ad80082a71882a81082a90882aa6f776f886f996faa956b781095bc0004320282970882988199106f77987a206f88978b20d4ba0a9777206f99989920d497079888203202977b3f988c01d4bc0397ac3f987701d4c70797883f989c01d4c80898aa018499019a9c3202939b8268f800e0a80882690001e0790782690801e0b909826a1001e0ca0a3202826af80082a71882a81082a90882aa6f776f886f996faa956b78183202d49a0ad48709d4a909989920d4a808978820d49808320233077810c8760a95ab00063202d49707d48a09d47909989920d48707977720d4970732028eb9858801dbb9088e498ecadac90ada780a320282171082181814090000000001000000d37909d48909987a2088aa01948a939a320282a71882a81082a90882aa6f776f886f996faa956b0003320282b73882b84082b93082ba28d49808d4a707d487073202d49b0bd48709d4b909989920d4b808978820d498083202d4c809d4a707d47909989920d4c707977720d49707320249260801330b33004926f80049260001826ae80082a71882a81082a90832028219821a087b697b6a087b67107b68189551c0821038821530821628951140320297773b9878387b6818019a8980003307ff3308ff320282970881981082996f77977a206f88988820d4a80832027b67d8007b68e0008267d000d487077b67d000826718019579803307ff3308ff32028097108298829908d48707d4970732029517e08477e07b67f800647183793308408267d000320282970881981082996f7a97a7206f889888203202c8b707c88a0ad88a0cc8c7078260e000c8a000d8a00a320233077810c8760a95ab0007320233077810c8760a95ab0003320297a8037b6818018d8980003307ff3308ff3202d4ca0ada980a3308ffdab807dab80a939c320282b7b80082b8c00082b9b00082baa800d49808d4a707d48707320282a71882a81082a90882aa6f7732029511c07b10387b15307b16289515408411e06476831732029518e08488e07b68e8006481837783893308203202849a40520a195109148d9a40cfa80ad09808d09707d4a707320032009597c0d0780733083200849a40520a195109148d9a40d0a70acf9707cf9808d4a808320032009598c0cf87083307320049922425494b2a252da9944c4949214225a952484992244992244992244992244992244992244992244992244992244992244992542529a524292949a84a494a922449922449922449922449922449922449922449929224294955494a92284925495592922425494a5292aaaa242549492a498a88889424495292242925492409a592929222458a142952a44851922222a224491042c2509a9486442222225244048988444444448a0812112222a29124499210111111212222222549922411a1e88844848888a42422924422254949228948922489888848442412110911490248954444444424424424251149244922492249444444444444444488484492244991248922424444254a241149221111224244448424495229094944444444442884082651a894249224912492241545952491242289249124491229492491449244495548249224892489249262249244224992922422228a88081111499248522291442492244992249124494444844212a5100a45a8aa4824522b2289442411891291884424254922499224894822424444444444844822492491482412492491882492441289225229111151248988884444a444922489489224912424112291481409212289104288888888904c92244944448888884812402a924812922412491269924824114244928488484492101189081192482412212222222222222212099144922489081111952822119188888888881091101111214992548a108988888888088510c1240a9522892491481249928aa24a92481291449248922489942492884492444955482492248924892492622492442249929224222222225244448888489244921289484422121111a1904429844211aa2a1289d48a4822114944a22492484452922492848888089124112522222242249124924824128924924844124922894411a99488882812914822222212914844129144922492848810894422112144241142104424494404111193244992442489248988882409205191082222222222226292481249221104119124888844240922221141049148241211111191444404218a282211441040444444888820222292228924498848529248522222224244105144228848a2828848449044218249142a51442288244510111189244992444444444410092222228888208088228828221124258988881042888888484444041145248248492422222244441089482222222249928888202222424404111141248888882086528552855285522322021851101112118408424222220218511011121184084242222202185110111211840842422222021851101112118408424222228088828848441022088522220218511011121184084261491189a09a28a84a881089281a114840400412104820810412104840201111115124089228494444229144241129884484121141886012854a149108222222228248444444444424884444449044444444444411898888882241904491481089482412898808111144222292244992484912894411299224499224498a8888442291884810499200925412914844444444445011254692249124499224499248924a4a92489224499224121111898888082289244912111129222222228888449224492422a2882449924824499224495244222222a211411245421451442288888882889088204488c8240a95882241924404912449928822124144441444844404514426518928124492882022222222222244041111111111111111111144444444444423222222892492489224912092244992241111404444441011092080442589081111414412454922424410110104904a122242841011114424519424444444101194684444441409124992248a44448488082211111111119120121111411291484444441149928868244992244a121189888888888888828811a14404214430922854228a0449121144444424494444241291828811a14404512412449120924404118944221111112282882489888888888888882022222222228a8888482289249224231244444490442291221211111145822089221109221111112411212222121111d1888888244994242222914824128988884422914824225244444444442491482412112988448412114108114ca25091882212414a29490a514491202222220a128948244a442288229354224a2441921411442222928448244924922449922489249244149108924844241291288844841211411499a412512209524a495244912022894841229124291189208a4ca212459224922491241149a2489292a4948a20322222222222222222222222228a888888442291209220222222224822224244222222a2489048922451242222440491244912492489444a92484a91242291888848101111111111111154119140222222a248101191248992444424121111111151108988121141886012854a1491082249222288444444444444824844244144241289881491888888281244442449a2484444880822222222224144440411111111115144222222a2481024512422224444108944221191201249124424119148442212111111458220899244442291482451448a88888848249242145144224822894824892822114444444144484410420493285424a28844104551245144241251414444442422822832894a1449aa8a24451009222222884444444414414411892029494444444408214444442422228248104912444444884849221a1145248928111189442291884891482412218a2212414a125144444444229148928848100922111111444488884844444423222249448900222212111111119188888888888828220a22468412118410c1240a158928221144511449148944242222220a22222291121141148904514422882445109148241291202249828848241291224804a546448482a4a842082191540011232291482291244944444410918844454452444444441091449248229144924812a924a24a4422499249124992248944441249249288884404111121128944442488480091a844444412892492244992244962242222424152548490449248422891129544928c888844924844922449444404111149244922892449922449442292441411114412492289441249228944912a25a2125144228828924a494a1211028888888820a2884410111105112111414431222222a288884ca2125144228822222291482422282aa15442a9845209a51289880022a22012114a440421829090502aa15442a9845209a5124a25944a2895502aa15442a98452898808604441444844102208090988888888684410a15442a9845209a5124a25944a2895502aa154222280888288484410220809898800220a2222114188202424944a2895502aa1542222808882884844104564128d44440144444124229488084204a1b0a49104101105114582248948104992241149109144222522124411912489221289880288888248449488884422a20022a2201211252282282249491491282211149508444444449120499224942a94aad4284251221411112282888888104511892012492489888820224544444484888888084255222212898888442222224444108988880851149108229144924844444410494412118922414444245244241289888804a12a91882880882888444489882044101212111149925422414452922449924824499224492a29499224492289044992a4888828490430294822491022184aa21111919292244992244992244992489224499288144444252225224992244922222282888824499224128988884890244992249224499224922449922449924492009254942415914492248924054941294892244912491249920052494444044992a488886828222280110511211141886028291496a2111191242549922489244989880825489224491211240920012429454444128944240a92a414490248525192244992485290149482244992244992244902484522222248024892244992244992a4241111d144912041a114458244912041a1144d9224492525499224499224294992244949922425890026054924094204434934222292a4248988882241444492244912111140448224800092949224910449524a924412049094320949004982149444232222524a1249012449924422912822918844414424220821824952a8244a24419244041111114922492489244992442422118982884844104992449224299224912432492551220992249148242282484422120511918820492a32492551220992a40822222291244924922489888848100922498288281289480491884422128910422222422222228888886844041051101189084204a15044041051101189084204a1b0a41111404441241289449048241289202291482212a4484c128d88884849524a92241111228288884422918888888820222222222249228224494424918288484490a410c124854a9448822429824822499224499224492449241211212288884892244992244984444444444410092222824824129128419224898810424444484422414444440b1224959294a4482a252949a488484492444522914849aa2a495551922429925415514a2949494a922449524522914891a4aa28499214899224492595940490245592aaa22449529224294992141511492a254992944424259592222211494a494aa212259552924452248a4489484a925444449292544992544954294992a4924a9224a9a40000"
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "canMint(address)": "c2ba4744",
              "decimals()": "313ce567",
              "interval()": "947a36fb",
              "lastMintTime(address)": "6aa71d18",
              "mintToken()": "2004ffd9",
              "name()": "06fdde03",
              "owner()": "8da5cb5b",
              "ownerMint(address,uint256)": "484b973c",
              "setInterval(uint256)": "22a90082",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": "/// @use-src 0:\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\", 1:\"@openzeppelin/contracts/token/ERC20/ERC20.sol\", 2:\"@openzeppelin/contracts/token/ERC20/IERC20.sol\", 3:\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\", 4:\"@openzeppelin/contracts/utils/Context.sol\", 5:\"contracts/MintableERC20.sol\"\nobject \"MintableERC20_926\" {\n    code {\n        {\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"MintableERC20_926\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            let _1 := add(memoryDataOffset, argSize)\n            if slt(sub(_1, memoryDataOffset), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            let offset := mload(memoryDataOffset)\n            if gt(offset, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            let value0 := abi_decode_string_fromMemory(add(memoryDataOffset, offset), _1)\n            let offset_1 := mload(add(memoryDataOffset, 32))\n            if gt(offset_1, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            let value1 := abi_decode_string_fromMemory(add(memoryDataOffset, offset_1), _1)\n            let newLen := mload(value0)\n            if gt(newLen, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            let _2 := sload(/** @src 1:1648:1661  \"_name = name_\" */ 0x03)\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            let length := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            length := shr(1, _2)\n            let outOfPlaceEncoding := and(_2, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            if gt(length, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1648:1661  \"_name = name_\" */ 0x03)\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 32)\n                let deleteStart := add(data, shr(5, add(newLen, 31)))\n                if lt(newLen, 32) { deleteStart := data }\n                let _3 := add(data, shr(5, add(length, 31)))\n                let start := deleteStart\n                for { } lt(start, _3) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            srcOffset := 32\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1648:1661  \"_name = name_\" */ 0x03)\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ srcOffset)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                for { } lt(i, loopEnd) { i := add(i, 32) }\n                {\n                    sstore(dstPtr, mload(add(value0, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, 32)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(value0, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ newLen), 248), not(0)))))\n                }\n                sstore(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                if newLen\n                {\n                    value := mload(add(value0, srcOffset))\n                }\n                sstore(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ or(and(value, not(shr(shl(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ newLen), not(0)))), shl(1, newLen)))\n            }\n            let newLen_1 := mload(value1)\n            if gt(newLen_1, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            let _4 := sload(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04)\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            let length_1 := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            length_1 := shr(1, _4)\n            let outOfPlaceEncoding_1 := and(_4, 1)\n            if iszero(outOfPlaceEncoding_1)\n            {\n                length_1 := and(length_1, 0x7f)\n            }\n            if eq(outOfPlaceEncoding_1, lt(length_1, 32))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            if gt(length_1, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04)\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                let data_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 32)\n                let deleteStart_1 := add(data_1, shr(5, add(newLen_1, 31)))\n                if lt(newLen_1, 32) { deleteStart_1 := data_1 }\n                let _5 := add(data_1, shr(5, add(length_1, 31)))\n                let start_1 := deleteStart_1\n                for { } lt(start_1, _5) { start_1 := add(start_1, 1) }\n                {\n                    sstore(start_1, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            let srcOffset_1 := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            srcOffset_1 := 32\n            switch gt(newLen_1, 31)\n            case 1 {\n                let loopEnd_1 := and(newLen_1, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04)\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ srcOffset_1)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, 32) }\n                {\n                    sstore(dstPtr_1, mload(add(value1, srcOffset_1)))\n                    dstPtr_1 := add(dstPtr_1, 1)\n                    srcOffset_1 := add(srcOffset_1, 32)\n                }\n                if lt(loopEnd_1, newLen_1)\n                {\n                    let lastValue_1 := mload(add(value1, srcOffset_1))\n                    sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ newLen_1), 248), not(0)))))\n                }\n                sstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ add(shl(1, newLen_1), 1))\n            }\n            default {\n                let value_1 := /** @src -1:-1:-1 */ 0\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                if newLen_1\n                {\n                    value_1 := mload(add(value1, srcOffset_1))\n                }\n                sstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ or(and(value_1, not(shr(shl(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ newLen_1), not(0)))), shl(1, newLen_1)))\n            }\n            /// @src 1:7509:7530  \"account == address(0)\"\n            let _6 := iszero(/** @src 5:392:402  \"msg.sender\" */ caller())\n            /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n            if /** @src 1:7509:7530  \"account == address(0)\" */ _6\n            /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n            {\n                /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                mstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src -1:-1:-1 */ 0)\n                /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 36)\n            }\n            let _7 := sload(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02)\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            let sum := add(_7, /** @src 5:404:428  \"100000000000000000000000\" */ 0x152d02c7e14af6800000)\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            if gt(_7, sum)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x11)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            sstore(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sum)\n            /// @src 1:6624:7049  \"if (to == address(0)) {...\"\n            _6 := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            mstore(/** @src -1:-1:-1 */ 0, /** @src 5:392:402  \"msg.sender\" */ caller())\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            mstore(32, /** @src -1:-1:-1 */ 0)\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            let dataSlot := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 64)\n            sstore(dataSlot, add(sload(/** @src 1:7002:7024  \"_balances[to] += value\" */ dataSlot), /** @src 5:404:428  \"100000000000000000000000\" */ 0x152d02c7e14af6800000))\n            /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n            let _8 := /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ mload(64)\n            mstore(_8, /** @src 5:404:428  \"100000000000000000000000\" */ 0x152d02c7e14af6800000)\n            /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n            log3(_8, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 32, /** @src 1:7064:7089  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src -1:-1:-1 */ 0, /** @src 5:392:402  \"msg.sender\" */ caller())\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            sstore(/** @src 5:440:458  \"owner = msg.sender\" */ 0x07, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ or(and(sload(/** @src 5:440:458  \"owner = msg.sender\" */ 0x07), /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ not(sub(shl(160, 1), 1))), /** @src 5:392:402  \"msg.sender\" */ caller()))\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            sstore(/** @src 5:468:483  \"interval = 3600\" */ 0x06, /** @src 5:479:483  \"3600\" */ 0x0e10)\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            let _9 := mload(64)\n            let _10 := datasize(\"MintableERC20_926_deployed\")\n            codecopy(_9, dataoffset(\"MintableERC20_926_deployed\"), _10)\n            return(_9, _10)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n        function abi_decode_string_fromMemory(offset, end) -> array\n        {\n            if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n            let length := mload(offset)\n            if gt(length, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            let array_1 := allocate_memory(add(and(add(length, 0x1f), not(31)), 0x20))\n            mstore(array_1, length)\n            if gt(add(add(offset, length), 0x20), end)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            mcopy(add(array_1, 0x20), add(offset, 0x20), length)\n            mstore(add(add(array_1, length), 0x20), /** @src -1:-1:-1 */ 0)\n            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n            array := array_1\n        }\n    }\n    /// @use-src 1:\"@openzeppelin/contracts/token/ERC20/ERC20.sol\", 4:\"@openzeppelin/contracts/utils/Context.sol\", 5:\"contracts/MintableERC20.sol\"\n    object \"MintableERC20_926_deployed\" {\n        code {\n            {\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x06fdde03 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let ret := 0\n                        let slotValue := sload(/** @src 1:1837:1842  \"_name\" */ 0x03)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        let length := 0\n                        length := shr(1, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(_1, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(_1, 32), and(slotValue, not(255)))\n                            ret := add(add(_1, shl(5, iszero(iszero(length)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, /** @src 1:1837:1842  \"_name\" */ 0x03)\n                            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                            let dataPos := 87903029871075914254377627908054574944891091886930582284385770809450030037083\n                            let i := 0\n                            for { } lt(i, length) { i := add(i, 32) }\n                            {\n                                mstore(add(add(_1, i), 32), sload(dataPos))\n                                dataPos := add(dataPos, 1)\n                            }\n                            ret := add(add(_1, i), 32)\n                        }\n                        let newFreePtr := add(_1, and(add(sub(ret, _1), 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, _1))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                        return(newFreePtr, sub(abi_encode_string(newFreePtr, _1), newFreePtr))\n                    }\n                    case 0x095ea7b3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_t_address()\n                        let value := calldataload(36)\n                        /// @src 1:9790:9879  \"if (owner == address(0)) {...\"\n                        if /** @src 1:9794:9813  \"owner == address(0)\" */ iszero(/** @src 4:735:745  \"msg.sender\" */ caller())\n                        /// @src 1:9790:9879  \"if (owner == address(0)) {...\"\n                        {\n                            /// @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                            mstore(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\" */ shl(224, 0xe602df05))\n                            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                            revert(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                        }\n                        let _2 := and(/** @src 1:9892:9913  \"spender == address(0)\" */ value0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                        /// @src 1:9888:9978  \"if (spender == address(0)) {...\"\n                        if /** @src 1:9892:9913  \"spender == address(0)\" */ iszero(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ _2)\n                        /// @src 1:9888:9978  \"if (spender == address(0)) {...\"\n                        {\n                            /// @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                            mstore(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\" */ shl(225, 0x4a1406b1))\n                            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                            revert(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                        }\n                        mstore(0, /** @src 4:735:745  \"msg.sender\" */ caller())\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(32, 1)\n                        let dataSlot := keccak256(0, 64)\n                        /// @src 1:9987:10014  \"_allowances[owner][spender]\"\n                        let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ _2)\n                        mstore(0x20, /** @src 1:9987:10005  \"_allowances[owner]\" */ dataSlot)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                        sstore(/** @src 1:9987:10014  \"_allowances[owner][spender]\" */ dataSlot_1, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ value)\n                        /// @src 1:10066:10097  \"Approval(owner, spender, value)\"\n                        let _3 := /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ mload(64)\n                        mstore(_3, value)\n                        /// @src 1:10066:10097  \"Approval(owner, spender, value)\"\n                        log3(_3, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 32, /** @src 1:10066:10097  \"Approval(owner, spender, value)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 4:735:745  \"msg.sender\" */ caller(), /** @src 1:10066:10097  \"Approval(owner, spender, value)\" */ _2)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos := mload(64)\n                        mstore(memPos, 1)\n                        return(memPos, 32)\n                    }\n                    case 0x18160ddd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _4 := sload(/** @src 1:2908:2920  \"_totalSupply\" */ 0x02)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, _4)\n                        return(memPos_1, 32)\n                    }\n                    case 0x2004ffd9 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(0, /** @src 5:568:578  \"msg.sender\" */ caller())\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(0x20, /** @src 5:555:567  \"lastMintTime\" */ 0x05)\n                        /// @src 5:555:657  \"lastMintTime[msg.sender] == 0 ||...\"\n                        let expr := /** @src 5:555:584  \"lastMintTime[msg.sender] == 0\" */ iszero(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sload(keccak256(0, 64)))\n                        /// @src 5:555:657  \"lastMintTime[msg.sender] == 0 ||...\"\n                        if iszero(expr)\n                        {\n                            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(0, /** @src 5:568:578  \"msg.sender\" */ caller())\n                            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(0x20, /** @src 5:555:567  \"lastMintTime\" */ 0x05)\n                            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                            let _5 := sload(keccak256(0, 64))\n                            /// @src 5:555:657  \"lastMintTime[msg.sender] == 0 ||...\"\n                            expr := /** @src 5:604:657  \"block.timestamp > lastMintTime[msg.sender] + interval\" */ gt(/** @src 5:604:619  \"block.timestamp\" */ timestamp(), /** @src 5:622:657  \"lastMintTime[msg.sender] + interval\" */ checked_add_uint256(_5, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sload(/** @src 5:649:657  \"interval\" */ 0x06)))\n                        }\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        if iszero(expr)\n                        {\n                            let memPtr := mload(64)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, 4), 0x20)\n                            mstore(add(memPtr, 36), 38)\n                            mstore(add(memPtr, 68), \"You need to wait an hour between\")\n                            mstore(add(memPtr, 100), \" mints\")\n                            revert(memPtr, 132)\n                        }\n                        /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n                        if /** @src 1:7509:7530  \"account == address(0)\" */ iszero(/** @src 5:568:578  \"msg.sender\" */ caller())\n                        /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n                        {\n                            /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                            mstore(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                            revert(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                        }\n                        /// @src 1:7634:7639  \"value\"\n                        fun_update(/** @src 5:568:578  \"msg.sender\" */ caller(), /** @src 5:749:770  \"100000000000000000000\" */ 0x056bc75e2d63100000)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(0, /** @src 5:568:578  \"msg.sender\" */ caller())\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(0x20, /** @src 5:555:567  \"lastMintTime\" */ 0x05)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        sstore(keccak256(0, 64), /** @src 5:808:823  \"block.timestamp\" */ timestamp())\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        return(0, 0)\n                    }\n                    case 0x22a90082 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        /// @src 5:1284:1325  \"require(msg.sender == owner, \\\"Not owner\\\")\"\n                        require_helper_stringliteral_c266(/** @src 5:1292:1311  \"msg.sender == owner\" */ eq(/** @src 5:1292:1302  \"msg.sender\" */ caller(), /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ and(sload(/** @src 5:1306:1311  \"owner\" */ 0x07), /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))))\n                        sstore(/** @src 5:1217:1240  \"interval = _newInterval\" */ 0x06, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ calldataload(4))\n                        return(0, 0)\n                    }\n                    case 0x23b872dd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_1 := abi_decode_t_address()\n                        let value1 := abi_decode_address()\n                        let value_1 := calldataload(68)\n                        let _6 := and(value0_1, sub(shl(160, 1), 1))\n                        mstore(0, _6)\n                        mstore(32, 1)\n                        let dataSlot_2 := keccak256(0, 64)\n                        /// @src 1:3638:3665  \"_allowances[owner][spender]\"\n                        let dataSlot_3 := /** @src -1:-1:-1 */ 0\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ and(/** @src 4:735:745  \"msg.sender\" */ caller(), /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 1:3638:3656  \"_allowances[owner]\" */ dataSlot_2)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                        let _7 := sload(/** @src 1:3638:3665  \"_allowances[owner][spender]\" */ dataSlot_3)\n                        /// @src 1:10557:10866  \"if (currentAllowance < type(uint256).max) {...\"\n                        if /** @src 1:10561:10597  \"currentAllowance < type(uint256).max\" */ lt(_7, /** @src 1:10580:10597  \"type(uint256).max\" */ not(0))\n                        /// @src 1:10557:10866  \"if (currentAllowance < type(uint256).max) {...\"\n                        {\n                            /// @src 1:10613:10743  \"if (currentAllowance < value) {...\"\n                            if /** @src 1:10617:10641  \"currentAllowance < value\" */ lt(_7, value_1)\n                            /// @src 1:10613:10743  \"if (currentAllowance < value) {...\"\n                            {\n                                /// @src 1:10668:10728  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                mstore(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:10668:10728  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\" */ shl(225, 0x7dc7a0d9))\n                                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                                mstore(4, /** @src 4:735:745  \"msg.sender\" */ caller())\n                                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                                mstore(36, _7)\n                                mstore(68, value_1)\n                                /// @src 1:10668:10728  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                revert(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, 100)\n                            }\n                            /// @src 1:9790:9879  \"if (owner == address(0)) {...\"\n                            if /** @src 1:9794:9813  \"owner == address(0)\" */ iszero(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ _6)\n                            /// @src 1:9790:9879  \"if (owner == address(0)) {...\"\n                            {\n                                /// @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                                mstore(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\" */ shl(224, 0xe602df05))\n                                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                                mstore(4, 0)\n                                /// @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                                revert(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                            }\n                            /// @src 1:9888:9978  \"if (spender == address(0)) {...\"\n                            if /** @src 1:9892:9913  \"spender == address(0)\" */ iszero(/** @src 4:735:745  \"msg.sender\" */ caller())\n                            /// @src 1:9888:9978  \"if (spender == address(0)) {...\"\n                            {\n                                /// @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                                mstore(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\" */ shl(225, 0x4a1406b1))\n                                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                                mstore(4, 0)\n                                /// @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                                revert(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                            }\n                            mstore(0, _6)\n                            mstore(32, 1)\n                            let dataSlot_4 := keccak256(0, 64)\n                            /// @src 1:9987:10014  \"_allowances[owner][spender]\"\n                            let dataSlot_5 := /** @src -1:-1:-1 */ 0\n                            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ and(/** @src 4:735:745  \"msg.sender\" */ caller(), /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1)))\n                            mstore(0x20, /** @src 1:9987:10005  \"_allowances[owner]\" */ dataSlot_4)\n                            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                            dataSlot_5 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                            sstore(/** @src 1:9987:10014  \"_allowances[owner][spender]\" */ dataSlot_5, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sub(/** @src 1:10809:10833  \"currentAllowance - value\" */ _7, value_1))\n                        }\n                        /// @src 1:4967:4972  \"value\"\n                        fun_transfer(value0_1, value1, value_1)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, 1)\n                        return(memPos_2, 32)\n                    }\n                    case 0x313ce567 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, /** @src 1:2761:2763  \"18\" */ 0x12)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        return(memPos_3, 32)\n                    }\n                    case 0x484b973c {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_2 := abi_decode_t_address()\n                        /// @src 5:1284:1325  \"require(msg.sender == owner, \\\"Not owner\\\")\"\n                        require_helper_stringliteral_c266(/** @src 5:1292:1311  \"msg.sender == owner\" */ eq(/** @src 5:1292:1302  \"msg.sender\" */ caller(), /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ and(sload(/** @src 5:1306:1311  \"owner\" */ 0x07), /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n                        if /** @src 1:7509:7530  \"account == address(0)\" */ iszero(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ and(/** @src 1:7509:7530  \"account == address(0)\" */ value0_2, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1)))\n                        /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n                        {\n                            /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                            mstore(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                            revert(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                        }\n                        /// @src 1:7634:7639  \"value\"\n                        fun_update(value0_2, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ calldataload(36))\n                        return(0, 0)\n                    }\n                    case 0x6aa71d18 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_t_address(), sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 5:170:214  \"mapping(address => uint) public lastMintTime\" */ 5)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        let _8 := sload(keccak256(0, 64))\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, _8)\n                        return(memPos_4, 32)\n                    }\n                    case 0x70a08231 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_t_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 0)\n                        let _9 := sload(keccak256(0, 64))\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, _9)\n                        return(memPos_5, 32)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_2 := and(sload(/** @src 5:249:269  \"address public owner\" */ 7), /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, value_2)\n                        return(memPos_6, 32)\n                    }\n                    case 0x947a36fb {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _10 := sload(/** @src 5:220:243  \"uint256 public interval\" */ 6)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, _10)\n                        return(memPos_7, 32)\n                    }\n                    case 0x95d89b41 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPtr_1 := mload(64)\n                        let ret_1 := 0\n                        let slotValue_1 := sload(4)\n                        let length_1 := 0\n                        length_1 := shr(1, slotValue_1)\n                        let outOfPlaceEncoding_1 := and(slotValue_1, 1)\n                        if iszero(outOfPlaceEncoding_1)\n                        {\n                            length_1 := and(length_1, 0x7f)\n                        }\n                        if eq(outOfPlaceEncoding_1, lt(length_1, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(memPtr_1, length_1)\n                        switch outOfPlaceEncoding_1\n                        case 0 {\n                            mstore(add(memPtr_1, 32), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr_1, shl(5, iszero(iszero(length_1)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, 4)\n                            let dataPos_1 := 62514009886607029107290561805838585334079798074568712924583230797734656856475\n                            let i_1 := 0\n                            for { } lt(i_1, length_1) { i_1 := add(i_1, 32) }\n                            {\n                                mstore(add(add(memPtr_1, i_1), 32), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, 1)\n                            }\n                            ret_1 := add(add(memPtr_1, i_1), 32)\n                        }\n                        let newFreePtr_1 := add(memPtr_1, and(add(sub(ret_1, memPtr_1), 31), not(31)))\n                        if or(gt(newFreePtr_1, 0xffffffffffffffff), lt(newFreePtr_1, memPtr_1))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr_1)\n                        return(newFreePtr_1, sub(abi_encode_string(newFreePtr_1, memPtr_1), newFreePtr_1))\n                    }\n                    case 0xa9059cbb {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_3 := abi_decode_t_address()\n                        /// @src 1:3440:3445  \"value\"\n                        fun_transfer(/** @src 4:735:745  \"msg.sender\" */ caller(), /** @src 1:3440:3445  \"value\" */ value0_3, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ calldataload(36))\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, 1)\n                        return(memPos_8, 32)\n                    }\n                    case 0xc2ba4744 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let _11 := and(abi_decode_t_address(), sub(shl(160, 1), 1))\n                        mstore(0, _11)\n                        mstore(32, /** @src 5:1043:1055  \"lastMintTime\" */ 0x05)\n                        /// @src 5:1043:1137  \"lastMintTime[_address] == 0 ||...\"\n                        let expr_1 := /** @src 5:1043:1070  \"lastMintTime[_address] == 0\" */ iszero(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sload(keccak256(0, 64)))\n                        /// @src 5:1043:1137  \"lastMintTime[_address] == 0 ||...\"\n                        if iszero(expr_1)\n                        {\n                            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(0, _11)\n                            mstore(32, /** @src 5:1043:1055  \"lastMintTime\" */ 0x05)\n                            /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                            let _12 := sload(keccak256(0, 64))\n                            /// @src 5:1043:1137  \"lastMintTime[_address] == 0 ||...\"\n                            expr_1 := /** @src 5:1086:1137  \"block.timestamp > lastMintTime[_address] + interval\" */ gt(/** @src 5:1086:1101  \"block.timestamp\" */ timestamp(), /** @src 5:1104:1137  \"lastMintTime[_address] + interval\" */ checked_add_uint256(_12, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sload(/** @src 5:1129:1137  \"interval\" */ 0x06)))\n                        }\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_9 := mload(64)\n                        mstore(memPos_9, iszero(iszero(expr_1)))\n                        return(memPos_9, 32)\n                    }\n                    case 0xdd62ed3e {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_4 := abi_decode_t_address()\n                        let value1_1 := abi_decode_address()\n                        mstore(0, and(value0_4, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 1:3638:3649  \"_allowances\" */ 0x01)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        let dataSlot_6 := keccak256(0, 64)\n                        /// @src 1:3638:3665  \"_allowances[owner][spender]\"\n                        let dataSlot_7 := /** @src -1:-1:-1 */ 0\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ and(value1_1, sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 1:3638:3656  \"_allowances[owner]\" */ dataSlot_6)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        dataSlot_7 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                        let _13 := sload(/** @src 1:3638:3665  \"_allowances[owner][spender]\" */ dataSlot_7)\n                        /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_10 := mload(64)\n                        mstore(memPos_10, _13)\n                        return(memPos_10, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                mstore(headStart, 32)\n                let length := mload(value0)\n                mstore(add(headStart, 32), length)\n                mcopy(add(headStart, 64), add(value0, 32), length)\n                mstore(add(add(headStart, length), 64), 0)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function abi_decode_t_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                sum := add(x, y)\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function require_helper_stringliteral_c266(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 9)\n                    mstore(add(memPtr, 68), \"Not owner\")\n                    revert(memPtr, 100)\n                }\n            }\n            /// @ast-id 381 @src 1:5374:5674  \"function _transfer(address from, address to, uint256 value) internal {...\"\n            function fun_transfer(var_from, var_to, var_value)\n            {\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                let _1 := and(/** @src 1:5457:5475  \"from == address(0)\" */ var_from, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:5457:5475  \"from == address(0)\"\n                let _2 := iszero(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                /// @src 1:5453:5539  \"if (from == address(0)) {...\"\n                if /** @src 1:5457:5475  \"from == address(0)\" */ _2\n                /// @src 1:5453:5539  \"if (from == address(0)) {...\"\n                {\n                    /// @src 1:5498:5528  \"ERC20InvalidSender(address(0))\"\n                    mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 1:5498:5528  \"ERC20InvalidSender(address(0))\" */ shl(225, 0x4b637e8f))\n                    /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                    mstore(/** @src 1:5498:5528  \"ERC20InvalidSender(address(0))\" */ 4, /** @src 1:5473:5474  \"0\" */ 0x00)\n                    /// @src 1:5498:5528  \"ERC20InvalidSender(address(0))\"\n                    revert(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 36)\n                }\n                let _3 := and(/** @src 1:5552:5568  \"to == address(0)\" */ var_to, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:5552:5568  \"to == address(0)\"\n                let _4 := iszero(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ _3)\n                /// @src 1:5548:5634  \"if (to == address(0)) {...\"\n                if /** @src 1:5552:5568  \"to == address(0)\" */ _4\n                /// @src 1:5548:5634  \"if (to == address(0)) {...\"\n                {\n                    /// @src 1:5591:5623  \"ERC20InvalidReceiver(address(0))\"\n                    mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                    /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                    mstore(/** @src 1:5591:5623  \"ERC20InvalidReceiver(address(0))\" */ 4, /** @src 1:5473:5474  \"0\" */ 0x00)\n                    /// @src 1:5591:5623  \"ERC20InvalidReceiver(address(0))\"\n                    revert(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 36)\n                }\n                /// @src 1:6074:6614  \"if (from == address(0)) {...\"\n                _2 := /** @src 1:5473:5474  \"0\" */ 0x00\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                mstore(0x20, /** @src 1:5473:5474  \"0\" */ 0x00)\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                let _5 := sload(keccak256(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x40))\n                /// @src 1:6317:6432  \"if (fromBalance < value) {...\"\n                if /** @src 1:6321:6340  \"fromBalance < value\" */ lt(_5, var_value)\n                /// @src 1:6317:6432  \"if (fromBalance < value) {...\"\n                {\n                    /// @src 1:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 1:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ shl(226, 0x391434e3))\n                    /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                    mstore(/** @src 1:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ 4, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                    mstore(36, _5)\n                    mstore(68, var_value)\n                    /// @src 1:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    revert(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 100)\n                }\n                mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                mstore(0x20, /** @src 1:5473:5474  \"0\" */ 0x00)\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                sstore(keccak256(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x40), sub(/** @src 1:6570:6589  \"fromBalance - value\" */ _5, var_value))\n                /// @src 1:6624:7049  \"if (to == address(0)) {...\"\n                _4 := /** @src 1:5473:5474  \"0\" */ 0x00\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ _3)\n                mstore(0x20, /** @src 1:5473:5474  \"0\" */ 0x00)\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                let dataSlot := keccak256(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                sstore(dataSlot, add(sload(/** @src 1:7002:7024  \"_balances[to] += value\" */ dataSlot), /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ var_value))\n                /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n                let _6 := /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ mload(64)\n                mstore(_6, var_value)\n                /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n                log3(_6, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 32, /** @src 1:7064:7089  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _1, _3)\n            }\n            /// @ast-id 458 @src 1:5989:7096  \"function _update(address from, address to, uint256 value) internal virtual {...\"\n            function fun_update(var_to, var_value)\n            {\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                sstore(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02, checked_add_uint256(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sload(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02), var_value))\n                /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                let _1 := and(/** @src 1:6628:6644  \"to == address(0)\" */ var_to, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:6624:7049  \"if (to == address(0)) {...\"\n                switch /** @src 1:6628:6644  \"to == address(0)\" */ iszero(/** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                case /** @src 1:6624:7049  \"if (to == address(0)) {...\" */ 0 {\n                    /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                    mstore(0, _1)\n                    mstore(0x20, 0)\n                    let dataSlot := keccak256(0, 0x40)\n                    sstore(dataSlot, add(sload(/** @src 1:7002:7024  \"_balances[to] += value\" */ dataSlot), /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ var_value))\n                }\n                default /// @src 1:6624:7049  \"if (to == address(0)) {...\"\n                {\n                    /// @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\"\n                    sstore(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ sub(sload(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02), /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ var_value))\n                }\n                /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n                let _2 := /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ mload(64)\n                mstore(_2, var_value)\n                /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n                log3(_2, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 32, /** @src 1:7064:7089  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 5:115:1345  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:7064:7089  \"Transfer(from, to, value)\" */ _1)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220d6deb518315859271cb833d3feebec55732024abc29cf15b9bd673ebf4eff63f64736f6c634300081e0033\"\n    }\n}\n",
          "hash": "80cdaee71158c825ff0ab695d47f2da3702d6dcdf4c63b5260933a27421a0f03",
          "factoryDependencies": {}
        }
      }
    }
  }
}