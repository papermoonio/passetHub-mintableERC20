{
  "id": "8114ff5d0fe2d39bf54e79da31d35c34",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "input": {
    "language": "Solidity",
    "sources": {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "contracts/MintableERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MintableERC20 is ERC20 {\n    // Variables\n    mapping(address => uint) public lastMintTime;\n    uint private interval;\n    address public owner;\n\n    constructor(\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {\n        _mint(msg.sender, 100000000000000000000000);\n\n        owner = msg.sender;\n        interval = 3600;\n    }\n\n    function mintToken() public {\n        require(\n            lastMintTime[msg.sender] == 0 ||\n                block.timestamp > lastMintTime[msg.sender] + interval,\n            \"You need to wait an hour between mints\"\n        );\n        _mint(msg.sender, 100000000000000000000);\n        lastMintTime[msg.sender] = block.timestamp;\n    }\n\n    function ownerMint(address _target, uint256 _amount) public onlyOwner {\n        _mint(_target, _amount);\n    }\n\n    function canMint(address _address) public view returns (bool) {\n        return\n            lastMintTime[_address] == 0 ||\n            block.timestamp > lastMintTime[_address] + interval;\n    }\n\n    function setInterval(uint _newInterval) public onlyOwner {\n        interval = _newInterval;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "parameters": "z"
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [],
    "version": "0.8.30",
    "long_version": "0.8.30+commit.73712a01.Emscripten.clang",
    "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
    "sources": {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
        "id": 0,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
          "exportedSymbols": {
            "IERC1155Errors": [
              136
            ],
            "IERC20Errors": [
              41
            ],
            "IERC721Errors": [
              89
            ]
          },
          "id": 137,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "112:24:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC20Errors",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "138:141:0",
                "text": " @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."
              },
              "fullyImplemented": true,
              "id": 41,
              "linearizedBaseContracts": [
                41
              ],
              "name": "IERC20Errors",
              "nameLocation": "290:12:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "309:309:0",
                    "text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
                  },
                  "errorSelector": "e450d38c",
                  "id": 11,
                  "name": "ERC20InsufficientBalance",
                  "nameLocation": "629:24:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 10,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 5,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "662:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 11,
                        "src": "654:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "654:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 7,
                        "mutability": "mutable",
                        "name": "balance",
                        "nameLocation": "678:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 11,
                        "src": "670:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 6,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "670:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 9,
                        "mutability": "mutable",
                        "name": "needed",
                        "nameLocation": "695:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 11,
                        "src": "687:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 8,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "687:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "653:49:0"
                  },
                  "src": "623:80:0"
                },
                {
                  "documentation": {
                    "id": 12,
                    "nodeType": "StructuredDocumentation",
                    "src": "709:152:0",
                    "text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
                  },
                  "errorSelector": "96c6fd1e",
                  "id": 16,
                  "name": "ERC20InvalidSender",
                  "nameLocation": "872:18:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 15,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 14,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "899:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 16,
                        "src": "891:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 13,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "891:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "890:16:0"
                  },
                  "src": "866:41:0"
                },
                {
                  "documentation": {
                    "id": 17,
                    "nodeType": "StructuredDocumentation",
                    "src": "913:159:0",
                    "text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
                  },
                  "errorSelector": "ec442f05",
                  "id": 21,
                  "name": "ERC20InvalidReceiver",
                  "nameLocation": "1083:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 20,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 19,
                        "mutability": "mutable",
                        "name": "receiver",
                        "nameLocation": "1112:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 21,
                        "src": "1104:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 18,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1104:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1103:18:0"
                  },
                  "src": "1077:45:0"
                },
                {
                  "documentation": {
                    "id": 22,
                    "nodeType": "StructuredDocumentation",
                    "src": "1128:345:0",
                    "text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
                  },
                  "errorSelector": "fb8f41b2",
                  "id": 30,
                  "name": "ERC20InsufficientAllowance",
                  "nameLocation": "1484:26:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 29,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 24,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "1519:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 30,
                        "src": "1511:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 23,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1511:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 26,
                        "mutability": "mutable",
                        "name": "allowance",
                        "nameLocation": "1536:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 30,
                        "src": "1528:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 25,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1528:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 28,
                        "mutability": "mutable",
                        "name": "needed",
                        "nameLocation": "1555:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 30,
                        "src": "1547:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 27,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1547:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1510:52:0"
                  },
                  "src": "1478:85:0"
                },
                {
                  "documentation": {
                    "id": 31,
                    "nodeType": "StructuredDocumentation",
                    "src": "1569:174:0",
                    "text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
                  },
                  "errorSelector": "e602df05",
                  "id": 35,
                  "name": "ERC20InvalidApprover",
                  "nameLocation": "1754:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 34,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 33,
                        "mutability": "mutable",
                        "name": "approver",
                        "nameLocation": "1783:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 35,
                        "src": "1775:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 32,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1775:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1774:18:0"
                  },
                  "src": "1748:45:0"
                },
                {
                  "documentation": {
                    "id": 36,
                    "nodeType": "StructuredDocumentation",
                    "src": "1799:195:0",
                    "text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
                  },
                  "errorSelector": "94280d62",
                  "id": 40,
                  "name": "ERC20InvalidSpender",
                  "nameLocation": "2005:19:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 39,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 38,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2033:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 40,
                        "src": "2025:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 37,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2025:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2024:17:0"
                  },
                  "src": "1999:43:0"
                }
              ],
              "scope": 137,
              "src": "280:1764:0",
              "usedErrors": [
                11,
                16,
                21,
                30,
                35,
                40
              ],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC721Errors",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 42,
                "nodeType": "StructuredDocumentation",
                "src": "2046:143:0",
                "text": " @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."
              },
              "fullyImplemented": true,
              "id": 89,
              "linearizedBaseContracts": [
                89
              ],
              "name": "IERC721Errors",
              "nameLocation": "2200:13:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 43,
                    "nodeType": "StructuredDocumentation",
                    "src": "2220:219:0",
                    "text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
                  },
                  "errorSelector": "89c62b64",
                  "id": 47,
                  "name": "ERC721InvalidOwner",
                  "nameLocation": "2450:18:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 46,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 45,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "2477:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 47,
                        "src": "2469:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 44,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2469:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2468:15:0"
                  },
                  "src": "2444:40:0"
                },
                {
                  "documentation": {
                    "id": 48,
                    "nodeType": "StructuredDocumentation",
                    "src": "2490:132:0",
                    "text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
                  },
                  "errorSelector": "7e273289",
                  "id": 52,
                  "name": "ERC721NonexistentToken",
                  "nameLocation": "2633:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 51,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 50,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2664:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 52,
                        "src": "2656:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 49,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2656:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2655:17:0"
                  },
                  "src": "2627:46:0"
                },
                {
                  "documentation": {
                    "id": 53,
                    "nodeType": "StructuredDocumentation",
                    "src": "2679:289:0",
                    "text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
                  },
                  "errorSelector": "64283d7b",
                  "id": 61,
                  "name": "ERC721IncorrectOwner",
                  "nameLocation": "2979:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 60,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 55,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "3008:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "3000:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 54,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3000:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 57,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3024:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "3016:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 56,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3016:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 59,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "3041:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "3033:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 58,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3033:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2999:48:0"
                  },
                  "src": "2973:75:0"
                },
                {
                  "documentation": {
                    "id": 62,
                    "nodeType": "StructuredDocumentation",
                    "src": "3054:152:0",
                    "text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
                  },
                  "errorSelector": "73c6ac6e",
                  "id": 66,
                  "name": "ERC721InvalidSender",
                  "nameLocation": "3217:19:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 65,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 64,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "3245:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 66,
                        "src": "3237:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 63,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3237:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3236:16:0"
                  },
                  "src": "3211:42:0"
                },
                {
                  "documentation": {
                    "id": 67,
                    "nodeType": "StructuredDocumentation",
                    "src": "3259:159:0",
                    "text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
                  },
                  "errorSelector": "64a0ae92",
                  "id": 71,
                  "name": "ERC721InvalidReceiver",
                  "nameLocation": "3429:21:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 70,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 69,
                        "mutability": "mutable",
                        "name": "receiver",
                        "nameLocation": "3459:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 71,
                        "src": "3451:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 68,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3451:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3450:18:0"
                  },
                  "src": "3423:46:0"
                },
                {
                  "documentation": {
                    "id": 72,
                    "nodeType": "StructuredDocumentation",
                    "src": "3475:247:0",
                    "text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
                  },
                  "errorSelector": "177e802f",
                  "id": 78,
                  "name": "ERC721InsufficientApproval",
                  "nameLocation": "3733:26:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 77,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 74,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "3768:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 78,
                        "src": "3760:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 73,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3760:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 76,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3786:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 78,
                        "src": "3778:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 75,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3778:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3759:35:0"
                  },
                  "src": "3727:68:0"
                },
                {
                  "documentation": {
                    "id": 79,
                    "nodeType": "StructuredDocumentation",
                    "src": "3801:174:0",
                    "text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
                  },
                  "errorSelector": "a9fbf51f",
                  "id": 83,
                  "name": "ERC721InvalidApprover",
                  "nameLocation": "3986:21:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 82,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 81,
                        "mutability": "mutable",
                        "name": "approver",
                        "nameLocation": "4016:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 83,
                        "src": "4008:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 80,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4008:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4007:18:0"
                  },
                  "src": "3980:46:0"
                },
                {
                  "documentation": {
                    "id": 84,
                    "nodeType": "StructuredDocumentation",
                    "src": "4032:197:0",
                    "text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
                  },
                  "errorSelector": "5b08ba18",
                  "id": 88,
                  "name": "ERC721InvalidOperator",
                  "nameLocation": "4240:21:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 87,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 86,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "4270:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 88,
                        "src": "4262:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 85,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4262:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4261:18:0"
                  },
                  "src": "4234:46:0"
                }
              ],
              "scope": 137,
              "src": "2190:2092:0",
              "usedErrors": [
                47,
                52,
                61,
                66,
                71,
                78,
                83,
                88
              ],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC1155Errors",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 90,
                "nodeType": "StructuredDocumentation",
                "src": "4284:145:0",
                "text": " @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."
              },
              "fullyImplemented": true,
              "id": 136,
              "linearizedBaseContracts": [
                136
              ],
              "name": "IERC1155Errors",
              "nameLocation": "4440:14:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 91,
                    "nodeType": "StructuredDocumentation",
                    "src": "4461:361:0",
                    "text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
                  },
                  "errorSelector": "03dee4c5",
                  "id": 101,
                  "name": "ERC1155InsufficientBalance",
                  "nameLocation": "4833:26:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 100,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 93,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "4868:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 101,
                        "src": "4860:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 92,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4860:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 95,
                        "mutability": "mutable",
                        "name": "balance",
                        "nameLocation": "4884:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 101,
                        "src": "4876:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 94,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4876:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 97,
                        "mutability": "mutable",
                        "name": "needed",
                        "nameLocation": "4901:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 101,
                        "src": "4893:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 96,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4893:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 99,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4917:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 101,
                        "src": "4909:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 98,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4909:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4859:66:0"
                  },
                  "src": "4827:99:0"
                },
                {
                  "documentation": {
                    "id": 102,
                    "nodeType": "StructuredDocumentation",
                    "src": "4932:152:0",
                    "text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
                  },
                  "errorSelector": "01a83514",
                  "id": 106,
                  "name": "ERC1155InvalidSender",
                  "nameLocation": "5095:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 105,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 104,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "5124:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 106,
                        "src": "5116:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 103,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5116:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5115:16:0"
                  },
                  "src": "5089:43:0"
                },
                {
                  "documentation": {
                    "id": 107,
                    "nodeType": "StructuredDocumentation",
                    "src": "5138:159:0",
                    "text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
                  },
                  "errorSelector": "57f447ce",
                  "id": 111,
                  "name": "ERC1155InvalidReceiver",
                  "nameLocation": "5308:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 110,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 109,
                        "mutability": "mutable",
                        "name": "receiver",
                        "nameLocation": "5339:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 111,
                        "src": "5331:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 108,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5331:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5330:18:0"
                  },
                  "src": "5302:47:0"
                },
                {
                  "documentation": {
                    "id": 112,
                    "nodeType": "StructuredDocumentation",
                    "src": "5355:256:0",
                    "text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
                  },
                  "errorSelector": "e237d922",
                  "id": 118,
                  "name": "ERC1155MissingApprovalForAll",
                  "nameLocation": "5622:28:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 117,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 114,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "5659:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 118,
                        "src": "5651:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 113,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5651:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 116,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "5677:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 118,
                        "src": "5669:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 115,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5669:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5650:33:0"
                  },
                  "src": "5616:68:0"
                },
                {
                  "documentation": {
                    "id": 119,
                    "nodeType": "StructuredDocumentation",
                    "src": "5690:174:0",
                    "text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
                  },
                  "errorSelector": "3e31884e",
                  "id": 123,
                  "name": "ERC1155InvalidApprover",
                  "nameLocation": "5875:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 122,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 121,
                        "mutability": "mutable",
                        "name": "approver",
                        "nameLocation": "5906:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 123,
                        "src": "5898:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 120,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5898:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5897:18:0"
                  },
                  "src": "5869:47:0"
                },
                {
                  "documentation": {
                    "id": 124,
                    "nodeType": "StructuredDocumentation",
                    "src": "5922:197:0",
                    "text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
                  },
                  "errorSelector": "ced3e100",
                  "id": 128,
                  "name": "ERC1155InvalidOperator",
                  "nameLocation": "6130:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 127,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 126,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "6161:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 128,
                        "src": "6153:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 125,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6153:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6152:18:0"
                  },
                  "src": "6124:47:0"
                },
                {
                  "documentation": {
                    "id": 129,
                    "nodeType": "StructuredDocumentation",
                    "src": "6177:280:0",
                    "text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
                  },
                  "errorSelector": "5b059991",
                  "id": 135,
                  "name": "ERC1155InvalidArrayLength",
                  "nameLocation": "6468:25:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 134,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 131,
                        "mutability": "mutable",
                        "name": "idsLength",
                        "nameLocation": "6502:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 135,
                        "src": "6494:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 130,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6494:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 133,
                        "mutability": "mutable",
                        "name": "valuesLength",
                        "nameLocation": "6521:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 135,
                        "src": "6513:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 132,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6513:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6493:41:0"
                  },
                  "src": "6462:73:0"
                }
              ],
              "scope": 137,
              "src": "4430:2107:0",
              "usedErrors": [
                101,
                106,
                111,
                118,
                123,
                128,
                135
              ],
              "usedEvents": []
            }
          ],
          "src": "112:6426:0"
        }
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "id": 1,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
          "exportedSymbols": {
            "Context": [
              785
            ],
            "ERC20": [
              651
            ],
            "IERC20": [
              729
            ],
            "IERC20Errors": [
              41
            ],
            "IERC20Metadata": [
              755
            ]
          },
          "id": 652,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 138,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "105:24:1"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
              "file": "./IERC20.sol",
              "id": 140,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 652,
              "sourceUnit": 730,
              "src": "131:36:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 139,
                    "name": "IERC20",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 729,
                    "src": "139:6:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
              "file": "./extensions/IERC20Metadata.sol",
              "id": 142,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 652,
              "sourceUnit": 756,
              "src": "168:63:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 141,
                    "name": "IERC20Metadata",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 755,
                    "src": "176:14:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
              "file": "../../utils/Context.sol",
              "id": 144,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 652,
              "sourceUnit": 786,
              "src": "232:48:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 143,
                    "name": "Context",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 785,
                    "src": "240:7:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
              "file": "../../interfaces/draft-IERC6093.sol",
              "id": 146,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 652,
              "sourceUnit": 137,
              "src": "281:65:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 145,
                    "name": "IERC20Errors",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 41,
                    "src": "289:12:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 148,
                    "name": "Context",
                    "nameLocations": [
                      "1133:7:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 785,
                    "src": "1133:7:1"
                  },
                  "id": 149,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1133:7:1"
                },
                {
                  "baseName": {
                    "id": 150,
                    "name": "IERC20",
                    "nameLocations": [
                      "1142:6:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 729,
                    "src": "1142:6:1"
                  },
                  "id": 151,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1142:6:1"
                },
                {
                  "baseName": {
                    "id": 152,
                    "name": "IERC20Metadata",
                    "nameLocations": [
                      "1150:14:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 755,
                    "src": "1150:14:1"
                  },
                  "id": 153,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1150:14:1"
                },
                {
                  "baseName": {
                    "id": 154,
                    "name": "IERC20Errors",
                    "nameLocations": [
                      "1166:12:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 41,
                    "src": "1166:12:1"
                  },
                  "id": 155,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1166:12:1"
                }
              ],
              "canonicalName": "ERC20",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 147,
                "nodeType": "StructuredDocumentation",
                "src": "348:757:1",
                "text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."
              },
              "fullyImplemented": true,
              "id": 651,
              "linearizedBaseContracts": [
                651,
                41,
                755,
                729,
                785
              ],
              "name": "ERC20",
              "nameLocation": "1124:5:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 159,
                  "mutability": "mutable",
                  "name": "_balances",
                  "nameLocation": "1229:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1185:53:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 158,
                    "keyName": "account",
                    "keyNameLocation": "1201:7:1",
                    "keyType": {
                      "id": 156,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1193:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1185:35:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 157,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1212:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 165,
                  "mutability": "mutable",
                  "name": "_allowances",
                  "nameLocation": "1317:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1245:83:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "typeName": {
                    "id": 164,
                    "keyName": "account",
                    "keyNameLocation": "1261:7:1",
                    "keyType": {
                      "id": 160,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1253:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1245:63:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(address => uint256))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 163,
                      "keyName": "spender",
                      "keyNameLocation": "1288:7:1",
                      "keyType": {
                        "id": 161,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1280:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "1272:35:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 162,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1299:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 167,
                  "mutability": "mutable",
                  "name": "_totalSupply",
                  "nameLocation": "1351:12:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1335:28:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 166,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1335:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 169,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1385:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1370:20:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 168,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1370:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 171,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1411:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1396:22:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 170,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1396:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 187,
                    "nodeType": "Block",
                    "src": "1638:57:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 181,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 179,
                            "name": "_name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 169,
                            "src": "1648:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 180,
                            "name": "name_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 174,
                            "src": "1656:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "1648:13:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 182,
                        "nodeType": "ExpressionStatement",
                        "src": "1648:13:1"
                      },
                      {
                        "expression": {
                          "id": 185,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 183,
                            "name": "_symbol",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 171,
                            "src": "1671:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 184,
                            "name": "symbol_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 176,
                            "src": "1681:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "1671:17:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 186,
                        "nodeType": "ExpressionStatement",
                        "src": "1671:17:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 172,
                    "nodeType": "StructuredDocumentation",
                    "src": "1425:152:1",
                    "text": " @dev Sets the values for {name} and {symbol}.\n Both values are immutable: they can only be set once during construction."
                  },
                  "id": 188,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 177,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 174,
                        "mutability": "mutable",
                        "name": "name_",
                        "nameLocation": "1608:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 188,
                        "src": "1594:19:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 173,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1594:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 176,
                        "mutability": "mutable",
                        "name": "symbol_",
                        "nameLocation": "1629:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 188,
                        "src": "1615:21:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 175,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1615:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1593:44:1"
                  },
                  "returnParameters": {
                    "id": 178,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1638:0:1"
                  },
                  "scope": 651,
                  "src": "1582:113:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "baseFunctions": [
                    742
                  ],
                  "body": {
                    "id": 196,
                    "nodeType": "Block",
                    "src": "1820:29:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 194,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 169,
                          "src": "1837:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 193,
                        "id": 195,
                        "nodeType": "Return",
                        "src": "1830:12:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 189,
                    "nodeType": "StructuredDocumentation",
                    "src": "1701:54:1",
                    "text": " @dev Returns the name of the token."
                  },
                  "functionSelector": "06fdde03",
                  "id": 197,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "name",
                  "nameLocation": "1769:4:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 190,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1773:2:1"
                  },
                  "returnParameters": {
                    "id": 193,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 192,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 197,
                        "src": "1805:13:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 191,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1805:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1804:15:1"
                  },
                  "scope": 651,
                  "src": "1760:89:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    748
                  ],
                  "body": {
                    "id": 205,
                    "nodeType": "Block",
                    "src": "2024:31:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 203,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 171,
                          "src": "2041:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 202,
                        "id": 204,
                        "nodeType": "Return",
                        "src": "2034:14:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 198,
                    "nodeType": "StructuredDocumentation",
                    "src": "1855:102:1",
                    "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
                  },
                  "functionSelector": "95d89b41",
                  "id": 206,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "symbol",
                  "nameLocation": "1971:6:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 199,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1977:2:1"
                  },
                  "returnParameters": {
                    "id": 202,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 201,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 206,
                        "src": "2009:13:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 200,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2009:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2008:15:1"
                  },
                  "scope": 651,
                  "src": "1962:93:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    754
                  ],
                  "body": {
                    "id": 214,
                    "nodeType": "Block",
                    "src": "2744:26:1",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "3138",
                          "id": 212,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2761:2:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_18_by_1",
                            "typeString": "int_const 18"
                          },
                          "value": "18"
                        },
                        "functionReturnParameters": 211,
                        "id": 213,
                        "nodeType": "Return",
                        "src": "2754:9:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 207,
                    "nodeType": "StructuredDocumentation",
                    "src": "2061:622:1",
                    "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
                  },
                  "functionSelector": "313ce567",
                  "id": 215,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "decimals",
                  "nameLocation": "2697:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 208,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2705:2:1"
                  },
                  "returnParameters": {
                    "id": 211,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 210,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 215,
                        "src": "2737:5:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 209,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "2737:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2736:7:1"
                  },
                  "scope": 651,
                  "src": "2688:82:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    678
                  ],
                  "body": {
                    "id": 223,
                    "nodeType": "Block",
                    "src": "2891:36:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 221,
                          "name": "_totalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 167,
                          "src": "2908:12:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 220,
                        "id": 222,
                        "nodeType": "Return",
                        "src": "2901:19:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 216,
                    "nodeType": "StructuredDocumentation",
                    "src": "2776:49:1",
                    "text": " @dev See {IERC20-totalSupply}."
                  },
                  "functionSelector": "18160ddd",
                  "id": 224,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "2839:11:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 217,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2850:2:1"
                  },
                  "returnParameters": {
                    "id": 220,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 219,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 224,
                        "src": "2882:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 218,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2882:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2881:9:1"
                  },
                  "scope": 651,
                  "src": "2830:97:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    686
                  ],
                  "body": {
                    "id": 236,
                    "nodeType": "Block",
                    "src": "3059:42:1",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 232,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 159,
                            "src": "3076:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 234,
                          "indexExpression": {
                            "id": 233,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 227,
                            "src": "3086:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3076:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 231,
                        "id": 235,
                        "nodeType": "Return",
                        "src": "3069:25:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 225,
                    "nodeType": "StructuredDocumentation",
                    "src": "2933:47:1",
                    "text": " @dev See {IERC20-balanceOf}."
                  },
                  "functionSelector": "70a08231",
                  "id": 237,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "2994:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 228,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 227,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "3012:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "3004:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 226,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3004:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3003:17:1"
                  },
                  "returnParameters": {
                    "id": 231,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 230,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "3050:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 229,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3050:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3049:9:1"
                  },
                  "scope": 651,
                  "src": "2985:116:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    696
                  ],
                  "body": {
                    "id": 260,
                    "nodeType": "Block",
                    "src": "3371:103:1",
                    "statements": [
                      {
                        "assignments": [
                          248
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 248,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "3389:5:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 260,
                            "src": "3381:13:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 247,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3381:7:1",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 251,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 249,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "3397:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 250,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3397:12:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3381:28:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 253,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 248,
                              "src": "3429:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 254,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 240,
                              "src": "3436:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 255,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 242,
                              "src": "3440:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 252,
                            "name": "_transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "3419:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 256,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3419:27:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 257,
                        "nodeType": "ExpressionStatement",
                        "src": "3419:27:1"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 258,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3463:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 246,
                        "id": 259,
                        "nodeType": "Return",
                        "src": "3456:11:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 238,
                    "nodeType": "StructuredDocumentation",
                    "src": "3107:184:1",
                    "text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
                  },
                  "functionSelector": "a9059cbb",
                  "id": 261,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "3305:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 243,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 240,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3322:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 261,
                        "src": "3314:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 239,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3314:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 242,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "3334:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 261,
                        "src": "3326:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 241,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3326:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3313:27:1"
                  },
                  "returnParameters": {
                    "id": 246,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 245,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 261,
                        "src": "3365:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 244,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3365:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3364:6:1"
                  },
                  "scope": 651,
                  "src": "3296:178:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    706
                  ],
                  "body": {
                    "id": 277,
                    "nodeType": "Block",
                    "src": "3621:51:1",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 271,
                              "name": "_allowances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 165,
                              "src": "3638:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 273,
                            "indexExpression": {
                              "id": 272,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 264,
                              "src": "3650:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3638:18:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 275,
                          "indexExpression": {
                            "id": 274,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 266,
                            "src": "3657:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3638:27:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 270,
                        "id": 276,
                        "nodeType": "Return",
                        "src": "3631:34:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 262,
                    "nodeType": "StructuredDocumentation",
                    "src": "3480:47:1",
                    "text": " @dev See {IERC20-allowance}."
                  },
                  "functionSelector": "dd62ed3e",
                  "id": 278,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nameLocation": "3541:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 267,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 264,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "3559:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 278,
                        "src": "3551:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 263,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3551:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 266,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "3574:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 278,
                        "src": "3566:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 265,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3566:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3550:32:1"
                  },
                  "returnParameters": {
                    "id": 270,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 269,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 278,
                        "src": "3612:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 268,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3612:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3611:9:1"
                  },
                  "scope": 651,
                  "src": "3532:140:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    716
                  ],
                  "body": {
                    "id": 301,
                    "nodeType": "Block",
                    "src": "4058:107:1",
                    "statements": [
                      {
                        "assignments": [
                          289
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 289,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "4076:5:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 301,
                            "src": "4068:13:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 288,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4068:7:1",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 292,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 290,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "4084:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 291,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4084:12:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4068:28:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 294,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 289,
                              "src": "4115:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 295,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 281,
                              "src": "4122:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 296,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 283,
                              "src": "4131:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 293,
                            "name": "_approve",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              542,
                              602
                            ],
                            "referencedDeclaration": 542,
                            "src": "4106:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 297,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4106:31:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 298,
                        "nodeType": "ExpressionStatement",
                        "src": "4106:31:1"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 299,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4154:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 287,
                        "id": 300,
                        "nodeType": "Return",
                        "src": "4147:11:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 279,
                    "nodeType": "StructuredDocumentation",
                    "src": "3678:296:1",
                    "text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 302,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "3988:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 284,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 281,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "4004:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 302,
                        "src": "3996:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 280,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3996:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 283,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4021:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 302,
                        "src": "4013:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 282,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4013:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3995:32:1"
                  },
                  "returnParameters": {
                    "id": 287,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 286,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 302,
                        "src": "4052:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 285,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4052:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4051:6:1"
                  },
                  "scope": 651,
                  "src": "3979:186:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    728
                  ],
                  "body": {
                    "id": 333,
                    "nodeType": "Block",
                    "src": "4850:151:1",
                    "statements": [
                      {
                        "assignments": [
                          315
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 315,
                            "mutability": "mutable",
                            "name": "spender",
                            "nameLocation": "4868:7:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 333,
                            "src": "4860:15:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 314,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4860:7:1",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 318,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 316,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "4878:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 317,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4878:12:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4860:30:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 320,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 305,
                              "src": "4916:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 321,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 315,
                              "src": "4922:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 322,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 309,
                              "src": "4931:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 319,
                            "name": "_spendAllowance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 650,
                            "src": "4900:15:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 323,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4900:37:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 324,
                        "nodeType": "ExpressionStatement",
                        "src": "4900:37:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 326,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 305,
                              "src": "4957:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 327,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 307,
                              "src": "4963:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 328,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 309,
                              "src": "4967:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 325,
                            "name": "_transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "4947:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 329,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4947:26:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 330,
                        "nodeType": "ExpressionStatement",
                        "src": "4947:26:1"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 331,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4990:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 313,
                        "id": 332,
                        "nodeType": "Return",
                        "src": "4983:11:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 303,
                    "nodeType": "StructuredDocumentation",
                    "src": "4171:581:1",
                    "text": " @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
                  },
                  "functionSelector": "23b872dd",
                  "id": 334,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "4766:12:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 310,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 305,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "4787:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 334,
                        "src": "4779:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 304,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4779:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 307,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "4801:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 334,
                        "src": "4793:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 306,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4793:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 309,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4813:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 334,
                        "src": "4805:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 308,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4805:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4778:41:1"
                  },
                  "returnParameters": {
                    "id": 313,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 312,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 334,
                        "src": "4844:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 311,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4844:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4843:6:1"
                  },
                  "scope": 651,
                  "src": "4757:244:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 380,
                    "nodeType": "Block",
                    "src": "5443:231:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 349,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 344,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 337,
                            "src": "5457:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 347,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5473:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 346,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5465:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 345,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5465:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5465:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5457:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 358,
                        "nodeType": "IfStatement",
                        "src": "5453:86:1",
                        "trueBody": {
                          "id": 357,
                          "nodeType": "Block",
                          "src": "5477:62:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 353,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "5525:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 352,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "5517:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 351,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "5517:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 354,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5517:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 350,
                                  "name": "ERC20InvalidSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 16,
                                  "src": "5498:18:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 355,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5498:30:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 356,
                              "nodeType": "RevertStatement",
                              "src": "5491:37:1"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 364,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 359,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 339,
                            "src": "5552:2:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 362,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5566:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 361,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5558:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 360,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5558:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 363,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5558:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5552:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 373,
                        "nodeType": "IfStatement",
                        "src": "5548:86:1",
                        "trueBody": {
                          "id": 372,
                          "nodeType": "Block",
                          "src": "5570:64:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 368,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "5620:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 367,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "5612:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 366,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "5612:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 369,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5612:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 365,
                                  "name": "ERC20InvalidReceiver",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 21,
                                  "src": "5591:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 370,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5591:32:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 371,
                              "nodeType": "RevertStatement",
                              "src": "5584:39:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 375,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 337,
                              "src": "5651:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 376,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 339,
                              "src": "5657:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 377,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 341,
                              "src": "5661:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 374,
                            "name": "_update",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "5643:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 378,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5643:24:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 379,
                        "nodeType": "ExpressionStatement",
                        "src": "5643:24:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 335,
                    "nodeType": "StructuredDocumentation",
                    "src": "5007:362:1",
                    "text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
                  },
                  "id": 381,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_transfer",
                  "nameLocation": "5383:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 342,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 337,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "5401:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 381,
                        "src": "5393:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 336,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5393:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 339,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "5415:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 381,
                        "src": "5407:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 338,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5407:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 341,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "5427:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 381,
                        "src": "5419:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 340,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5419:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5392:41:1"
                  },
                  "returnParameters": {
                    "id": 343,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5443:0:1"
                  },
                  "scope": 651,
                  "src": "5374:300:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 457,
                    "nodeType": "Block",
                    "src": "6064:1032:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 391,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 384,
                            "src": "6078:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 394,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6094:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 393,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6086:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 392,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "6086:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 395,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6086:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "6078:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 428,
                          "nodeType": "Block",
                          "src": "6252:362:1",
                          "statements": [
                            {
                              "assignments": [
                                403
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 403,
                                  "mutability": "mutable",
                                  "name": "fromBalance",
                                  "nameLocation": "6274:11:1",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 428,
                                  "src": "6266:19:1",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 402,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6266:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 407,
                              "initialValue": {
                                "baseExpression": {
                                  "id": 404,
                                  "name": "_balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 159,
                                  "src": "6288:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 406,
                                "indexExpression": {
                                  "id": 405,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 384,
                                  "src": "6298:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6288:15:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "6266:37:1"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 410,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 408,
                                  "name": "fromBalance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 403,
                                  "src": "6321:11:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 409,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 388,
                                  "src": "6335:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6321:19:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 418,
                              "nodeType": "IfStatement",
                              "src": "6317:115:1",
                              "trueBody": {
                                "id": 417,
                                "nodeType": "Block",
                                "src": "6342:90:1",
                                "statements": [
                                  {
                                    "errorCall": {
                                      "arguments": [
                                        {
                                          "id": 412,
                                          "name": "from",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 384,
                                          "src": "6392:4:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 413,
                                          "name": "fromBalance",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 403,
                                          "src": "6398:11:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "id": 414,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 388,
                                          "src": "6411:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 411,
                                        "name": "ERC20InsufficientBalance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 11,
                                        "src": "6367:24:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
                                          "typeString": "function (address,uint256,uint256) pure returns (error)"
                                        }
                                      },
                                      "id": 415,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "6367:50:1",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_error",
                                        "typeString": "error"
                                      }
                                    },
                                    "id": 416,
                                    "nodeType": "RevertStatement",
                                    "src": "6360:57:1"
                                  }
                                ]
                              }
                            },
                            {
                              "id": 427,
                              "nodeType": "UncheckedBlock",
                              "src": "6445:159:1",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 425,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "baseExpression": {
                                        "id": 419,
                                        "name": "_balances",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 159,
                                        "src": "6552:9:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                          "typeString": "mapping(address => uint256)"
                                        }
                                      },
                                      "id": 421,
                                      "indexExpression": {
                                        "id": 420,
                                        "name": "from",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 384,
                                        "src": "6562:4:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "nodeType": "IndexAccess",
                                      "src": "6552:15:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 424,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 422,
                                        "name": "fromBalance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 403,
                                        "src": "6570:11:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "id": 423,
                                        "name": "value",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 388,
                                        "src": "6584:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "6570:19:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "6552:37:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 426,
                                  "nodeType": "ExpressionStatement",
                                  "src": "6552:37:1"
                                }
                              ]
                            }
                          ]
                        },
                        "id": 429,
                        "nodeType": "IfStatement",
                        "src": "6074:540:1",
                        "trueBody": {
                          "id": 401,
                          "nodeType": "Block",
                          "src": "6098:148:1",
                          "statements": [
                            {
                              "expression": {
                                "id": 399,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 397,
                                  "name": "_totalSupply",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 167,
                                  "src": "6214:12:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "id": 398,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 388,
                                  "src": "6230:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6214:21:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 400,
                              "nodeType": "ExpressionStatement",
                              "src": "6214:21:1"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 435,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 430,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 386,
                            "src": "6628:2:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 433,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6642:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 432,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6634:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 431,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "6634:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 434,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6634:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "6628:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 449,
                          "nodeType": "Block",
                          "src": "6843:206:1",
                          "statements": [
                            {
                              "id": 448,
                              "nodeType": "UncheckedBlock",
                              "src": "6857:182:1",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 446,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "baseExpression": {
                                        "id": 442,
                                        "name": "_balances",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 159,
                                        "src": "7002:9:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                          "typeString": "mapping(address => uint256)"
                                        }
                                      },
                                      "id": 444,
                                      "indexExpression": {
                                        "id": 443,
                                        "name": "to",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 386,
                                        "src": "7012:2:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "nodeType": "IndexAccess",
                                      "src": "7002:13:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "id": 445,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 388,
                                      "src": "7019:5:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "7002:22:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 447,
                                  "nodeType": "ExpressionStatement",
                                  "src": "7002:22:1"
                                }
                              ]
                            }
                          ]
                        },
                        "id": 450,
                        "nodeType": "IfStatement",
                        "src": "6624:425:1",
                        "trueBody": {
                          "id": 441,
                          "nodeType": "Block",
                          "src": "6646:191:1",
                          "statements": [
                            {
                              "id": 440,
                              "nodeType": "UncheckedBlock",
                              "src": "6660:167:1",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 438,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 436,
                                      "name": "_totalSupply",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 167,
                                      "src": "6791:12:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "-=",
                                    "rightHandSide": {
                                      "id": 437,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 388,
                                      "src": "6807:5:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "6791:21:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 439,
                                  "nodeType": "ExpressionStatement",
                                  "src": "6791:21:1"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 452,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 384,
                              "src": "7073:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 453,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 386,
                              "src": "7079:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 454,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 388,
                              "src": "7083:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 451,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 663,
                            "src": "7064:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 455,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7064:25:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 456,
                        "nodeType": "EmitStatement",
                        "src": "7059:30:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 382,
                    "nodeType": "StructuredDocumentation",
                    "src": "5680:304:1",
                    "text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
                  },
                  "id": 458,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_update",
                  "nameLocation": "5998:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 389,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 384,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "6014:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 458,
                        "src": "6006:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 383,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6006:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 386,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "6028:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 458,
                        "src": "6020:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 385,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6020:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 388,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "6040:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 458,
                        "src": "6032:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 387,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6032:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6005:41:1"
                  },
                  "returnParameters": {
                    "id": 390,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6064:0:1"
                  },
                  "scope": 651,
                  "src": "5989:1107:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 490,
                    "nodeType": "Block",
                    "src": "7495:152:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 471,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 466,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 461,
                            "src": "7509:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 469,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7528:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 468,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7520:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 467,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "7520:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 470,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7520:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "7509:21:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 480,
                        "nodeType": "IfStatement",
                        "src": "7505:91:1",
                        "trueBody": {
                          "id": 479,
                          "nodeType": "Block",
                          "src": "7532:64:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 475,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7582:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 474,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "7574:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 473,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "7574:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 476,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "7574:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 472,
                                  "name": "ERC20InvalidReceiver",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 21,
                                  "src": "7553:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 477,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7553:32:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 478,
                              "nodeType": "RevertStatement",
                              "src": "7546:39:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 484,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7621:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 483,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "7613:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 482,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "7613:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 485,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7613:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 486,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 461,
                              "src": "7625:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 487,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 463,
                              "src": "7634:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 481,
                            "name": "_update",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "7605:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 488,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7605:35:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 489,
                        "nodeType": "ExpressionStatement",
                        "src": "7605:35:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 459,
                    "nodeType": "StructuredDocumentation",
                    "src": "7102:332:1",
                    "text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
                  },
                  "id": 491,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_mint",
                  "nameLocation": "7448:5:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 464,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 461,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "7462:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 491,
                        "src": "7454:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 460,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7454:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 463,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "7479:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 491,
                        "src": "7471:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 462,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7471:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7453:32:1"
                  },
                  "returnParameters": {
                    "id": 465,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7495:0:1"
                  },
                  "scope": 651,
                  "src": "7439:208:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 523,
                    "nodeType": "Block",
                    "src": "8021:150:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 504,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 499,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 494,
                            "src": "8035:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 502,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8054:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 501,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "8046:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 500,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "8046:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 503,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8046:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "8035:21:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 513,
                        "nodeType": "IfStatement",
                        "src": "8031:89:1",
                        "trueBody": {
                          "id": 512,
                          "nodeType": "Block",
                          "src": "8058:62:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 508,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8106:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 507,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "8098:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 506,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "8098:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 509,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "8098:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 505,
                                  "name": "ERC20InvalidSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 16,
                                  "src": "8079:18:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 510,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8079:30:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 511,
                              "nodeType": "RevertStatement",
                              "src": "8072:37:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 515,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 494,
                              "src": "8137:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 518,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8154:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 517,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8146:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 516,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "8146:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 519,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8146:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 520,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 496,
                              "src": "8158:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 514,
                            "name": "_update",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "8129:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 521,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8129:35:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 522,
                        "nodeType": "ExpressionStatement",
                        "src": "8129:35:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 492,
                    "nodeType": "StructuredDocumentation",
                    "src": "7653:307:1",
                    "text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
                  },
                  "id": 524,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_burn",
                  "nameLocation": "7974:5:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 497,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 494,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "7988:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 524,
                        "src": "7980:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 493,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7980:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 496,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "8005:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 524,
                        "src": "7997:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 495,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7997:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7979:32:1"
                  },
                  "returnParameters": {
                    "id": 498,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8021:0:1"
                  },
                  "scope": 651,
                  "src": "7965:206:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 541,
                    "nodeType": "Block",
                    "src": "8781:54:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 535,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 527,
                              "src": "8800:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 536,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "8807:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 537,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 531,
                              "src": "8816:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "74727565",
                              "id": 538,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8823:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 534,
                            "name": "_approve",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              542,
                              602
                            ],
                            "referencedDeclaration": 602,
                            "src": "8791:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
                              "typeString": "function (address,address,uint256,bool)"
                            }
                          },
                          "id": 539,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8791:37:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 540,
                        "nodeType": "ExpressionStatement",
                        "src": "8791:37:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 525,
                    "nodeType": "StructuredDocumentation",
                    "src": "8177:525:1",
                    "text": " @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
                  },
                  "id": 542,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_approve",
                  "nameLocation": "8716:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 532,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 527,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "8733:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 542,
                        "src": "8725:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 526,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8725:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 529,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "8748:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 542,
                        "src": "8740:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 528,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8740:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 531,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "8765:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 542,
                        "src": "8757:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 530,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8757:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8724:47:1"
                  },
                  "returnParameters": {
                    "id": 533,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8781:0:1"
                  },
                  "scope": 651,
                  "src": "8707:128:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 601,
                    "nodeType": "Block",
                    "src": "9780:334:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 559,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 554,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 545,
                            "src": "9794:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 557,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9811:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 556,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9803:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 555,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9803:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 558,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9803:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "9794:19:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 568,
                        "nodeType": "IfStatement",
                        "src": "9790:89:1",
                        "trueBody": {
                          "id": 567,
                          "nodeType": "Block",
                          "src": "9815:64:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 563,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "9865:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 562,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "9857:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 561,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "9857:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 564,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "9857:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 560,
                                  "name": "ERC20InvalidApprover",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 35,
                                  "src": "9836:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 565,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9836:32:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 566,
                              "nodeType": "RevertStatement",
                              "src": "9829:39:1"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 574,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 569,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 547,
                            "src": "9892:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 572,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9911:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 571,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9903:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 570,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9903:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 573,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9903:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "9892:21:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 583,
                        "nodeType": "IfStatement",
                        "src": "9888:90:1",
                        "trueBody": {
                          "id": 582,
                          "nodeType": "Block",
                          "src": "9915:63:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 578,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "9964:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 577,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "9956:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 576,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "9956:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 579,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "9956:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 575,
                                  "name": "ERC20InvalidSpender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 40,
                                  "src": "9936:19:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 580,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9936:31:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 581,
                              "nodeType": "RevertStatement",
                              "src": "9929:38:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 590,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 584,
                                "name": "_allowances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 165,
                                "src": "9987:11:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 587,
                              "indexExpression": {
                                "id": 585,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 545,
                                "src": "9999:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9987:18:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 588,
                            "indexExpression": {
                              "id": 586,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 547,
                              "src": "10006:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9987:27:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 589,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 549,
                            "src": "10017:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9987:35:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 591,
                        "nodeType": "ExpressionStatement",
                        "src": "9987:35:1"
                      },
                      {
                        "condition": {
                          "id": 592,
                          "name": "emitEvent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 551,
                          "src": "10036:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 600,
                        "nodeType": "IfStatement",
                        "src": "10032:76:1",
                        "trueBody": {
                          "id": 599,
                          "nodeType": "Block",
                          "src": "10047:61:1",
                          "statements": [
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 594,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 545,
                                    "src": "10075:5:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 595,
                                    "name": "spender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 547,
                                    "src": "10082:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 596,
                                    "name": "value",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 549,
                                    "src": "10091:5:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 593,
                                  "name": "Approval",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 672,
                                  "src": "10066:8:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,address,uint256)"
                                  }
                                },
                                "id": 597,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "10066:31:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 598,
                              "nodeType": "EmitStatement",
                              "src": "10061:36:1"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 543,
                    "nodeType": "StructuredDocumentation",
                    "src": "8841:836:1",
                    "text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
                  },
                  "id": 602,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_approve",
                  "nameLocation": "9691:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 552,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 545,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "9708:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "9700:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 544,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9700:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 547,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "9723:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "9715:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 546,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9715:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 549,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "9740:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "9732:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 548,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9732:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 551,
                        "mutability": "mutable",
                        "name": "emitEvent",
                        "nameLocation": "9752:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "9747:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 550,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "9747:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9699:63:1"
                  },
                  "returnParameters": {
                    "id": 553,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9780:0:1"
                  },
                  "scope": 651,
                  "src": "9682:432:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 649,
                    "nodeType": "Block",
                    "src": "10485:387:1",
                    "statements": [
                      {
                        "assignments": [
                          613
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 613,
                            "mutability": "mutable",
                            "name": "currentAllowance",
                            "nameLocation": "10503:16:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 649,
                            "src": "10495:24:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 612,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10495:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 618,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 615,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 605,
                              "src": "10532:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 616,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 607,
                              "src": "10539:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 614,
                            "name": "allowance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 278,
                            "src": "10522:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address,address) view returns (uint256)"
                            }
                          },
                          "id": 617,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10522:25:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10495:52:1"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 625,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 619,
                            "name": "currentAllowance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 613,
                            "src": "10561:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 622,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "10585:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  },
                                  "typeName": {
                                    "id": 621,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "10585:7:1",
                                    "typeDescriptions": {}
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  }
                                ],
                                "id": 620,
                                "name": "type",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967269,
                                "src": "10580:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 623,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10580:13:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_meta_type_t_uint256",
                                "typeString": "type(uint256)"
                              }
                            },
                            "id": 624,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "10594:3:1",
                            "memberName": "max",
                            "nodeType": "MemberAccess",
                            "src": "10580:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10561:36:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 648,
                        "nodeType": "IfStatement",
                        "src": "10557:309:1",
                        "trueBody": {
                          "id": 647,
                          "nodeType": "Block",
                          "src": "10599:267:1",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 628,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 626,
                                  "name": "currentAllowance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 613,
                                  "src": "10617:16:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 627,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 609,
                                  "src": "10636:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "10617:24:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 636,
                              "nodeType": "IfStatement",
                              "src": "10613:130:1",
                              "trueBody": {
                                "id": 635,
                                "nodeType": "Block",
                                "src": "10643:100:1",
                                "statements": [
                                  {
                                    "errorCall": {
                                      "arguments": [
                                        {
                                          "id": 630,
                                          "name": "spender",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 607,
                                          "src": "10695:7:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 631,
                                          "name": "currentAllowance",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 613,
                                          "src": "10704:16:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "id": 632,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 609,
                                          "src": "10722:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 629,
                                        "name": "ERC20InsufficientAllowance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 30,
                                        "src": "10668:26:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
                                          "typeString": "function (address,uint256,uint256) pure returns (error)"
                                        }
                                      },
                                      "id": 633,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "10668:60:1",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_error",
                                        "typeString": "error"
                                      }
                                    },
                                    "id": 634,
                                    "nodeType": "RevertStatement",
                                    "src": "10661:67:1"
                                  }
                                ]
                              }
                            },
                            {
                              "id": 646,
                              "nodeType": "UncheckedBlock",
                              "src": "10756:100:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 638,
                                        "name": "owner",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 605,
                                        "src": "10793:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "id": 639,
                                        "name": "spender",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 607,
                                        "src": "10800:7:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 642,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 640,
                                          "name": "currentAllowance",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 613,
                                          "src": "10809:16:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "-",
                                        "rightExpression": {
                                          "id": 641,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 609,
                                          "src": "10828:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "10809:24:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      {
                                        "hexValue": "66616c7365",
                                        "id": 643,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10835:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "false"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      ],
                                      "id": 637,
                                      "name": "_approve",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [
                                        542,
                                        602
                                      ],
                                      "referencedDeclaration": 602,
                                      "src": "10784:8:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
                                        "typeString": "function (address,address,uint256,bool)"
                                      }
                                    },
                                    "id": 644,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "10784:57:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 645,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10784:57:1"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 603,
                    "nodeType": "StructuredDocumentation",
                    "src": "10120:271:1",
                    "text": " @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
                  },
                  "id": 650,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_spendAllowance",
                  "nameLocation": "10405:15:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 610,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 605,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "10429:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 650,
                        "src": "10421:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 604,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10421:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 607,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "10444:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 650,
                        "src": "10436:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 606,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10436:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 609,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "10461:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 650,
                        "src": "10453:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 608,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10453:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10420:47:1"
                  },
                  "returnParameters": {
                    "id": 611,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10485:0:1"
                  },
                  "scope": 651,
                  "src": "10396:476:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 652,
              "src": "1106:9768:1",
              "usedErrors": [
                11,
                16,
                21,
                30,
                35,
                40
              ],
              "usedEvents": [
                663,
                672
              ]
            }
          ],
          "src": "105:10770:1"
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "id": 2,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
          "exportedSymbols": {
            "IERC20": [
              729
            ]
          },
          "id": 730,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 653,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "106:24:2"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC20",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 654,
                "nodeType": "StructuredDocumentation",
                "src": "132:71:2",
                "text": " @dev Interface of the ERC-20 standard as defined in the ERC."
              },
              "fullyImplemented": false,
              "id": 729,
              "linearizedBaseContracts": [
                729
              ],
              "name": "IERC20",
              "nameLocation": "214:6:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 655,
                    "nodeType": "StructuredDocumentation",
                    "src": "227:158:2",
                    "text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
                  },
                  "eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                  "id": 663,
                  "name": "Transfer",
                  "nameLocation": "396:8:2",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 662,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 657,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "421:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 663,
                        "src": "405:20:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 656,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "405:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 659,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "443:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 663,
                        "src": "427:18:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 658,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "427:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 661,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "455:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 663,
                        "src": "447:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 660,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "447:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "404:57:2"
                  },
                  "src": "390:72:2"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 664,
                    "nodeType": "StructuredDocumentation",
                    "src": "468:148:2",
                    "text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
                  },
                  "eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
                  "id": 672,
                  "name": "Approval",
                  "nameLocation": "627:8:2",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 671,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 666,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "652:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 672,
                        "src": "636:21:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 665,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "636:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 668,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "675:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 672,
                        "src": "659:23:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 667,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "659:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 670,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "692:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 672,
                        "src": "684:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 669,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "684:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "635:63:2"
                  },
                  "src": "621:78:2"
                },
                {
                  "documentation": {
                    "id": 673,
                    "nodeType": "StructuredDocumentation",
                    "src": "705:65:2",
                    "text": " @dev Returns the value of tokens in existence."
                  },
                  "functionSelector": "18160ddd",
                  "id": 678,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "784:11:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 674,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "795:2:2"
                  },
                  "returnParameters": {
                    "id": 677,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 676,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 678,
                        "src": "821:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 675,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "821:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "820:9:2"
                  },
                  "scope": 729,
                  "src": "775:55:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 679,
                    "nodeType": "StructuredDocumentation",
                    "src": "836:71:2",
                    "text": " @dev Returns the value of tokens owned by `account`."
                  },
                  "functionSelector": "70a08231",
                  "id": 686,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "921:9:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 682,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 681,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "939:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 686,
                        "src": "931:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 680,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "931:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "930:17:2"
                  },
                  "returnParameters": {
                    "id": 685,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 684,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 686,
                        "src": "971:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 683,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "971:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "970:9:2"
                  },
                  "scope": 729,
                  "src": "912:68:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 687,
                    "nodeType": "StructuredDocumentation",
                    "src": "986:213:2",
                    "text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "a9059cbb",
                  "id": 696,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "1213:8:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 692,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 689,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "1230:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 696,
                        "src": "1222:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 688,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1222:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 691,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1242:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 696,
                        "src": "1234:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 690,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1234:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1221:27:2"
                  },
                  "returnParameters": {
                    "id": 695,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 694,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 696,
                        "src": "1267:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 693,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1267:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1266:6:2"
                  },
                  "scope": 729,
                  "src": "1204:69:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 697,
                    "nodeType": "StructuredDocumentation",
                    "src": "1279:264:2",
                    "text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
                  },
                  "functionSelector": "dd62ed3e",
                  "id": 706,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nameLocation": "1557:9:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 702,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 699,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1575:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 706,
                        "src": "1567:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 698,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1567:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 701,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "1590:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 706,
                        "src": "1582:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 700,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1582:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1566:32:2"
                  },
                  "returnParameters": {
                    "id": 705,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 704,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 706,
                        "src": "1622:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 703,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1622:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1621:9:2"
                  },
                  "scope": 729,
                  "src": "1548:83:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 707,
                    "nodeType": "StructuredDocumentation",
                    "src": "1637:667:2",
                    "text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 716,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "2318:7:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 712,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 709,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2334:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 716,
                        "src": "2326:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 708,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2326:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 711,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "2351:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 716,
                        "src": "2343:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 710,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2343:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2325:32:2"
                  },
                  "returnParameters": {
                    "id": 715,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 714,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 716,
                        "src": "2376:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 713,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2376:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2375:6:2"
                  },
                  "scope": 729,
                  "src": "2309:73:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 717,
                    "nodeType": "StructuredDocumentation",
                    "src": "2388:297:2",
                    "text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "23b872dd",
                  "id": 728,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "2699:12:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 724,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 719,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "2720:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "2712:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 718,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2712:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 721,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2734:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "2726:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 720,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2726:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 723,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "2746:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "2738:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 722,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2738:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2711:41:2"
                  },
                  "returnParameters": {
                    "id": 727,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 726,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "2771:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 725,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2771:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2770:6:2"
                  },
                  "scope": 729,
                  "src": "2690:87:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 730,
              "src": "204:2575:2",
              "usedErrors": [],
              "usedEvents": [
                663,
                672
              ]
            }
          ],
          "src": "106:2674:2"
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "id": 3,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
          "exportedSymbols": {
            "IERC20": [
              729
            ],
            "IERC20Metadata": [
              755
            ]
          },
          "id": 756,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 731,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "125:24:3"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
              "file": "../IERC20.sol",
              "id": 733,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 756,
              "sourceUnit": 730,
              "src": "151:37:3",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 732,
                    "name": "IERC20",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 729,
                    "src": "159:6:3",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 735,
                    "name": "IERC20",
                    "nameLocations": [
                      "306:6:3"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 729,
                    "src": "306:6:3"
                  },
                  "id": 736,
                  "nodeType": "InheritanceSpecifier",
                  "src": "306:6:3"
                }
              ],
              "canonicalName": "IERC20Metadata",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 734,
                "nodeType": "StructuredDocumentation",
                "src": "190:87:3",
                "text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
              },
              "fullyImplemented": false,
              "id": 755,
              "linearizedBaseContracts": [
                755,
                729
              ],
              "name": "IERC20Metadata",
              "nameLocation": "288:14:3",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 737,
                    "nodeType": "StructuredDocumentation",
                    "src": "319:54:3",
                    "text": " @dev Returns the name of the token."
                  },
                  "functionSelector": "06fdde03",
                  "id": 742,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "name",
                  "nameLocation": "387:4:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 738,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "391:2:3"
                  },
                  "returnParameters": {
                    "id": 741,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 740,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 742,
                        "src": "417:13:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 739,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "417:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "416:15:3"
                  },
                  "scope": 755,
                  "src": "378:54:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 743,
                    "nodeType": "StructuredDocumentation",
                    "src": "438:56:3",
                    "text": " @dev Returns the symbol of the token."
                  },
                  "functionSelector": "95d89b41",
                  "id": 748,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "symbol",
                  "nameLocation": "508:6:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 744,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "514:2:3"
                  },
                  "returnParameters": {
                    "id": 747,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 746,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 748,
                        "src": "540:13:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 745,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "540:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "539:15:3"
                  },
                  "scope": 755,
                  "src": "499:56:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 749,
                    "nodeType": "StructuredDocumentation",
                    "src": "561:65:3",
                    "text": " @dev Returns the decimals places of the token."
                  },
                  "functionSelector": "313ce567",
                  "id": 754,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "decimals",
                  "nameLocation": "640:8:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 750,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "648:2:3"
                  },
                  "returnParameters": {
                    "id": 753,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 752,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 754,
                        "src": "674:5:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 751,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "674:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "673:7:3"
                  },
                  "scope": 755,
                  "src": "631:50:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 756,
              "src": "278:405:3",
              "usedErrors": [],
              "usedEvents": [
                663,
                672
              ]
            }
          ],
          "src": "125:559:3"
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "id": 4,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
          "exportedSymbols": {
            "Context": [
              785
            ]
          },
          "id": 786,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 757,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "101:24:4"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "canonicalName": "Context",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 758,
                "nodeType": "StructuredDocumentation",
                "src": "127:496:4",
                "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
              },
              "fullyImplemented": true,
              "id": 785,
              "linearizedBaseContracts": [
                785
              ],
              "name": "Context",
              "nameLocation": "642:7:4",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 766,
                    "nodeType": "Block",
                    "src": "718:34:4",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 763,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "735:3:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 764,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "739:6:4",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "735:10:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 762,
                        "id": 765,
                        "nodeType": "Return",
                        "src": "728:17:4"
                      }
                    ]
                  },
                  "id": 767,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "665:10:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 759,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "675:2:4"
                  },
                  "returnParameters": {
                    "id": 762,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 761,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 767,
                        "src": "709:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 760,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "709:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "708:9:4"
                  },
                  "scope": 785,
                  "src": "656:96:4",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 775,
                    "nodeType": "Block",
                    "src": "825:32:4",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 772,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "842:3:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 773,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "846:4:4",
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "src": "842:8:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 771,
                        "id": 774,
                        "nodeType": "Return",
                        "src": "835:15:4"
                      }
                    ]
                  },
                  "id": 776,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "767:8:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 768,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "775:2:4"
                  },
                  "returnParameters": {
                    "id": 771,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 770,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 776,
                        "src": "809:14:4",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 769,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "809:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "808:16:4"
                  },
                  "scope": 785,
                  "src": "758:99:4",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 783,
                    "nodeType": "Block",
                    "src": "935:25:4",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "30",
                          "id": 781,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "952:1:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 780,
                        "id": 782,
                        "nodeType": "Return",
                        "src": "945:8:4"
                      }
                    ]
                  },
                  "id": 784,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_contextSuffixLength",
                  "nameLocation": "872:20:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 777,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "892:2:4"
                  },
                  "returnParameters": {
                    "id": 780,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 779,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 784,
                        "src": "926:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 778,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "926:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "925:9:4"
                  },
                  "scope": 785,
                  "src": "863:97:4",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 786,
              "src": "624:338:4",
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "src": "101:862:4"
        }
      },
      "contracts/MintableERC20.sol": {
        "id": 5,
        "ast": {
          "absolutePath": "contracts/MintableERC20.sol",
          "exportedSymbols": {
            "Context": [
              785
            ],
            "ERC20": [
              651
            ],
            "IERC20": [
              729
            ],
            "IERC20Errors": [
              41
            ],
            "IERC20Metadata": [
              755
            ],
            "MintableERC20": [
              926
            ]
          },
          "id": 927,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 787,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".28"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:5"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
              "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
              "id": 788,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 927,
              "sourceUnit": 652,
              "src": "58:55:5",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 789,
                    "name": "ERC20",
                    "nameLocations": [
                      "141:5:5"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 651,
                    "src": "141:5:5"
                  },
                  "id": 790,
                  "nodeType": "InheritanceSpecifier",
                  "src": "141:5:5"
                }
              ],
              "canonicalName": "MintableERC20",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 926,
              "linearizedBaseContracts": [
                926,
                651,
                41,
                755,
                729,
                785
              ],
              "name": "MintableERC20",
              "nameLocation": "124:13:5",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "6aa71d18",
                  "id": 794,
                  "mutability": "mutable",
                  "name": "lastMintTime",
                  "nameLocation": "202:12:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 926,
                  "src": "170:44:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 793,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 791,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "178:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "170:24:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 792,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "189:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 796,
                  "mutability": "mutable",
                  "name": "interval",
                  "nameLocation": "233:8:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 926,
                  "src": "220:21:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 795,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "220:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "functionSelector": "8da5cb5b",
                  "id": 798,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "262:5:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 926,
                  "src": "247:20:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 797,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "247:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 824,
                    "nodeType": "Block",
                    "src": "374:114:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 810,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "390:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 811,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "394:6:5",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "390:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "313030303030303030303030303030303030303030303030",
                              "id": 812,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "402:24:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100000000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000000"
                              },
                              "value": "100000000000000000000000"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_rational_100000000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000000"
                              }
                            ],
                            "id": 809,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 491,
                            "src": "384:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 813,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "384:43:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 814,
                        "nodeType": "ExpressionStatement",
                        "src": "384:43:5"
                      },
                      {
                        "expression": {
                          "id": 818,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 815,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 798,
                            "src": "438:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 816,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "446:3:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 817,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "450:6:5",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "446:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "438:18:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 819,
                        "nodeType": "ExpressionStatement",
                        "src": "438:18:5"
                      },
                      {
                        "expression": {
                          "id": 822,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 820,
                            "name": "interval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 796,
                            "src": "466:8:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "33363030",
                            "id": 821,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "477:4:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3600_by_1",
                              "typeString": "int_const 3600"
                            },
                            "value": "3600"
                          },
                          "src": "466:15:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 823,
                        "nodeType": "ExpressionStatement",
                        "src": "466:15:5"
                      }
                    ]
                  },
                  "id": 825,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 805,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 800,
                          "src": "358:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        {
                          "id": 806,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 802,
                          "src": "365:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "id": 807,
                      "kind": "baseConstructorSpecifier",
                      "modifierName": {
                        "id": 804,
                        "name": "ERC20",
                        "nameLocations": [
                          "352:5:5"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 651,
                        "src": "352:5:5"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "352:21:5"
                    }
                  ],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 803,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 800,
                        "mutability": "mutable",
                        "name": "_name",
                        "nameLocation": "309:5:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 825,
                        "src": "295:19:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 799,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "295:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 802,
                        "mutability": "mutable",
                        "name": "_symbol",
                        "nameLocation": "338:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 825,
                        "src": "324:21:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 801,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "324:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "285:66:5"
                  },
                  "returnParameters": {
                    "id": 808,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "374:0:5"
                  },
                  "scope": 926,
                  "src": "274:214:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 862,
                    "nodeType": "Block",
                    "src": "522:306:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 844,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 834,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "baseExpression": {
                                    "id": 829,
                                    "name": "lastMintTime",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 794,
                                    "src": "553:12:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 832,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 830,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "566:3:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 831,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "570:6:5",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "566:10:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "553:24:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 833,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "581:1:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "553:29:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 843,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 835,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967292,
                                    "src": "602:5:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 836,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "608:9:5",
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "602:15:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 842,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "baseExpression": {
                                      "id": 837,
                                      "name": "lastMintTime",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 794,
                                      "src": "620:12:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                        "typeString": "mapping(address => uint256)"
                                      }
                                    },
                                    "id": 840,
                                    "indexExpression": {
                                      "expression": {
                                        "id": 838,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4294967281,
                                        "src": "633:3:5",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 839,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "637:6:5",
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "633:10:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "620:24:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "id": 841,
                                    "name": "interval",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 796,
                                    "src": "647:8:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "620:35:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "602:53:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "553:102:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "596f75206e65656420746f207761697420616e20686f7572206265747765656e206d696e7473",
                              "id": 845,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "669:40:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_22b188f3c154fd21f132dd6187819a8549f822533761a9bc0591bd47e122f9f6",
                                "typeString": "literal_string \"You need to wait an hour between mints\""
                              },
                              "value": "You need to wait an hour between mints"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_22b188f3c154fd21f132dd6187819a8549f822533761a9bc0591bd47e122f9f6",
                                "typeString": "literal_string \"You need to wait an hour between mints\""
                              }
                            ],
                            "id": 828,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "532:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 846,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "532:187:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 847,
                        "nodeType": "ExpressionStatement",
                        "src": "532:187:5"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 849,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "735:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 850,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "739:6:5",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "735:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "313030303030303030303030303030303030303030",
                              "id": 851,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "747:21:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000"
                              },
                              "value": "100000000000000000000"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_rational_100000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000"
                              }
                            ],
                            "id": 848,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 491,
                            "src": "729:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 852,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "729:40:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 853,
                        "nodeType": "ExpressionStatement",
                        "src": "729:40:5"
                      },
                      {
                        "expression": {
                          "id": 860,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 854,
                              "name": "lastMintTime",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 794,
                              "src": "779:12:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 857,
                            "indexExpression": {
                              "expression": {
                                "id": 855,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "792:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 856,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "796:6:5",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "792:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "779:24:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 858,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967292,
                              "src": "806:5:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 859,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "812:9:5",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "806:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "779:42:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 861,
                        "nodeType": "ExpressionStatement",
                        "src": "779:42:5"
                      }
                    ]
                  },
                  "functionSelector": "2004ffd9",
                  "id": 863,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mintToken",
                  "nameLocation": "503:9:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 826,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "512:2:5"
                  },
                  "returnParameters": {
                    "id": 827,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "522:0:5"
                  },
                  "scope": 926,
                  "src": "494:334:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 877,
                    "nodeType": "Block",
                    "src": "904:40:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 873,
                              "name": "_target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 865,
                              "src": "920:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 874,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 867,
                              "src": "929:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 872,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 491,
                            "src": "914:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 875,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "914:23:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 876,
                        "nodeType": "ExpressionStatement",
                        "src": "914:23:5"
                      }
                    ]
                  },
                  "functionSelector": "484b973c",
                  "id": 878,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 870,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 869,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "894:9:5"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 925,
                        "src": "894:9:5"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "894:9:5"
                    }
                  ],
                  "name": "ownerMint",
                  "nameLocation": "843:9:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 868,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 865,
                        "mutability": "mutable",
                        "name": "_target",
                        "nameLocation": "861:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 878,
                        "src": "853:15:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 864,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "853:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 867,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "878:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 878,
                        "src": "870:15:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 866,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "870:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "852:34:5"
                  },
                  "returnParameters": {
                    "id": 871,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "904:0:5"
                  },
                  "scope": 926,
                  "src": "834:110:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 900,
                    "nodeType": "Block",
                    "src": "1012:130:5",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 898,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 889,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "id": 885,
                                "name": "lastMintTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 794,
                                "src": "1041:12:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 887,
                              "indexExpression": {
                                "id": 886,
                                "name": "_address",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 880,
                                "src": "1054:8:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1041:22:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 888,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1067:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "1041:27:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 897,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 890,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967292,
                                "src": "1084:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 891,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1090:9:5",
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "1084:15:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 896,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 892,
                                  "name": "lastMintTime",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 794,
                                  "src": "1102:12:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 894,
                                "indexExpression": {
                                  "id": 893,
                                  "name": "_address",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 880,
                                  "src": "1115:8:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1102:22:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "id": 895,
                                "name": "interval",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 796,
                                "src": "1127:8:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1102:33:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "1084:51:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "1041:94:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 884,
                        "id": 899,
                        "nodeType": "Return",
                        "src": "1022:113:5"
                      }
                    ]
                  },
                  "functionSelector": "c2ba4744",
                  "id": 901,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "canMint",
                  "nameLocation": "959:7:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 881,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 880,
                        "mutability": "mutable",
                        "name": "_address",
                        "nameLocation": "975:8:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 901,
                        "src": "967:16:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 879,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "967:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "966:18:5"
                  },
                  "returnParameters": {
                    "id": 884,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 883,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 901,
                        "src": "1006:4:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 882,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1006:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1005:6:5"
                  },
                  "scope": 926,
                  "src": "950:192:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 912,
                    "nodeType": "Block",
                    "src": "1205:40:5",
                    "statements": [
                      {
                        "expression": {
                          "id": 910,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 908,
                            "name": "interval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 796,
                            "src": "1215:8:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 909,
                            "name": "_newInterval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 903,
                            "src": "1226:12:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1215:23:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 911,
                        "nodeType": "ExpressionStatement",
                        "src": "1215:23:5"
                      }
                    ]
                  },
                  "functionSelector": "22a90082",
                  "id": 913,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 906,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 905,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "1195:9:5"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 925,
                        "src": "1195:9:5"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1195:9:5"
                    }
                  ],
                  "name": "setInterval",
                  "nameLocation": "1157:11:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 904,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 903,
                        "mutability": "mutable",
                        "name": "_newInterval",
                        "nameLocation": "1174:12:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 913,
                        "src": "1169:17:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 902,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1169:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1168:19:5"
                  },
                  "returnParameters": {
                    "id": 907,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1205:0:5"
                  },
                  "scope": 926,
                  "src": "1148:97:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 924,
                    "nodeType": "Block",
                    "src": "1272:69:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 919,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 916,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "1290:3:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 917,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1294:6:5",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "1290:10:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 918,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 798,
                                "src": "1304:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1290:19:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f74206f776e6572",
                              "id": 920,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1311:11:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682",
                                "typeString": "literal_string \"Not owner\""
                              },
                              "value": "Not owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682",
                                "typeString": "literal_string \"Not owner\""
                              }
                            ],
                            "id": 915,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1282:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 921,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1282:41:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 922,
                        "nodeType": "ExpressionStatement",
                        "src": "1282:41:5"
                      },
                      {
                        "id": 923,
                        "nodeType": "PlaceholderStatement",
                        "src": "1333:1:5"
                      }
                    ]
                  },
                  "id": 925,
                  "name": "onlyOwner",
                  "nameLocation": "1260:9:5",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 914,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1269:2:5"
                  },
                  "src": "1251:90:5",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 927,
              "src": "115:1228:5",
              "usedErrors": [
                11,
                16,
                21,
                30,
                35,
                40
              ],
              "usedEvents": [
                663,
                672
              ]
            }
          ],
          "src": "32:1312:5"
        }
      }
    },
    "contracts": {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
        "IERC1155Errors": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ERC1155InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC1155InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "idsLength",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "valuesLength",
                  "type": "uint256"
                }
              ],
              "name": "ERC1155InvalidArrayLength",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "ERC1155InvalidOperator",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC1155InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC1155InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "ERC1155MissingApprovalForAll",
              "type": "error"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        },
        "IERC20Errors": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allowance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientAllowance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSpender",
              "type": "error"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        },
        "IERC721Errors": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "ERC721IncorrectOwner",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ERC721InsufficientApproval",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidOperator",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidOwner",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ERC721NonexistentToken",
              "type": "error"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "ERC20": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allowance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientAllowance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSpender",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decimals()": "313ce567",
              "name()": "06fdde03",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "IERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "IERC20Metadata": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decimals()": "313ce567",
              "name()": "06fdde03",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "Context": {
          "abi": [],
          "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        }
      },
      "contracts/MintableERC20.sol": {
        "MintableERC20": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "_name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "_symbol",
                  "type": "string"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allowance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientAllowance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSpender",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "canMint",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "lastMintTime",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "mintToken",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_target",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "ownerMint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_newInterval",
                  "type": "uint256"
                }
              ],
              "name": "setInterval",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInterval\",\"type\":\"uint256\"}],\"name\":\"setInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintableERC20.sol\":\"MintableERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"contracts/MintableERC20.sol\":{\"keccak256\":\"0x6494c33f65519ae6e8959f36a8070a79db80e6d56785e5dfaf3dbded8545bc50\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://890e69d78202ba32620eda480c8d4bdeac6602202e67df6a9ebb0e28370246e2\",\"dweb:/ipfs/QmfKknxmEcKsuestSk4UFz9g7RuuuVqrWUWriaoRZSy4np\"]}},\"version\":1}",
            "solc_version": "0.8.30+commit.73712a01.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 248/65840 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 7818\n// Code size = 27370 bytes\n\n      : @0 (gas: 1)\n     0: jump @14 if a0 == a1\n      : @1 (gas: 9)\n     3: a3 = a1 << 0x20\n     6: a3 = a3 >> 0x20\n     9: a4 = a0 << 0x20\n    12: a4 = a4 >> 0x20\n    15: a4 = a4 + a2\n    18: a3 = a3 - a4\n    21: a4 = a2 << 0x1\n    24: a4 = -a4\n    26: jump @7 if a4 >=u a3\n      : @2 (gas: 1)\n    29: jump @11 if a0 >=u a1\n      : @3 (gas: 1)\n    32: jump @14 if a2 == 0\n      : @4 (gas: 3)\n    35: a2 = a2 + a0\n    38: a3 = a0\n    40: fallthrough\n      : @5 (gas: 6)\n    41: a4 = u8 [a1]\n    43: a1 = a1 + 0x1\n    46: a5 = a3 + 0x1\n    49: u8 [a3] = a4\n    51: a3 = a5\n    53: jump @5 if a5 != a2\n      : @6 (gas: 1)\n    56: jump @14\n      : @7 (gas: 1)\n    58: jump @14 if a2 == 0\n      : @8 (gas: 3)\n    61: a2 = a2 + a0\n    64: a3 = a0\n    66: fallthrough\n      : @9 (gas: 6)\n    67: a4 = u8 [a1]\n    69: a1 = a1 + 0x1\n    72: a5 = a3 + 0x1\n    75: u8 [a3] = a4\n    77: a3 = a5\n    79: jump @9 if a5 != a2\n      : @10 (gas: 1)\n    82: jump @14\n      : @11 (gas: 1)\n    84: jump @14 if a2 == 0\n      : @12 (gas: 2)\n    87: i32 a3 = a2 + 0xffffffffffffffff\n    90: fallthrough\n      : @13 (gas: 7)\n    91: a4 = a1 + a3\n    94: a4 = u8 [a4]\n    96: a2 = a2 + 0xffffffffffffffff\n    99: a5 = a0 + a3\n   102: u8 [a5] = a4\n   104: i32 a3 = a3 + 0xffffffffffffffff\n   107: jump @13 if a2 != 0\n      : @14 (gas: 1)\n   110: ret\n      : @15 (gas: 2)\n   112: a1 = i32 [0x20100]\n   117: jump @241 if a1 == 0\n      : @16 (gas: 4)\n   121: a0 = 0x30130\n   126: i32 a0 = a0 + 0\n   128: ecalli 9 // 'set_immutable_data'\n   130: jump @241\n      : @17 (gas: 8)\n   133: sp = sp + 0xfffffffffffffff0\n   136: u64 [sp + 0x8] = ra\n   139: u64 [sp] = s0\n   141: a2 = a1\n   143: s0 = a0\n   145: a1 = 0x20\n   148: a0 = a2\n   150: ra = 2, jump @26\n      : @18 [@dyn 1] (gas: 100)\n   155: a1 = u8 [a0 + 0x1]\n   158: a2 = u8 [a0]\n   160: a3 = u8 [a0 + 0x2]\n   163: a4 = u8 [a0 + 0x3]\n   166: a1 = a1 << 0x8\n   169: a1 = a1 | a2\n   172: a3 = a3 << 0x10\n   175: a4 = a4 << 0x18\n   178: a3 = a3 | a4\n   181: a1 = a1 | a3\n   184: a2 = u8 [a0 + 0x5]\n   187: a3 = u8 [a0 + 0x4]\n   190: a4 = u8 [a0 + 0x6]\n   193: a5 = u8 [a0 + 0x7]\n   196: a2 = a2 << 0x8\n   199: a2 = a2 | a3\n   202: a4 = a4 << 0x10\n   205: a5 = a5 << 0x18\n   208: a4 = a4 | a5\n   211: a2 = a2 | a4\n   214: a2 = a2 << 0x20\n   217: t0 = a2 | a1\n   220: a2 = u8 [a0 + 0x9]\n   223: a3 = u8 [a0 + 0x8]\n   226: a4 = u8 [a0 + 0xa]\n   229: a5 = u8 [a0 + 0xb]\n   232: a2 = a2 << 0x8\n   235: a2 = a2 | a3\n   238: a4 = a4 << 0x10\n   241: a5 = a5 << 0x18\n   244: a4 = a4 | a5\n   247: a2 = a2 | a4\n   250: a3 = u8 [a0 + 0xd]\n   253: a4 = u8 [a0 + 0xc]\n   256: a5 = u8 [a0 + 0xe]\n   259: a1 = u8 [a0 + 0xf]\n   262: a3 = a3 << 0x8\n   265: a3 = a3 | a4\n   268: a5 = a5 << 0x10\n   271: a1 = a1 << 0x18\n   274: a1 = a1 | a5\n   277: a1 = a1 | a3\n   280: a1 = a1 << 0x20\n   283: t1 = a1 | a2\n   286: a1 = u8 [a0 + 0x11]\n   289: a3 = u8 [a0 + 0x10]\n   292: a4 = u8 [a0 + 0x12]\n   295: a5 = u8 [a0 + 0x13]\n   298: a1 = a1 << 0x8\n   301: a1 = a1 | a3\n   304: a4 = a4 << 0x10\n   307: a5 = a5 << 0x18\n   310: a4 = a4 | a5\n   313: a1 = a1 | a4\n   316: a3 = u8 [a0 + 0x15]\n   319: a4 = u8 [a0 + 0x14]\n   322: a5 = u8 [a0 + 0x16]\n   325: a2 = u8 [a0 + 0x17]\n   328: a3 = a3 << 0x8\n   331: a3 = a3 | a4\n   334: a5 = a5 << 0x10\n   337: a2 = a2 << 0x18\n   340: a2 = a2 | a5\n   343: a2 = a2 | a3\n   346: a2 = a2 << 0x20\n   349: a3 = a2 | a1\n   352: a1 = u8 [a0 + 0x19]\n   355: a2 = u8 [a0 + 0x18]\n   358: a4 = u8 [a0 + 0x1a]\n   361: a5 = u8 [a0 + 0x1b]\n   364: a1 = a1 << 0x8\n   367: a1 = a1 | a2\n   370: a4 = a4 << 0x10\n   373: a5 = a5 << 0x18\n   376: a4 = a4 | a5\n   379: a1 = a1 | a4\n   382: a2 = u8 [a0 + 0x1d]\n   385: a4 = u8 [a0 + 0x1c]\n   388: a5 = u8 [a0 + 0x1e]\n   391: a0 = u8 [a0 + 0x1f]\n   394: a2 = a2 << 0x8\n   397: a2 = a2 | a4\n   400: a5 = a5 << 0x10\n   403: a0 = a0 << 0x18\n   406: a0 = a0 | a5\n   409: a0 = a0 | a2\n   412: a0 = a0 << 0x20\n   415: a0 = a0 | a1\n   418: a0 = reverse a0\n   420: a1 = reverse a3\n   422: a2 = reverse t1\n   424: a3 = reverse t0\n   426: u64 [s0 + 0x18] = a3\n   429: u64 [s0 + 0x10] = a2\n   432: u64 [s0 + 0x8] = a1\n   435: u64 [s0] = a0\n   437: ra = u64 [sp + 0x8]\n   440: s0 = u64 [sp]\n   442: sp = sp + 0x10\n   445: ret\n      : @19 (gas: 12)\n   447: sp = sp + 0xffffffffffffffd8\n   450: u64 [sp + 0x20] = ra\n   453: u64 [sp + 0x18] = s0\n   456: u64 [sp + 0x10] = s1\n   459: a2 = u64 [a1]\n   461: u64 [sp + 0x8] = a2\n   464: a2 = u64 [a1 + 0x8]\n   467: u64 [sp] = a2\n   469: s0 = u64 [a1 + 0x10]\n   472: s1 = u64 [a1 + 0x18]\n   475: a1 = 0x20\n   478: ra = 4, jump @26\n      : @20 [@dyn 2] (gas: 71)\n   483: a1 = reverse s1\n   485: a2 = reverse s0\n   487: a3 = u64 [sp]\n   489: a3 = reverse a3\n   491: a4 = u64 [sp + 0x8]\n   494: a4 = reverse a4\n   496: u8 [a0 + 0x18] = a4\n   499: u8 [a0 + 0x10] = a3\n   502: u8 [a0 + 0x8] = a2\n   505: u8 [a0] = a1\n   507: a5 = a4 >> 0x38\n   510: u8 [a0 + 0x1f] = a5\n   513: a5 = a4 >> 0x30\n   516: u8 [a0 + 0x1e] = a5\n   519: a5 = a4 >> 0x28\n   522: u8 [a0 + 0x1d] = a5\n   525: a5 = a4 >> 0x20\n   528: u8 [a0 + 0x1c] = a5\n   531: a5 = a4 >> 0x18\n   534: u8 [a0 + 0x1b] = a5\n   537: a5 = a4 >> 0x10\n   540: u8 [a0 + 0x1a] = a5\n   543: a4 = a4 >> 0x8\n   546: u8 [a0 + 0x19] = a4\n   549: a4 = a3 >> 0x38\n   552: u8 [a0 + 0x17] = a4\n   555: a4 = a3 >> 0x30\n   558: u8 [a0 + 0x16] = a4\n   561: a4 = a3 >> 0x28\n   564: u8 [a0 + 0x15] = a4\n   567: a4 = a3 >> 0x20\n   570: u8 [a0 + 0x14] = a4\n   573: a4 = a3 >> 0x18\n   576: u8 [a0 + 0x13] = a4\n   579: a4 = a3 >> 0x10\n   582: u8 [a0 + 0x12] = a4\n   585: a3 = a3 >> 0x8\n   588: u8 [a0 + 0x11] = a3\n   591: a3 = a2 >> 0x38\n   594: u8 [a0 + 0xf] = a3\n   597: a3 = a2 >> 0x30\n   600: u8 [a0 + 0xe] = a3\n   603: a3 = a2 >> 0x28\n   606: u8 [a0 + 0xd] = a3\n   609: a3 = a2 >> 0x20\n   612: u8 [a0 + 0xc] = a3\n   615: a3 = a2 >> 0x18\n   618: u8 [a0 + 0xb] = a3\n   621: a3 = a2 >> 0x10\n   624: u8 [a0 + 0xa] = a3\n   627: a2 = a2 >> 0x8\n   630: u8 [a0 + 0x9] = a2\n   633: a2 = a1 >> 0x38\n   636: u8 [a0 + 0x7] = a2\n   639: a2 = a1 >> 0x30\n   642: u8 [a0 + 0x6] = a2\n   645: a2 = a1 >> 0x28\n   648: u8 [a0 + 0x5] = a2\n   651: a2 = a1 >> 0x20\n   654: u8 [a0 + 0x4] = a2\n   657: a2 = a1 >> 0x18\n   660: u8 [a0 + 0x3] = a2\n   663: a2 = a1 >> 0x10\n   666: u8 [a0 + 0x2] = a2\n   669: a1 = a1 >> 0x8\n   672: u8 [a0 + 0x1] = a1\n   675: ra = u64 [sp + 0x20]\n   678: s0 = u64 [sp + 0x18]\n   681: s1 = u64 [sp + 0x10]\n   684: sp = sp + 0x28\n   687: ret\n      : @21 (gas: 48)\n   689: sp = sp + 0xffffffffffffffa0\n   692: u64 [sp + 0x58] = ra\n   695: u64 [sp + 0x50] = s0\n   698: u64 [sp + 0x48] = s1\n   701: s0 = sp + 0x60\n   704: sp = sp & 0xffffffffffffffe0\n   707: s1 = a0\n   709: a0 = u64 [a1 + 0x18]\n   712: a2 = u64 [a1 + 0x10]\n   715: a3 = u64 [a1 + 0x8]\n   718: a1 = u64 [a1]\n   720: a0 = reverse a0\n   722: a2 = reverse a2\n   724: a3 = reverse a3\n   726: a1 = reverse a1\n   728: u64 [sp + 0x18] = a1\n   731: u64 [sp + 0x10] = a3\n   734: u64 [sp + 0x8] = a2\n   737: u64 [sp] = a0\n   739: u64 [sp + 56] = 0\n   742: u64 [sp + 48] = 0\n   745: u64 [sp + 40] = 0\n   748: u64 [sp + 32] = 0\n   751: u32 [sp + 64] = 0x20\n   755: i32 a1 = sp + 0\n   757: i32 a3 = sp + 0x20\n   760: i32 a4 = sp + 0x40\n   763: a2 = 0xffffffffffffffff\n   766: a0 = 0\n   768: ecalli 5 // 'get_storage'\n   770: a0 = u64 [sp + 0x38]\n   773: a1 = u64 [sp + 0x30]\n   776: a2 = u64 [sp + 0x28]\n   779: a3 = u64 [sp + 0x20]\n   782: a0 = reverse a0\n   784: a1 = reverse a1\n   786: a2 = reverse a2\n   788: a3 = reverse a3\n   790: u64 [s1 + 0x18] = a3\n   793: u64 [s1 + 0x10] = a2\n   796: u64 [s1 + 0x8] = a1\n   799: u64 [s1] = a0\n   801: sp = s0 + 0xffffffffffffffa0\n   804: ra = u64 [sp + 0x58]\n   807: s0 = u64 [sp + 0x50]\n   810: s1 = u64 [sp + 0x48]\n   813: sp = sp + 0x60\n   816: ret\n      : @22 (gas: 40)\n   818: sp = sp + 0xffffffffffffffa0\n   821: u64 [sp + 0x58] = ra\n   824: u64 [sp + 0x50] = s0\n   827: s0 = sp + 0x60\n   830: sp = sp & 0xffffffffffffffe0\n   833: t0 = u64 [a0]\n   835: a3 = u64 [a0 + 0x8]\n   838: a4 = u64 [a0 + 0x10]\n   841: a0 = u64 [a0 + 0x18]\n   844: t1 = u64 [a1]\n   846: a2 = u64 [a1 + 0x8]\n   849: a5 = u64 [a1 + 0x10]\n   852: a1 = u64 [a1 + 0x18]\n   855: t2 = reverse a0\n   857: a4 = reverse a4\n   859: a3 = reverse a3\n   861: a0 = reverse t0\n   863: t0 = reverse a1\n   865: a5 = reverse a5\n   867: a2 = reverse a2\n   869: a1 = reverse t1\n   871: u64 [sp + 0x18] = a0\n   874: u64 [sp + 0x10] = a3\n   877: u64 [sp + 0x8] = a4\n   880: u64 [sp] = t2\n   882: u64 [sp + 0x38] = a1\n   885: u64 [sp + 0x30] = a2\n   888: u64 [sp + 0x28] = a5\n   891: u64 [sp + 0x20] = t0\n   894: i32 a1 = sp + 0\n   896: i32 a3 = sp + 0x20\n   899: a2 = 0xffffffffffffffff\n   902: a4 = 0x20\n   905: a0 = 0\n   907: ecalli 10 // 'set_storage'\n   909: sp = s0 + 0xffffffffffffffa0\n   912: ra = u64 [sp + 0x58]\n   915: s0 = u64 [sp + 0x50]\n   918: sp = sp + 0x60\n   921: ret\n      : @23 (gas: 33)\n   923: sp = sp + 0xffffffffffffff20\n   927: u64 [sp + 0xd8] = ra\n   931: u64 [sp + 0xd0] = s0\n   935: u64 [sp + 0xc8] = s1\n   939: s0 = sp + 0xe0\n   943: sp = sp & 0xffffffffffffffe0\n   946: a5 = u64 [a4]\n   948: u64 [sp + 0x40] = a5\n   951: a5 = u64 [a4 + 0x8]\n   954: u64 [sp + 0x48] = a5\n   957: a5 = u64 [a4 + 0x10]\n   960: u64 [sp + 0x50] = a5\n   963: a4 = u64 [a4 + 0x18]\n   966: u64 [sp + 0x58] = a4\n   969: t0 = 0x6\n   972: a4 = u64 [a3]\n   974: u64 [sp + 0x18] = a4\n   977: a4 = u64 [a3 + 0x8]\n   980: u64 [sp + 0x20] = a4\n   983: a4 = u64 [a3 + 0x10]\n   986: u64 [sp + 0x28] = a4\n   989: a3 = u64 [a3 + 0x18]\n   992: u64 [sp + 0x30] = a3\n   995: s1 = u64 [a2]\n   997: a3 = u64 [a2 + 0x8]\n  1000: u64 [sp] = a3\n  1002: a3 = u64 [a2 + 0x10]\n  1005: u64 [sp + 0x8] = a3\n  1008: a2 = u64 [a2 + 0x18]\n  1011: u64 [sp + 0x10] = a2\n  1014: u64 [sp + 56] = 0x20\n  1018: ra = 0x8\n  1021: jump @26\n      : @24 [@dyn 3] (gas: 2)\n  1024: u64 [sp + 0x38] = a1\n  1027: ra = 8, jump @26\n      : @25 [@dyn 4] (gas: 46)\n  1032: a1 = reverse s1\n  1034: u64 [sp + 0x78] = a1\n  1037: a1 = u64 [sp]\n  1039: a1 = reverse a1\n  1041: u64 [sp + 0x70] = a1\n  1044: a1 = u64 [sp + 0x8]\n  1047: a1 = reverse a1\n  1049: u64 [sp + 0x68] = a1\n  1052: a1 = u64 [sp + 0x10]\n  1055: a1 = reverse a1\n  1057: u64 [sp + 0x60] = a1\n  1060: a1 = u64 [sp + 0x18]\n  1063: a1 = reverse a1\n  1065: u64 [sp + 0x98] = a1\n  1069: a1 = u64 [sp + 0x20]\n  1072: a1 = reverse a1\n  1074: u64 [sp + 0x90] = a1\n  1078: a1 = u64 [sp + 0x28]\n  1081: a1 = reverse a1\n  1083: u64 [sp + 0x88] = a1\n  1087: a1 = u64 [sp + 0x30]\n  1090: a1 = reverse a1\n  1092: u64 [sp + 0x80] = a1\n  1096: a1 = u64 [sp + 0x40]\n  1099: a1 = reverse a1\n  1101: u64 [sp + 0xb8] = a1\n  1105: a1 = u64 [sp + 0x48]\n  1108: a1 = reverse a1\n  1110: u64 [sp + 0xb0] = a1\n  1114: a1 = u64 [sp + 0x50]\n  1117: a1 = reverse a1\n  1119: u64 [sp + 0xa8] = a1\n  1123: a1 = u64 [sp + 0x58]\n  1126: a1 = reverse a1\n  1128: u64 [sp + 0xa0] = a1\n  1132: i32 a2 = a0 + 0\n  1134: a3 = i32 [sp + 0x38]\n  1137: i32 a0 = sp + 0x60\n  1140: a1 = 0x3\n  1143: ecalli 4 // 'deposit_event'\n  1145: sp = s0 + 0xffffffffffffff20\n  1149: ra = u64 [sp + 0xd8]\n  1153: s0 = u64 [sp + 0xd0]\n  1157: s1 = u64 [sp + 0xc8]\n  1161: sp = sp + 0xe0\n  1165: ret\n      : @26 (gas: 2)\n  1167: i32 a2 = a0 >> 0x10\n  1170: jump @31 if a2 != 0\n      : @27 (gas: 4)\n  1173: a1 = a1 + a0\n  1176: i32 a1 = a1 + 0x1f\n  1179: a1 = a1 & 0xffffffffffffffe0\n  1182: jump @31 if a1 >u 65536\n      : @28 (gas: 3)\n  1188: a2 = 0x200fc\n  1193: a3 = i32 [0x200fc]\n  1198: jump @30 if a3 >=u a1\n      : @29 (gas: 2)\n  1201: u32 [0x200fc] = a1\n  1206: fallthrough\n      : @30 (gas: 4)\n  1207: a1 = 0x20110\n  1212: i32 a0 = a0 + 0\n  1214: a0 = a0 + a1\n  1217: ret\n      : @31 (gas: 1)\n  1219: trap\n      : @32 (gas: 6)\n  1220: sp = sp + 0xfffffffffffffff0\n  1223: u64 [sp + 0x8] = ra\n  1226: u64 [sp] = s0\n  1228: s0 = a0 & 0x1\n  1231: ecalli 2 // 'call_data_size'\n  1233: fallthrough\n      : @33 (gas: 2)\n  1234: u32 [0x200f8] = a0\n  1239: jump @35 if s0 == 0\n      : @34 (gas: 1)\n  1242: ra = 10, jump @36\n      : @35 [@dyn 5] (gas: 18)\n  1246: ra = 0xc\n  1249: sp = sp + 0xfffffffffffffe10\n  1253: u64 [sp + 0x1e8] = ra\n  1257: u64 [sp + 0x1e0] = s0\n  1261: u64 [sp + 0x1d8] = s1\n  1265: s0 = sp + 0x1f0\n  1269: sp = sp + 0xffffffffffffe910\n  1273: sp = sp & 0xffffffffffffffe0\n  1276: s1 = sp\n  1278: a2 = s1 + 0x1070\n  1282: u64 [a2 + 744] = 0\n  1286: u64 [a2 + 736] = 0\n  1290: u64 [a2 + 720] = 0x80\n  1296: a0 = 0x40\n  1299: a1 = s1 + 0x1340\n  1303: u64 [a2 + 728] = 0\n  1307: ra = 0xee\n  1311: jump @19\n      : @36 [@dyn 6] (gas: 16)\n  1314: sp = sp + 0xfffffffffffff808\n  1318: a0 = sp + 0x700\n  1322: u64 [a0 + 0xf0] = ra\n  1326: u64 [a0 + 0xe8] = s0\n  1330: u64 [a0 + 0xe0] = s1\n  1334: s0 = sp + 0x7f8\n  1338: sp = sp + 0xfffffffffffffd98\n  1342: sp = sp & 0xffffffffffffffe0\n  1345: s1 = sp\n  1347: u64 [s1 + 1816] = 0\n  1351: u64 [s1 + 1808] = 0\n  1355: u64 [s1 + 1792] = 0x80\n  1361: a0 = 0x40\n  1364: a1 = s1 + 0x700\n  1368: u64 [s1 + 1800] = 0\n  1372: ra = 14, jump @19\n      : @37 [@dyn 7] (gas: 7)\n  1377: u64 [s1 + 1848] = 0\n  1381: u64 [s1 + 1840] = 0\n  1385: u64 [s1 + 1832] = 0\n  1389: u64 [s1 + 1824] = 0\n  1393: i32 a0 = s1 + 0x720\n  1397: ecalli 11 // 'value_transferred'\n  1399: fallthrough\n      : @38 (gas: 9)\n  1400: a4 = s1 + 0x700\n  1404: a0 = u64 [a4 + 0x30]\n  1407: a1 = u64 [a4 + 0x38]\n  1410: a2 = u64 [a4 + 0x28]\n  1413: a3 = u64 [a4 + 0x20]\n  1416: a1 = a1 | a2\n  1419: a0 = a0 | a3\n  1422: a0 = a0 | a1\n  1425: jump @40 if a0 == 0\n      : @39 (gas: 1)\n  1428: jump @199\n      : @40 (gas: 9)\n  1431: a2 = u32 [0x200f8]\n  1436: u64 [s1 + 1752] = 0\n  1440: u64 [s1 + 1744] = 0\n  1444: u64 [s1 + 1736] = 0\n  1448: a0 = s1 + 0x6e0\n  1452: a1 = s1 + 0x6c0\n  1456: u64 [s1 + 0x118] = a2\n  1460: u64 [s1 + 0x6c0] = a2\n  1464: ra = 16, jump @746\n      : @41 [@dyn 8] (gas: 17)\n  1469: a4 = s1 + 0x600\n  1473: a3 = u64 [a4 + 0xf8]\n  1477: a2 = u64 [a4 + 0xf0]\n  1481: a1 = u64 [a4 + 0xe8]\n  1485: a0 = u64 [a4 + 0xe0]\n  1489: a4 = s1 + 0x100\n  1493: u64 [a4 + 0x10] = a3\n  1496: u64 [a4] = a1\n  1498: a3 = a3 | a1\n  1501: a1 = a0 | a2\n  1504: a1 = a1 | a3\n  1507: a1 = a1 >> 0x20\n  1510: u64 [a4 + 0x8] = a2\n  1513: a2 = a2 | a3\n  1516: a2 = a2 << 0x20\n  1519: a1 = a1 | a2\n  1522: jump @43 if a1 == 0\n      : @42 (gas: 1)\n  1525: jump @198\n      : @43 (gas: 3)\n  1528: u64 [s1 + 0xf8] = a0\n  1532: a1 = u64 [s1 + 0x118]\n  1536: ra = 18, jump @26\n      : @44 [@dyn 9] (gas: 5)\n  1541: i32 a0 = a0 + 0\n  1543: a1 = i32 [s1 + 0x118]\n  1547: a2 = 0\n  1549: ecalli 0 // 'call_data_copy'\n  1550: fallthrough\n      : @45 (gas: 2)\n  1551: a1 = u64 [s1 + 0x118]\n  1555: jump @47 if a1 >u 63\n      : @46 (gas: 1)\n  1559: jump @200\n      : @47 (gas: 3)\n  1562: a0 = s1 + 0x6a0\n  1566: a1 = u64 [s1 + 0xf8]\n  1570: ra = 20, jump @17\n      : @48 [@dyn 10] (gas: 8)\n  1575: a0 = u64 [s1 + 0x6b8]\n  1579: t0 = u64 [s1 + 0x6b0]\n  1583: a4 = u64 [s1 + 0x6a8]\n  1587: u64 [s1 + 0xf0] = a0\n  1591: a2 = t0 | a0\n  1594: a3 = a4 <u 0x1\n  1597: a3 = 0 if a2 != 0\n  1599: jump @50 if a3 != 0\n      : @49 (gas: 1)\n  1602: jump @201\n      : @50 (gas: 50)\n  1605: a3 = u64 [s1 + 0x6a0]\n  1609: t1 = u64 [s1 + 0xf8]\n  1613: t2 = u64 [s1 + 0x118]\n  1617: t2 = t2 + t1\n  1620: a1 = t2 <u t1\n  1623: t1 = t1 + a3\n  1626: u64 [s1 + 0x118] = t1\n  1630: a3 = t1 <u a3\n  1633: a2 = u64 [s1 + 0x100]\n  1637: a0 = a4 + a2\n  1640: a5 = a2\n  1642: t1 = a0 + a3\n  1645: a2 = t1 ^ a4\n  1648: a4 = t1 <u a4\n  1651: a4 = a3 if a2 == 0\n  1654: a2 = a5\n  1656: a5 = a5 + a1\n  1659: a2 = a5 <u a2\n  1662: a2 = a1 if a1 == 0\n  1665: a1 = u64 [s1 + 0x108]\n  1669: a3 = t0 + a1\n  1672: ra = a3 <u t0\n  1675: a0 = u64 [s1 + 0x110]\n  1679: t0 = u64 [s1 + 0xf0]\n  1683: t0 = t0 + a0\n  1686: ra = ra + t0\n  1689: t0 = a1 + a2\n  1692: a4 = a4 + a3\n  1695: a2 = a4 <u a3\n  1698: a3 = ra + a2\n  1701: a1 = t0 <u a1\n  1704: a1 = a1 + a0\n  1707: u64 [s1 + 0xf0] = t2\n  1711: u64 [s1 + 0x640] = t2\n  1715: u64 [s1 + 0xe8] = a5\n  1719: u64 [s1 + 0x648] = a5\n  1723: a0 = u64 [s1 + 0x118]\n  1727: a5 = s1 + 0x600\n  1731: u64 [a5 + 0x60] = a0\n  1734: u64 [s1 + 0x118] = t0\n  1738: u64 [s1 + 0x650] = t0\n  1742: u64 [s1 + 0xe0] = a1\n  1746: u64 [a5 + 0x58] = a1\n  1749: u64 [s1 + 0x668] = t1\n  1753: u64 [a5 + 0x70] = a4\n  1756: a0 = s1 + 0x680\n  1760: a1 = s1 + 0x660\n  1764: a2 = s1 + 0x640\n  1768: u64 [a5 + 0x78] = a3\n  1771: ra = 22, jump @757\n      : @51 [@dyn 11] (gas: 11)\n  1776: a2 = u64 [s1 + 0xf8]\n  1780: a4 = s1 + 0x100\n  1784: a0 = u64 [a4 + 0x8]\n  1787: a1 = u64 [a4 + 0x10]\n  1790: a0 = a0 | a1\n  1793: a1 = 0xffffffe0\n  1803: a1 = a2 <u a1\n  1806: a3 = u64 [a4]\n  1808: a1 = 0 if a3 != 0\n  1810: a1 = 0 if a0 != 0\n  1812: jump @53 if a1 != 0\n      : @52 (gas: 1)\n  1815: jump @198\n      : @53 (gas: 11)\n  1818: a0 = u64 [s1 + 0x698]\n  1822: u64 [s1 + 0xa0] = a0\n  1826: a0 = u64 [s1 + 0x690]\n  1830: u64 [s1 + 0x98] = a0\n  1834: a0 = u64 [s1 + 0x688]\n  1838: u64 [s1 + 0xa8] = a0\n  1842: a0 = u64 [s1 + 0x680]\n  1846: u64 [s1 + 0xb0] = a0\n  1850: i32 a1 = a2 + 0x20\n  1853: a0 = s1 + 0x620\n  1857: ra = 24, jump @17\n      : @54 [@dyn 12] (gas: 7)\n  1862: t0 = u64 [s1 + 0x638]\n  1866: a1 = u64 [s1 + 0x630]\n  1870: a2 = u64 [s1 + 0x628]\n  1874: a3 = a1 | t0\n  1877: a4 = a2 <u 0x1\n  1880: a4 = 0 if a3 != 0\n  1882: jump @56 if a4 != 0\n      : @55 (gas: 1)\n  1885: jump @202\n      : @56 (gas: 36)\n  1888: a3 = u64 [s1 + 0x620]\n  1892: a4 = u64 [s1 + 0xf8]\n  1896: a4 = a4 + a3\n  1899: a3 = a4 <u a3\n  1902: a5 = u64 [s1 + 0x100]\n  1906: a5 = a5 + a2\n  1909: a5 = a5 + a3\n  1912: a0 = a5 ^ a2\n  1915: a2 = a5 <u a2\n  1918: a2 = a3 if a0 == 0\n  1921: a0 = u64 [s1 + 0x108]\n  1925: a0 = a0 + a1\n  1928: a2 = a2 + a0\n  1931: a3 = a2 <u a0\n  1934: a0 = a0 <u a1\n  1937: a1 = u64 [s1 + 0x110]\n  1941: t0 = t0 + a1\n  1944: a0 = a0 + t0\n  1947: a3 = a3 + a0\n  1950: a0 = u64 [s1 + 0xf0]\n  1954: u64 [s1 + 0x5c0] = a0\n  1958: a0 = u64 [s1 + 0xe8]\n  1962: u64 [s1 + 0x5c8] = a0\n  1966: u64 [s1 + 0x5e0] = a4\n  1970: a0 = u64 [s1 + 0x118]\n  1974: a4 = s1 + 0x500\n  1978: u64 [a4 + 0xd0] = a0\n  1982: a0 = u64 [s1 + 0xe0]\n  1986: u64 [a4 + 0xd8] = a0\n  1990: u64 [a4 + 0xe8] = a5\n  1994: u64 [a4 + 0xf0] = a2\n  1998: a0 = s1 + 0x600\n  2002: a1 = s1 + 0x5e0\n  2006: a2 = s1 + 0x5c0\n  2010: u64 [a4 + 0xf8] = a3\n  2014: ra = 26, jump @757\n      : @57 [@dyn 13] (gas: 12)\n  2019: a2 = u64 [s1 + 0x98]\n  2023: a4 = u64 [s1 + 0xb0]\n  2027: a0 = a4 | a2\n  2030: a1 = u64 [s1 + 0xa0]\n  2034: a3 = u64 [s1 + 0xa8]\n  2038: a1 = a1 | a3\n  2041: a0 = a0 | a1\n  2044: a0 = a0 >> 0x20\n  2047: a1 = a1 | a2\n  2050: a1 = a1 << 0x20\n  2053: a0 = a0 | a1\n  2056: jump @59 if a0 == 0\n      : @58 (gas: 1)\n  2059: jump @198\n      : @59 (gas: 12)\n  2062: a1 = a4\n  2064: a2 = s1 + 0x600\n  2068: a0 = u64 [a2 + 0x18]\n  2071: u64 [s1 + 0x78] = a0\n  2074: a0 = u64 [a2 + 0x10]\n  2077: u64 [s1 + 0x70] = a0\n  2080: a0 = u64 [a2 + 0x8]\n  2083: u64 [s1 + 0x80] = a0\n  2087: a0 = u64 [a2]\n  2089: u64 [s1 + 0x88] = a0\n  2093: a0 = s1 + 0x5a0\n  2097: ra = 28, jump @17\n      : @60 [@dyn 14] (gas: 17)\n  2102: a0 = s1 + 0x500\n  2106: a3 = u64 [a0 + 0xb8]\n  2110: a1 = u64 [a0 + 0xb0]\n  2114: a2 = u64 [a0 + 0xa8]\n  2118: a0 = a3 >u 0\n  2120: a4 = a1 >u 0\n  2122: a4 = a0 if a3 != 0\n  2125: u64 [s1 + 0xd0] = a2\n  2129: a0 = a2 >u 0\n  2131: u64 [s1 + 0x60] = a1\n  2134: u64 [s1 + 0xc8] = a3\n  2138: a1 = a1 | a3\n  2141: u64 [s1 + 0x58] = a0\n  2144: u64 [s1 + 0x90] = a4\n  2148: u64 [s1 + 0xc0] = a1\n  2152: a0 = a4 if a1 != 0\n  2155: jump @62 if a0 == 0\n      : @61 (gas: 1)\n  2158: jump @203\n      : @62 (gas: 9)\n  2161: a0 = u64 [s1 + 0x5a0]\n  2165: u64 [s1 + 0x68] = a0\n  2168: u64 [s1 + 1880] = 0\n  2172: u64 [s1 + 1872] = 0\n  2176: u64 [s1 + 1864] = 0\n  2180: u64 [s1 + 1856] = 0x3\n  2185: a0 = s1 + 0x580\n  2189: a1 = s1 + 0x740\n  2193: ra = 30, jump @21\n      : @63 [@dyn 15] (gas: 6)\n  2198: a4 = s1 + 0x500\n  2202: a0 = u64 [a4 + 0x90]\n  2206: a1 = u64 [a4 + 0x88]\n  2210: a2 = u64 [a4 + 0x80]\n  2214: a3 = u64 [a4 + 0x98]\n  2218: t0 = 32, jump @915\n      : @64 [@dyn 16] (gas: 12)\n  2223: t0 = a2 <u 0x1\n  2226: ra = a1 & 0x7f\n  2229: t2 = a5 & a0\n  2232: a4 = a5 & t1\n  2235: ra = a1 if a2 != 0\n  2238: a1 = ra <u 0x20\n  2241: a5 = a5 & a3\n  2244: a2 = a1\n  2246: a2 = 0 if a4 != 0\n  2248: a0 = t2 | a5\n  2251: a2 = 0 if a0 != 0\n  2253: jump @66 if t0 == a2\n      : @65 (gas: 1)\n  2256: jump @209\n      : @66 (gas: 1)\n  2259: t0 = 34, jump @921\n      : @67 [@dyn 17] (gas: 4)\n  2264: a0 = u64 [s1 + 0x68]\n  2267: a0 = a0 <u 0x20\n  2270: u64 [s1 + 0xb8] = a0\n  2274: jump @76 if a3 == 0\n      : @68 (gas: 11)\n  2278: u64 [s1 + 0xf0] = a4\n  2282: u64 [s1 + 0xf8] = ra\n  2286: u64 [s1 + 0x100] = a5\n  2290: u64 [s1 + 0x110] = t2\n  2294: u64 [s1 + 1400] = 0\n  2298: u64 [s1 + 1392] = 0\n  2302: u64 [s1 + 1384] = 0\n  2306: a1 = s1 + 0x560\n  2310: u64 [s1 + 1376] = 0x3\n  2315: a0 = 0\n  2317: ra = 36, jump @19\n      : @69 [@dyn 18] (gas: 2)\n  2322: a1 = i32 [0x200fc]\n  2327: jump @71 if a1 >u 31\n      : @70 (gas: 2)\n  2331: u32 [0x200fc] = 0x20\n  2337: fallthrough\n      : @71 (gas: 87)\n  2338: a0 = sp + 0xffffffffffffffe0\n  2341: a2 = a0 & 0xffffffffffffffe0\n  2344: u64 [s1 + 0x108] = a2\n  2348: sp = a2\n  2350: a0 = 0x20110\n  2355: i32 a0 = a0 + 0\n  2357: i32 a2 = a2 + 0\n  2359: a1 = 0x20\n  2362: ecalli 6 // 'hash_keccak_256'\n  2364: a0 = u64 [s1 + 0x68]\n  2367: a1 = a0 + 0x1f\n  2370: a0 = a1 <u a0\n  2373: a5 = u64 [s1 + 0xd0]\n  2377: a2 = a5 + a0\n  2380: a3 = a2 <u a5\n  2383: a3 = a0 if a0 == 0\n  2386: a4 = u64 [s1 + 0x60]\n  2389: a3 = a3 + a4\n  2392: u64 [s1 + 0xe8] = a3\n  2396: a3 = a3 << 0x3b\n  2399: a4 = a2 >> 0x5\n  2402: a4 = a4 | a3\n  2405: a0 = u64 [s1 + 0x108]\n  2409: t1 = u64 [a0 + 0x18]\n  2412: a2 = a2 << 0x3b\n  2415: a3 = u64 [a0 + 0x10]\n  2418: a1 = a1 >> 0x5\n  2421: a0 = a1 | a2\n  2424: t2 = reverse t1\n  2426: a2 = reverse a3\n  2428: a1 = u64 [s1 + 0xb8]\n  2432: a1 = 0 if a5 != 0\n  2434: a3 = u64 [s1 + 0xc0]\n  2438: a1 = 0 if a3 != 0\n  2440: a4 = 0 if a1 != 0\n  2442: a0 = 0 if a1 != 0\n  2444: t0 = t2 + a0\n  2447: a0 = t0 <u t2\n  2450: a5 = a2 + a0\n  2453: a4 = a4 + a5\n  2456: u64 [s1 + 0x118] = a4\n  2460: a5 = a4 ^ a2\n  2463: a3 = a4 <u a2\n  2466: a3 = a0 if a5 == 0\n  2469: u64 [s1 + 0xe0] = a3\n  2473: a0 = u64 [s1 + 0xf8]\n  2477: ra = a0 + 0x1f\n  2480: a4 = ra <u a0\n  2483: a3 = u64 [s1 + 0xf0]\n  2487: a0 = a3 + a4\n  2490: a5 = a0 <u a3\n  2493: a5 = a4 if a4 == 0\n  2496: t1 = u64 [s1 + 0x110]\n  2500: t1 = t1 + a5\n  2503: a4 = t1 << 0x3b\n  2506: a3 = a0 >> 0x5\n  2509: a3 = a3 | a4\n  2512: a0 = a0 << 0x3b\n  2515: a4 = ra >> 0x5\n  2518: a0 = a0 | a4\n  2521: a0 = a0 + t2\n  2524: u64 [s1 + 0xf8] = a0\n  2528: a0 = a0 <u t2\n  2531: t2 = t0\n  2533: a4 = a2 + a0\n  2536: a4 = a4 + a3\n  2539: a3 = a4 ^ a2\n  2542: u64 [s1 + 0xf0] = a4\n  2546: a2 = a4 <u a2\n  2549: a2 = a0 if a3 == 0\n  2552: a4 = u64 [s1 + 0xe8]\n  2556: a0 = u64 [s1 + 0x60]\n  2559: a0 = a4 <u a0\n  2562: a3 = u64 [s1 + 0xc8]\n  2566: a0 = a0 + a3\n  2569: a3 = a4 >> 0x5\n  2572: a4 = a0 << 0x3b\n  2575: a3 = a3 | a4\n  2578: a4 = u64 [s1 + 0x108]\n  2582: t0 = u64 [a4]\n  2584: a4 = u64 [a4 + 0x8]\n  2587: a0 = a0 >> 0x5\n  2590: a3 = 0 if a1 != 0\n  2592: a0 = 0 if a1 != 0\n  2594: a1 = reverse a4\n  2596: a4 = reverse t0\n  2598: t0 = 38, jump @938\n      : @72 [@dyn 19] (gas: 24)\n  2603: t0 = a0 + a3\n  2606: a0 = u64 [s1 + 0x110]\n  2610: a0 = t1 <u a0\n  2613: a3 = u64 [s1 + 0x100]\n  2617: a0 = a0 + a3\n  2620: a3 = t1 >> 0x5\n  2623: a5 = a0 << 0x3b\n  2626: a3 = a3 | a5\n  2629: a0 = a0 >> 0x5\n  2632: a0 = a0 + a4\n  2635: a4 = u64 [s1 + 0x118]\n  2639: a3 = a3 + a1\n  2642: a1 = a3 <u a1\n  2645: a0 = a0 + a1\n  2648: a2 = a2 + a3\n  2651: u64 [s1 + 0xe8] = a2\n  2655: a1 = a2 <u a3\n  2658: a0 = a0 + a1\n  2661: u64 [s1 + 0xe0] = a0\n  2665: a0 = sp + 0xffffffffffffffe0\n  2668: t1 = a0 & 0xffffffffffffffe0\n  2671: sp = t1\n  2673: u64 [s1 + 0xd8] = t1\n  2677: fallthrough\n      : @73 (gas: 20)\n  2678: a0 = u64 [s1 + 0xf8]\n  2682: a0 = t2 <u a0\n  2685: a2 = u64 [s1 + 0xf0]\n  2689: a1 = a4 ^ a2\n  2692: a2 = a4 <u a2\n  2695: a2 = a0 if a1 == 0\n  2698: a5 = u64 [s1 + 0xe8]\n  2702: a0 = ra <u a5\n  2705: a3 = u64 [s1 + 0xe0]\n  2709: a1 = t0 ^ a3\n  2712: a3 = t0 <u a3\n  2715: a3 = a0 if a1 == 0\n  2718: a0 = ra ^ a5\n  2721: a0 = a0 | a1\n  2724: a3 = a2 if a0 == 0\n  2727: u64 [t1] = t2\n  2729: u64 [t1 + 0x8] = a4\n  2732: u64 [t1 + 0x10] = ra\n  2735: u64 [t1 + 0x18] = t0\n  2738: jump @76 if a3 == 0\n      : @74 (gas: 11)\n  2741: u64 [s1 + 1912] = 0\n  2745: u64 [s1 + 1904] = 0\n  2749: u64 [s1 + 1896] = 0\n  2753: u64 [s1 + 1888] = 0\n  2757: a1 = s1 + 0x760\n  2761: a0 = t1\n  2763: u64 [s1 + 0x110] = t2\n  2767: u64 [s1 + 0x118] = a4\n  2771: u64 [s1 + 0x108] = t0\n  2775: u64 [s1 + 0x100] = ra\n  2779: ra = 40, jump @22\n      : @75 [@dyn 20] (gas: 15)\n  2784: t1 = u64 [s1 + 0xd8]\n  2788: t0 = u64 [s1 + 0x108]\n  2792: a4 = u64 [s1 + 0x118]\n  2796: t2 = u64 [s1 + 0x110]\n  2800: t2 = t2 + 0x1\n  2803: a0 = t2 <u 0x1\n  2806: a4 = a4 + a0\n  2809: a0 = t2 | a4\n  2812: a0 = a0 <u 0x1\n  2815: a1 = u64 [s1 + 0x100]\n  2819: a0 = a0 + a1\n  2822: a1 = a0 <u a1\n  2825: t0 = t0 + a1\n  2828: ra = a0\n  2830: jump @73\n      : @76 (gas: 23)\n  2833: a0 = u64 [s1 + 0xb8]\n  2837: a0 = a0 ^ 0x1\n  2840: a5 = u64 [s1 + 0xd0]\n  2844: a1 = u64 [s1 + 0x58]\n  2847: a0 = a1 if a5 != 0\n  2850: a1 = u64 [s1 + 0x90]\n  2854: a2 = u64 [s1 + 0xc0]\n  2858: a0 = a1 if a2 != 0\n  2861: ra = u64 [s1 + 0xc8]\n  2865: a4 = a5 | ra\n  2868: a1 = u64 [s1 + 0x60]\n  2871: t2 = a1 >> 0x3f\n  2874: ra = ra << 0x1\n  2877: a2 = a5 >> 0x3f\n  2880: u64 [s1 + 0x58] = a2\n  2883: a2 = a1 << 0x1\n  2886: u64 [s1 + 0x48] = a2\n  2889: a3 = u64 [s1 + 0x68]\n  2892: t0 = a3 >> 0x3f\n  2895: a2 = a5 << 0x1\n  2898: u64 [s1 + 0x50] = a2\n  2901: a2 = a3 << 0x1\n  2904: jump @88 if a0 == 0\n      : @77 (gas: 14)\n  2908: u64 [s1 + 0x20] = a4\n  2911: u64 [s1 + 0x30] = t0\n  2914: u64 [s1 + 0x38] = ra\n  2917: u64 [s1 + 0x28] = t2\n  2920: u64 [s1 + 0x40] = a2\n  2923: a3 = a3 & 0xffffffffffffffe0\n  2926: u64 [s1 + 0x90] = a3\n  2930: u64 [s1 + 1336] = 0\n  2934: u64 [s1 + 1328] = 0\n  2938: u64 [s1 + 1320] = 0\n  2942: a1 = s1 + 0x520\n  2946: u64 [s1 + 1312] = 0x3\n  2951: a0 = 0\n  2953: ra = 42, jump @19\n      : @78 [@dyn 21] (gas: 7)\n  2958: a0 = sp + 0xffffffffffffffe0\n  2961: a0 = a0 & 0xffffffffffffffe0\n  2964: u64 [s1 + 0xf0] = a0\n  2968: sp = a0\n  2970: a1 = 0x20\n  2973: a0 = 0\n  2975: ra = 44, jump @26\n      : @79 [@dyn 22] (gas: 1)\n  2980: t0 = 46, jump @943\n      : @80 [@dyn 23] (gas: 5)\n  2985: ecalli 6 // 'hash_keccak_256'\n  2987: u64 [s1 + 280] = 0x20\n  2992: a5 = 0\n  2994: u64 [s1 + 272] = 0\n  2998: t0 = 48, jump @928\n      : @81 [@dyn 24] (gas: 15)\n  3003: t0 = u64 [a3]\n  3005: t1 = reverse a0\n  3007: a1 = reverse a1\n  3009: a3 = reverse a2\n  3011: a2 = reverse t0\n  3013: t0 = a2\n  3015: a0 = u64 [s1 + 0xf0]\n  3019: u64 [a0 + 0x18] = a2\n  3022: u64 [s1 + 0xd0] = a3\n  3026: u64 [a0 + 0x10] = a3\n  3029: u64 [s1 + 0xe8] = a1\n  3033: u64 [a0 + 0x8] = a1\n  3036: a3 = t1\n  3038: u64 [a0] = t1\n  3040: fallthrough\n      : @82 (gas: 25)\n  3041: t2 = t0\n  3043: t1 = a3\n  3045: a0 = u64 [s1 + 0x90]\n  3049: u64 [s1 + 0xe0] = a4\n  3053: a0 = a4 <u a0\n  3056: a4 = a0 ^ 0x1\n  3059: u64 [s1 + 0xd8] = ra\n  3063: a4 = 0x1 if ra != 0\n  3066: a0 = u64 [s1 + 0x100]\n  3070: a2 = u64 [s1 + 0xf8]\n  3074: a0 = a0 | a2\n  3077: a4 = 0x1 if a0 != 0\n  3080: a1 = u64 [s1 + 0xb0]\n  3084: a0 = u64 [s1 + 0x118]\n  3088: a1 = a1 + a0\n  3091: a3 = u64 [s1 + 0xa8]\n  3095: t0 = a5\n  3097: a3 = a3 + a5\n  3100: a2 = u64 [s1 + 0x98]\n  3104: a0 = u64 [s1 + 0x110]\n  3108: a2 = a2 + a0\n  3111: a0 = u64 [s1 + 0xa0]\n  3115: a5 = u64 [s1 + 0x108]\n  3119: a0 = a0 + a5\n  3122: jump @90 if a4 != 0\n      : @83 (gas: 23)\n  3126: a4 = u64 [s1 + 0x118]\n  3130: a4 = a1 <u a4\n  3133: ra = a3 + a4\n  3136: a3 = t0\n  3138: t0 = ra ^ t0\n  3141: a5 = ra <u a3\n  3144: a5 = a4 if t0 == 0\n  3147: a5 = a5 + a2\n  3150: t0 = a5 <u a2\n  3153: a4 = u64 [s1 + 0x110]\n  3157: a2 = a2 <u a4\n  3160: a0 = a0 + a2\n  3163: a0 = a0 + t0\n  3166: a2 = a1 | a5\n  3169: a0 = ra | a0\n  3172: a2 = a2 | a0\n  3175: a2 = a2 >> 0x20\n  3178: a0 = a0 | a5\n  3181: a0 = a0 << 0x20\n  3184: a0 = a0 | a2\n  3187: u64 [s1 + 0xc8] = t1\n  3191: u64 [s1 + 0xc0] = t2\n  3195: jump @85 if a0 == 0\n      : @84 (gas: 1)\n  3198: jump @198\n      : @85 (gas: 3)\n  3201: a0 = s1 + 0x1a0\n  3205: u64 [s1 + 0xb8] = a3\n  3209: ra = 50, jump @17\n      : @86 [@dyn 25] (gas: 12)\n  3214: a0 = u64 [s1 + 0x1b8]\n  3218: a1 = u64 [s1 + 0x1b0]\n  3222: a2 = u64 [s1 + 0x1a8]\n  3226: a3 = u64 [s1 + 0x1a0]\n  3230: a4 = s1 + 0x700\n  3234: u64 [a4 + 0x98] = a0\n  3238: u64 [a4 + 0x90] = a1\n  3242: u64 [a4 + 0x88] = a2\n  3246: u64 [a4 + 0x80] = a3\n  3250: a1 = s1 + 0x780\n  3254: a0 = u64 [s1 + 0xf0]\n  3258: ra = 52, jump @22\n      : @87 [@dyn 26] (gas: 57)\n  3263: ra = u64 [s1 + 0xc8]\n  3267: ra = ra + 0x1\n  3270: a0 = ra <u 0x1\n  3273: t0 = u64 [s1 + 0xe8]\n  3277: t0 = t0 + a0\n  3280: a0 = ra | t0\n  3283: a0 = a0 <u 0x1\n  3286: a1 = u64 [s1 + 0xd0]\n  3290: t1 = a1 + a0\n  3293: a1 = t1 <u a1\n  3296: a0 = u64 [s1 + 0xc0]\n  3300: a0 = a0 + a1\n  3303: a1 = u64 [s1 + 0x118]\n  3307: a2 = a1 + 0x20\n  3310: u64 [s1 + 0xc8] = a2\n  3314: a3 = a2 <u a1\n  3317: a1 = u64 [s1 + 0xb8]\n  3321: a2 = a1 + a3\n  3324: u64 [s1 + 0xc0] = a2\n  3328: a4 = a2 <u a1\n  3331: a4 = a3 if a3 == 0\n  3334: a1 = u64 [s1 + 0x110]\n  3338: t2 = a1 + a4\n  3341: a4 = t2 <u a1\n  3344: a1 = u64 [s1 + 0x108]\n  3348: a1 = a1 + a4\n  3351: u64 [s1 + 0x108] = a1\n  3355: a1 = u64 [s1 + 0xe0]\n  3359: a4 = a1 + 0x20\n  3362: a5 = a4 <u a1\n  3365: a2 = u64 [s1 + 0xd8]\n  3369: a1 = a2 + a5\n  3372: a2 = a1 <u a2\n  3375: a2 = a5 if a5 == 0\n  3378: a3 = u64 [s1 + 0xf8]\n  3382: a2 = a2 + a3\n  3385: a5 = a2 <u a3\n  3388: a3 = u64 [s1 + 0x100]\n  3392: a3 = a3 + a5\n  3395: u64 [s1 + 0x100] = a3\n  3399: a3 = t0\n  3401: u64 [s1 + 0xe8] = a3\n  3405: a5 = u64 [s1 + 0xf0]\n  3409: u64 [a5 + 0x8] = a3\n  3412: a3 = ra\n  3414: u64 [a5] = ra\n  3416: u64 [a5 + 0x10] = t1\n  3419: t0 = a0\n  3421: u64 [a5 + 0x18] = a0\n  3424: u64 [s1 + 0xd0] = t1\n  3428: a0 = u64 [s1 + 0xc8]\n  3432: u64 [s1 + 0x118] = a0\n  3436: a5 = u64 [s1 + 0xc0]\n  3440: u64 [s1 + 0x110] = t2\n  3444: ra = a1\n  3446: u64 [s1 + 0xf8] = a2\n  3450: jump @82\n      : @88 (gas: 7)\n  3453: a0 = a3 | a1\n  3456: a0 = a0 | a4\n  3459: a4 = u64 [s1 + 0xb0]\n  3463: t1 = u64 [s1 + 0xa8]\n  3467: a1 = u64 [s1 + 0xa0]\n  3471: a5 = u64 [s1 + 0x98]\n  3475: jump @104 if a0 != 0\n      : @89 (gas: 6)\n  3479: u64 [s1 + 0x40] = a2\n  3482: u64 [s1 + 256] = 0\n  3486: u64 [s1 + 248] = 0\n  3490: u64 [s1 + 264] = 0\n  3494: u64 [s1 + 272] = 0\n  3498: jump @107\n      : @90 (gas: 11)\n  3501: ra = t0\n  3503: t1 = u64 [s1 + 0x68]\n  3506: a4 = u64 [s1 + 0x90]\n  3510: a4 = a4 ^ t1\n  3513: a5 = u64 [s1 + 0x60]\n  3516: a4 = a4 | a5\n  3519: a5 = u64 [s1 + 0x20]\n  3522: a4 = a4 | a5\n  3525: a5 = u64 [s1 + 0x38]\n  3528: t0 = u64 [s1 + 0x30]\n  3531: jump @103 if a4 == 0\n      : @91 (gas: 13)\n  3535: a4 = u64 [s1 + 0x118]\n  3539: a4 = a1 <u a4\n  3542: a3 = a3 + a4\n  3545: t0 = a3 ^ ra\n  3548: a5 = a3 <u ra\n  3551: a5 = a4 if t0 == 0\n  3554: a5 = a5 + a2\n  3557: t0 = a5 <u a2\n  3560: a4 = u64 [s1 + 0x110]\n  3564: a2 = a2 <u a4\n  3567: a0 = a0 + a2\n  3570: a0 = a0 + t0\n  3573: t0 = 54, jump @927\n      : @92 [@dyn 27] (gas: 1)\n  3578: jump @94 if a0 == 0\n      : @93 (gas: 1)\n  3581: jump @198\n      : @94 (gas: 2)\n  3584: a0 = s1 + 0x500\n  3588: ra = 56, jump @17\n      : @95 [@dyn 28] (gas: 11)\n  3593: a1 = s1 + 0x500\n  3597: a0 = u64 [a1 + 0x18]\n  3600: u64 [s1 + 0x110] = a0\n  3604: a0 = u64 [a1 + 0x10]\n  3607: u64 [s1 + 0x108] = a0\n  3611: a0 = u64 [a1 + 0x8]\n  3614: u64 [s1 + 0x100] = a0\n  3618: a0 = u64 [a1]\n  3620: u64 [s1 + 0xf8] = a0\n  3624: a0 = u64 [s1 + 0x68]\n  3627: t0 = 58, jump @931\n      : @96 [@dyn 29] (gas: 1)\n  3632: ra = 60, jump @952\n      : @97 [@dyn 30] (gas: 6)\n  3637: u64 [s1 + 0xe8] = a0\n  3641: u64 [s1 + 0xd0] = a1\n  3645: a0 = 0xffffffffffffffff\n  3648: a1 = 0xffffffffffffffff\n  3651: a2 = u64 [s1 + 0x118]\n  3655: ra = 62, jump @947\n      : @98 [@dyn 31] (gas: 1)\n  3660: t0 = 64, jump @933\n      : @99 [@dyn 32] (gas: 1)\n  3665: ra = 66, jump @947\n      : @100 [@dyn 33] (gas: 1)\n  3670: t0 = 68, jump @910\n      : @101 [@dyn 34] (gas: 8)\n  3675: a4 = s1 + 0x700\n  3679: u64 [a4 + 0xb8] = a3\n  3683: u64 [a4 + 0xb0] = a2\n  3687: u64 [a4 + 0xa8] = a1\n  3691: u64 [a4 + 0xa0] = a0\n  3695: a1 = s1 + 0x7a0\n  3699: a0 = u64 [s1 + 0xf0]\n  3703: ra = 70, jump @22\n      : @102 [@dyn 35] (gas: 3)\n  3708: t0 = u64 [s1 + 0x30]\n  3711: a5 = u64 [s1 + 0x38]\n  3714: fallthrough\n      : @103 (gas: 22)\n  3715: a0 = u64 [s1 + 0x28]\n  3718: a0 = a0 | a5\n  3721: a1 = u64 [s1 + 0x58]\n  3724: a2 = u64 [s1 + 0x48]\n  3727: a1 = a1 | a2\n  3730: a2 = u64 [s1 + 0x50]\n  3733: a2 = a2 | t0\n  3736: a3 = u64 [s1 + 0x40]\n  3739: a3 = a3 + 0x1\n  3742: u64 [s1 + 2008] = 0\n  3746: u64 [s1 + 2000] = 0\n  3750: u64 [s1 + 1992] = 0\n  3754: a5 = s1 + 0x700\n  3758: u64 [a5 + 192] = 0x3\n  3763: u64 [a5 + 0xe0] = a3\n  3767: u64 [a5 + 0xe8] = a2\n  3771: u64 [a5 + 0xf0] = a1\n  3775: u64 [a5 + 0xf8] = a0\n  3779: a0 = s1 + 0x7c0\n  3783: a1 = s1 + 0x7e0\n  3787: ra = 0x56\n  3790: jump @22\n      : @104 (gas: 6)\n  3793: a0 = a5 | a1\n  3796: a1 = 0xffffffe0\n  3806: a1 = a4 <u a1\n  3809: a1 = 0 if t1 != 0\n  3811: a1 = 0 if a0 != 0\n  3813: jump @198 if a1 == 0\n      : @105 (gas: 7)\n  3817: u64 [s1 + 0x40] = a2\n  3820: i32 a1 = a4 + 0x20\n  3823: a0 = s1 + 0x540\n  3827: u64 [s1 + 0x28] = t2\n  3830: u64 [s1 + 0x38] = ra\n  3833: u64 [s1 + 0x30] = t0\n  3836: ra = 72, jump @17\n      : @106 [@dyn 36] (gas: 15)\n  3841: t0 = u64 [s1 + 0x30]\n  3844: ra = u64 [s1 + 0x38]\n  3847: t2 = u64 [s1 + 0x28]\n  3850: a3 = u64 [s1 + 0x68]\n  3853: a1 = s1 + 0x500\n  3857: a0 = u64 [a1 + 0x58]\n  3860: a2 = s1 + 0x100\n  3864: u64 [a2 + 0x10] = a0\n  3867: a0 = u64 [a1 + 0x50]\n  3870: u64 [a2 + 0x8] = a0\n  3873: a0 = u64 [a1 + 0x48]\n  3876: u64 [s1 + 0xf8] = a0\n  3880: a0 = u64 [a1 + 0x40]\n  3883: u64 [a2] = a0\n  3885: fallthrough\n      : @107 (gas: 10)\n  3886: a0 = u64 [s1 + 0x58]\n  3889: a1 = u64 [s1 + 0x48]\n  3892: a0 = a0 | a1\n  3895: u64 [s1 + 0xf0] = a0\n  3899: a0 = ra | t2\n  3902: u64 [s1 + 0xe8] = a0\n  3906: a0 = u64 [s1 + 0x50]\n  3909: a0 = a0 | t0\n  3912: u64 [s1 + 0xe0] = a0\n  3916: t0 = 74, jump @940\n      : @108 [@dyn 37] (gas: 1)\n  3921: ra = 76, jump @952\n      : @109 [@dyn 38] (gas: 7)\n  3926: u64 [s1 + 0xc0] = a0\n  3930: u64 [s1 + 0xd8] = a1\n  3934: a0 = u64 [s1 + 0x68]\n  3937: i32 a2 = a0 << 0x3\n  3940: a0 = 0xffffffffffffffff\n  3943: a1 = 0xffffffffffffffff\n  3946: ra = 78, jump @947\n      : @110 [@dyn 39] (gas: 10)\n  3951: u64 [s1 + 0xd0] = a0\n  3955: u64 [s1 + 0xc8] = a1\n  3959: a1 = u64 [s1 + 0xc0]\n  3963: a0 = a0 | a1\n  3966: u64 [s1 + 0xc0] = a0\n  3970: a0 = u64 [s1 + 0x118]\n  3974: i32 a2 = a0 + 0xffffffffffffff80\n  3977: a0 = 0xffffffffffffffff\n  3980: a1 = 0xffffffffffffffff\n  3983: ra = 80, jump @947\n      : @111 [@dyn 40] (gas: 7)\n  3988: a4 = u64 [s1 + 0x118]\n  3992: a2 = a4 <u 0x80\n  3996: a3 = u64 [s1 + 0xc0]\n  4000: a0 = a3 if a2 != 0\n  4003: a5 = u64 [s1 + 0xc8]\n  4007: a3 = u64 [s1 + 0xd8]\n  4011: t0 = 82, jump @941\n      : @112 [@dyn 41] (gas: 2)\n  4016: a4 = u64 [s1 + 0xd0]\n  4020: t0 = 84, jump @917\n      : @113 [@dyn 42] (gas: 29)\n  4025: a4 = u64 [s1 + 0x40]\n  4028: a0 = a0 | a4\n  4031: a4 = u64 [s1 + 0xe0]\n  4035: a1 = a1 | a4\n  4038: a4 = u64 [s1 + 0xe8]\n  4042: a3 = a3 | a4\n  4045: a4 = u64 [s1 + 0xf0]\n  4049: a2 = a2 | a4\n  4052: a5 = s1 + 0x1000\n  4056: u64 [a5 + 4294965248] = 0x3\n  4061: a4 = s1 + 0x1000\n  4065: u64 [a4 + 0xfffffffffffff830] = a2\n  4069: a2 = s1 + 0x1000\n  4073: u64 [a2 + 0xfffffffffffff838] = a3\n  4077: a2 = s1 + 0x1000\n  4081: u64 [a2 + 0xfffffffffffff828] = a1\n  4085: a1 = s1 + 0x1000\n  4089: u64 [a1 + 0xfffffffffffff820] = a0\n  4093: a0 = s1 + 0x1000\n  4097: u64 [a0 + 4294965272] = 0\n  4101: a0 = s1 + 0x1000\n  4105: u64 [a0 + 4294965264] = 0\n  4109: a0 = s1 + 0x1000\n  4113: u64 [a0 + 4294965256] = 0\n  4117: a0 = s1 + 0x7ff\n  4121: a0 = a0 + 0x1\n  4124: a1 = s1 + 0x7ff\n  4128: a1 = a1 + 0x21\n  4131: ra = 86, jump @22\n      : @114 [@dyn 43] (gas: 12)\n  4136: a1 = u64 [s1 + 0x88]\n  4140: a4 = u64 [s1 + 0x70]\n  4143: a0 = a1 | a4\n  4146: a2 = u64 [s1 + 0x80]\n  4150: a3 = u64 [s1 + 0x78]\n  4153: a2 = a2 | a3\n  4156: a0 = a0 | a2\n  4159: a0 = a0 >> 0x20\n  4162: a2 = a2 | a4\n  4165: a2 = a2 << 0x20\n  4168: a0 = a0 | a2\n  4171: jump @198 if a0 != 0\n      : @115 (gas: 2)\n  4175: a0 = s1 + 0x4e0\n  4179: ra = 88, jump @17\n      : @116 [@dyn 44] (gas: 17)\n  4184: a0 = s1 + 0x400\n  4188: a3 = u64 [a0 + 0xf8]\n  4192: a2 = u64 [a0 + 0xf0]\n  4196: a1 = u64 [a0 + 0xe8]\n  4200: a0 = a3 >u 0\n  4202: a4 = a2 >u 0\n  4204: a4 = a0 if a3 != 0\n  4207: u64 [s1 + 0xa0] = a1\n  4211: a0 = a1 >u 0\n  4213: u64 [s1 + 0x98] = a2\n  4217: u64 [s1 + 0x90] = a3\n  4221: a2 = a2 | a3\n  4224: u64 [s1 + 0xb8] = a0\n  4228: u64 [s1 + 0xc0] = a4\n  4232: u64 [s1 + 0xd0] = a2\n  4236: a0 = a4 if a2 != 0\n  4239: jump @215 if a0 != 0\n      : @117 (gas: 14)\n  4243: a0 = u64 [s1 + 0x4e0]\n  4247: u64 [s1 + 0xa8] = a0\n  4251: a0 = s1 + 0x1000\n  4255: u64 [a0 + 4294965336] = 0\n  4259: a0 = s1 + 0x1000\n  4263: u64 [a0 + 4294965328] = 0\n  4267: a0 = s1 + 0x1000\n  4271: u64 [a0 + 4294965320] = 0\n  4275: a1 = s1 + 0x1000\n  4279: u64 [a1 + 4294965312] = 0x4\n  4284: a0 = s1 + 0x4c0\n  4288: a1 = s1 + 0x7ff\n  4292: a1 = a1 + 0x41\n  4295: ra = 90, jump @21\n      : @118 [@dyn 45] (gas: 6)\n  4300: a4 = s1 + 0x400\n  4304: a0 = u64 [a4 + 0xd0]\n  4308: a1 = u64 [a4 + 0xc8]\n  4312: a2 = u64 [a4 + 0xc0]\n  4316: a3 = u64 [a4 + 0xd8]\n  4320: t0 = 92, jump @915\n      : @119 [@dyn 46] (gas: 12)\n  4325: t0 = a2 <u 0x1\n  4328: ra = a1 & 0x7f\n  4331: t2 = a5 & a0\n  4334: a4 = a5 & t1\n  4337: ra = a1 if a2 != 0\n  4340: a1 = ra <u 0x20\n  4343: a5 = a5 & a3\n  4346: a2 = a1\n  4348: a2 = 0 if a4 != 0\n  4350: a0 = t2 | a5\n  4353: a2 = 0 if a0 != 0\n  4355: jump @221 if t0 != a2\n      : @120 (gas: 1)\n  4359: t0 = 94, jump @921\n      : @121 [@dyn 47] (gas: 4)\n  4364: a0 = u64 [s1 + 0xa8]\n  4368: a0 = a0 <u 0x20\n  4371: u64 [s1 + 0xc8] = a0\n  4375: jump @130 if a3 == 0\n      : @122 (gas: 11)\n  4379: u64 [s1 + 0xf0] = a4\n  4383: u64 [s1 + 0xf8] = ra\n  4387: u64 [s1 + 0x100] = a5\n  4391: u64 [s1 + 0x110] = t2\n  4395: u64 [s1 + 1208] = 0\n  4399: u64 [s1 + 1200] = 0\n  4403: u64 [s1 + 1192] = 0\n  4407: a1 = s1 + 0x4a0\n  4411: u64 [s1 + 1184] = 0x4\n  4416: a0 = 0\n  4418: ra = 96, jump @19\n      : @123 [@dyn 48] (gas: 2)\n  4423: a1 = i32 [0x200fc]\n  4428: jump @125 if a1 >u 31\n      : @124 (gas: 2)\n  4432: u32 [0x200fc] = 0x20\n  4438: fallthrough\n      : @125 (gas: 87)\n  4439: a0 = sp + 0xffffffffffffffe0\n  4442: a2 = a0 & 0xffffffffffffffe0\n  4445: u64 [s1 + 0x108] = a2\n  4449: sp = a2\n  4451: a0 = 0x20110\n  4456: i32 a0 = a0 + 0\n  4458: i32 a2 = a2 + 0\n  4460: a1 = 0x20\n  4463: ecalli 6 // 'hash_keccak_256'\n  4465: a0 = u64 [s1 + 0xa8]\n  4469: a1 = a0 + 0x1f\n  4472: a0 = a1 <u a0\n  4475: a5 = u64 [s1 + 0xa0]\n  4479: a2 = a5 + a0\n  4482: a3 = a2 <u a5\n  4485: a3 = a0 if a0 == 0\n  4488: a4 = u64 [s1 + 0x98]\n  4492: a3 = a3 + a4\n  4495: u64 [s1 + 0xe8] = a3\n  4499: a3 = a3 << 0x3b\n  4502: a4 = a2 >> 0x5\n  4505: a4 = a4 | a3\n  4508: a0 = u64 [s1 + 0x108]\n  4512: t0 = u64 [a0 + 0x18]\n  4515: a2 = a2 << 0x3b\n  4518: a0 = u64 [a0 + 0x10]\n  4521: a1 = a1 >> 0x5\n  4524: a2 = a2 | a1\n  4527: t2 = reverse t0\n  4529: a0 = reverse a0\n  4531: a1 = u64 [s1 + 0xc8]\n  4535: a1 = 0 if a5 != 0\n  4537: a3 = u64 [s1 + 0xd0]\n  4541: a1 = 0 if a3 != 0\n  4543: a4 = 0 if a1 != 0\n  4545: a2 = 0 if a1 != 0\n  4547: t0 = t2 + a2\n  4550: a2 = t0 <u t2\n  4553: a5 = a0 + a2\n  4556: a4 = a4 + a5\n  4559: u64 [s1 + 0x118] = a4\n  4563: a5 = a4 ^ a0\n  4566: a3 = a4 <u a0\n  4569: a3 = a2 if a5 == 0\n  4572: u64 [s1 + 0xe0] = a3\n  4576: a2 = u64 [s1 + 0xf8]\n  4580: ra = a2 + 0x1f\n  4583: a4 = ra <u a2\n  4586: a3 = u64 [s1 + 0xf0]\n  4590: a2 = a3 + a4\n  4593: a5 = a2 <u a3\n  4596: a5 = a4 if a4 == 0\n  4599: t1 = u64 [s1 + 0x110]\n  4603: t1 = t1 + a5\n  4606: a4 = t1 << 0x3b\n  4609: a3 = a2 >> 0x5\n  4612: a3 = a3 | a4\n  4615: a2 = a2 << 0x3b\n  4618: a4 = ra >> 0x5\n  4621: a2 = a2 | a4\n  4624: a2 = a2 + t2\n  4627: u64 [s1 + 0xf8] = a2\n  4631: a4 = a2 <u t2\n  4634: t2 = t0\n  4636: a2 = a0 + a4\n  4639: a2 = a2 + a3\n  4642: a3 = a2 ^ a0\n  4645: u64 [s1 + 0xf0] = a2\n  4649: a2 = a2 <u a0\n  4652: a2 = a4 if a3 == 0\n  4655: a4 = u64 [s1 + 0xe8]\n  4659: a0 = u64 [s1 + 0x98]\n  4663: a0 = a4 <u a0\n  4666: a3 = u64 [s1 + 0x90]\n  4670: a0 = a0 + a3\n  4673: a3 = a4 >> 0x5\n  4676: a4 = a0 << 0x3b\n  4679: a3 = a3 | a4\n  4682: a4 = u64 [s1 + 0x108]\n  4686: t0 = u64 [a4]\n  4688: a4 = u64 [a4 + 0x8]\n  4691: a0 = a0 >> 0x5\n  4694: a3 = 0 if a1 != 0\n  4696: a0 = 0 if a1 != 0\n  4698: a1 = reverse a4\n  4700: a4 = reverse t0\n  4702: t0 = 98, jump @938\n      : @126 [@dyn 49] (gas: 24)\n  4707: t0 = a0 + a3\n  4710: a0 = u64 [s1 + 0x110]\n  4714: a0 = t1 <u a0\n  4717: a3 = u64 [s1 + 0x100]\n  4721: a0 = a0 + a3\n  4724: a3 = t1 >> 0x5\n  4727: a5 = a0 << 0x3b\n  4730: a3 = a3 | a5\n  4733: a0 = a0 >> 0x5\n  4736: a0 = a0 + a4\n  4739: a4 = u64 [s1 + 0x118]\n  4743: a3 = a3 + a1\n  4746: a1 = a3 <u a1\n  4749: a0 = a0 + a1\n  4752: a2 = a2 + a3\n  4755: u64 [s1 + 0xe8] = a2\n  4759: a1 = a2 <u a3\n  4762: a0 = a0 + a1\n  4765: u64 [s1 + 0xe0] = a0\n  4769: a0 = sp + 0xffffffffffffffe0\n  4772: t1 = a0 & 0xffffffffffffffe0\n  4775: sp = t1\n  4777: u64 [s1 + 0xd8] = t1\n  4781: fallthrough\n      : @127 (gas: 20)\n  4782: a0 = u64 [s1 + 0xf8]\n  4786: a0 = t2 <u a0\n  4789: a2 = u64 [s1 + 0xf0]\n  4793: a1 = a4 ^ a2\n  4796: a2 = a4 <u a2\n  4799: a2 = a0 if a1 == 0\n  4802: a5 = u64 [s1 + 0xe8]\n  4806: a0 = ra <u a5\n  4809: a3 = u64 [s1 + 0xe0]\n  4813: a1 = t0 ^ a3\n  4816: a3 = t0 <u a3\n  4819: a3 = a0 if a1 == 0\n  4822: a0 = ra ^ a5\n  4825: a0 = a0 | a1\n  4828: a3 = a2 if a0 == 0\n  4831: u64 [t1] = t2\n  4833: u64 [t1 + 0x8] = a4\n  4836: u64 [t1 + 0x10] = ra\n  4839: u64 [t1 + 0x18] = t0\n  4842: jump @130 if a3 == 0\n      : @128 (gas: 16)\n  4845: a0 = s1 + 0x1000\n  4849: u64 [a0 + 4294965368] = 0\n  4853: a0 = s1 + 0x1000\n  4857: u64 [a0 + 4294965360] = 0\n  4861: a0 = s1 + 0x1000\n  4865: u64 [a0 + 4294965352] = 0\n  4869: a0 = s1 + 0x1000\n  4873: u64 [a0 + 4294965344] = 0\n  4877: a1 = s1 + 0x7ff\n  4881: a1 = a1 + 0x61\n  4884: a0 = t1\n  4886: u64 [s1 + 0x110] = t2\n  4890: u64 [s1 + 0x118] = a4\n  4894: u64 [s1 + 0x108] = t0\n  4898: u64 [s1 + 0x100] = ra\n  4902: ra = 100, jump @22\n      : @129 [@dyn 50] (gas: 15)\n  4907: t1 = u64 [s1 + 0xd8]\n  4911: t0 = u64 [s1 + 0x108]\n  4915: a4 = u64 [s1 + 0x118]\n  4919: t2 = u64 [s1 + 0x110]\n  4923: t2 = t2 + 0x1\n  4926: a0 = t2 <u 0x1\n  4929: a4 = a4 + a0\n  4932: a0 = t2 | a4\n  4935: a0 = a0 <u 0x1\n  4938: a1 = u64 [s1 + 0x100]\n  4942: a0 = a0 + a1\n  4945: a1 = a0 <u a1\n  4948: t0 = t0 + a1\n  4951: ra = a0\n  4953: jump @127\n      : @130 (gas: 9)\n  4956: a0 = u64 [s1 + 0xc8]\n  4960: a0 = a0 ^ 0x1\n  4963: a4 = u64 [s1 + 0xa0]\n  4967: a1 = u64 [s1 + 0xb8]\n  4971: a0 = a1 if a4 != 0\n  4974: a1 = u64 [s1 + 0xc0]\n  4978: a2 = u64 [s1 + 0xd0]\n  4982: a0 = a1 if a2 != 0\n  4985: jump @142 if a0 == 0\n      : @131 (gas: 10)\n  4989: a0 = u64 [s1 + 0xa8]\n  4993: a0 = a0 & 0xffffffffffffffe0\n  4996: u64 [s1 + 0xb0] = a0\n  5000: u64 [s1 + 1144] = 0\n  5004: u64 [s1 + 1136] = 0\n  5008: u64 [s1 + 1128] = 0\n  5012: a1 = s1 + 0x460\n  5016: u64 [s1 + 1120] = 0x4\n  5021: a0 = 0\n  5023: ra = 102, jump @19\n      : @132 [@dyn 51] (gas: 7)\n  5028: a0 = sp + 0xffffffffffffffe0\n  5031: a0 = a0 & 0xffffffffffffffe0\n  5034: u64 [s1 + 0xf0] = a0\n  5038: sp = a0\n  5040: a1 = 0x20\n  5043: a0 = 0\n  5045: ra = 104, jump @26\n      : @133 [@dyn 52] (gas: 1)\n  5050: t0 = 106, jump @943\n      : @134 [@dyn 53] (gas: 5)\n  5055: ecalli 6 // 'hash_keccak_256'\n  5057: u64 [s1 + 272] = 0x20\n  5062: a5 = 0\n  5064: u64 [s1 + 280] = 0\n  5068: t0 = 108, jump @928\n      : @135 [@dyn 54] (gas: 15)\n  5073: t0 = u64 [a3]\n  5075: t1 = reverse a0\n  5077: a1 = reverse a1\n  5079: a3 = reverse a2\n  5081: a2 = reverse t0\n  5083: t0 = a2\n  5085: a0 = u64 [s1 + 0xf0]\n  5089: u64 [a0 + 0x18] = a2\n  5092: u64 [s1 + 0xc8] = a3\n  5096: u64 [a0 + 0x10] = a3\n  5099: u64 [s1 + 0xe0] = a1\n  5103: u64 [a0 + 0x8] = a1\n  5106: a3 = t1\n  5108: u64 [a0] = t1\n  5110: fallthrough\n      : @136 (gas: 26)\n  5111: t1 = t0\n  5113: t2 = a3\n  5115: a0 = u64 [s1 + 0xb0]\n  5119: u64 [s1 + 0xd8] = a4\n  5123: a0 = a4 <u a0\n  5126: a4 = a0 ^ 0x1\n  5129: u64 [s1 + 0xd0] = ra\n  5133: a4 = 0x1 if ra != 0\n  5136: a0 = u64 [s1 + 0x100]\n  5140: a2 = u64 [s1 + 0xf8]\n  5144: a0 = a0 | a2\n  5147: a4 = 0x1 if a0 != 0\n  5150: a1 = u64 [s1 + 0x88]\n  5154: ra = u64 [s1 + 0x110]\n  5158: a1 = a1 + ra\n  5161: a3 = u64 [s1 + 0x80]\n  5165: t0 = a5\n  5167: a3 = a3 + a5\n  5170: a2 = u64 [s1 + 0x70]\n  5173: a0 = u64 [s1 + 0x118]\n  5177: a2 = a2 + a0\n  5180: a0 = u64 [s1 + 0x78]\n  5183: a5 = u64 [s1 + 0x108]\n  5187: a0 = a0 + a5\n  5190: u64 [s1 + 0xe8] = t0\n  5194: jump @144 if a4 != 0\n      : @137 (gas: 13)\n  5198: a4 = a1 <u ra\n  5201: a3 = a3 + a4\n  5204: a5 = t0\n  5206: t0 = a3 ^ t0\n  5209: a5 = a3 <u a5\n  5212: a5 = a4 if t0 == 0\n  5215: a5 = a5 + a2\n  5218: t0 = a5 <u a2\n  5221: a4 = u64 [s1 + 0x118]\n  5225: a2 = a2 <u a4\n  5228: a0 = a0 + a2\n  5231: a0 = a0 + t0\n  5234: t0 = 110, jump @927\n      : @138 [@dyn 55] (gas: 3)\n  5239: u64 [s1 + 0xc0] = t2\n  5243: u64 [s1 + 0xb8] = t1\n  5247: jump @198 if a0 != 0\n      : @139 (gas: 3)\n  5251: a0 = s1 + 0x240\n  5255: u64 [s1 + 0x110] = ra\n  5259: ra = 112, jump @17\n      : @140 [@dyn 56] (gas: 17)\n  5264: a4 = s1 + 0x200\n  5268: a0 = u64 [a4 + 0x58]\n  5271: a1 = u64 [a4 + 0x50]\n  5274: a2 = u64 [a4 + 0x48]\n  5277: a3 = u64 [a4 + 0x40]\n  5280: a4 = s1 + 0x7ff\n  5284: a4 = a4 + 0x99\n  5288: u64 [a4] = a0\n  5290: u64 [a4 + 0xfffffffffffffff8] = a1\n  5293: a0 = s1 + 0x1000\n  5297: u64 [a0 + 0xfffffffffffff888] = a2\n  5301: a0 = s1 + 0x1000\n  5305: u64 [a0 + 0xfffffffffffff880] = a3\n  5309: a1 = s1 + 0x7ff\n  5313: a1 = a1 + 0x81\n  5317: a0 = u64 [s1 + 0xf0]\n  5321: ra = 114, jump @22\n      : @141 [@dyn 57] (gas: 57)\n  5326: ra = u64 [s1 + 0xc0]\n  5330: ra = ra + 0x1\n  5333: a0 = ra <u 0x1\n  5336: t0 = u64 [s1 + 0xe0]\n  5340: t0 = t0 + a0\n  5343: a0 = ra | t0\n  5346: a0 = a0 <u 0x1\n  5349: a1 = u64 [s1 + 0xc8]\n  5353: t1 = a1 + a0\n  5356: a1 = t1 <u a1\n  5359: a0 = u64 [s1 + 0xb8]\n  5363: a0 = a0 + a1\n  5366: a1 = u64 [s1 + 0x110]\n  5370: a2 = a1 + 0x20\n  5373: u64 [s1 + 0xc0] = a2\n  5377: a3 = a2 <u a1\n  5380: a1 = u64 [s1 + 0xe8]\n  5384: a2 = a1 + a3\n  5387: u64 [s1 + 0xb8] = a2\n  5391: a4 = a2 <u a1\n  5394: a4 = a3 if a3 == 0\n  5397: a1 = u64 [s1 + 0x118]\n  5401: t2 = a1 + a4\n  5404: a4 = t2 <u a1\n  5407: a1 = u64 [s1 + 0x108]\n  5411: a1 = a1 + a4\n  5414: u64 [s1 + 0x108] = a1\n  5418: a1 = u64 [s1 + 0xd8]\n  5422: a4 = a1 + 0x20\n  5425: a5 = a4 <u a1\n  5428: a2 = u64 [s1 + 0xd0]\n  5432: a1 = a2 + a5\n  5435: a2 = a1 <u a2\n  5438: a2 = a5 if a5 == 0\n  5441: a3 = u64 [s1 + 0xf8]\n  5445: a2 = a2 + a3\n  5448: a5 = a2 <u a3\n  5451: a3 = u64 [s1 + 0x100]\n  5455: a3 = a3 + a5\n  5458: u64 [s1 + 0x100] = a3\n  5462: a3 = t0\n  5464: u64 [s1 + 0xe0] = a3\n  5468: a5 = u64 [s1 + 0xf0]\n  5472: u64 [a5 + 0x8] = a3\n  5475: a3 = ra\n  5477: u64 [a5] = ra\n  5479: u64 [a5 + 0x10] = t1\n  5482: t0 = a0\n  5484: u64 [a5 + 0x18] = a0\n  5487: u64 [s1 + 0xc8] = t1\n  5491: a0 = u64 [s1 + 0xc0]\n  5495: u64 [s1 + 0x110] = a0\n  5499: a5 = u64 [s1 + 0xb8]\n  5503: u64 [s1 + 0x118] = t2\n  5507: ra = a1\n  5509: u64 [s1 + 0xf8] = a2\n  5513: jump @136\n      : @142 (gas: 8)\n  5516: a3 = u64 [s1 + 0xa8]\n  5520: a5 = u64 [s1 + 0x98]\n  5524: a0 = a3 | a5\n  5527: a2 = u64 [s1 + 0x90]\n  5531: a1 = a4 | a2\n  5534: a0 = a0 | a1\n  5537: t0 = u64 [s1 + 0x88]\n  5541: jump @157 if a0 != 0\n      : @143 (gas: 5)\n  5545: u64 [s1 + 256] = 0\n  5549: u64 [s1 + 248] = 0\n  5553: u64 [s1 + 264] = 0\n  5557: u64 [s1 + 272] = 0\n  5561: jump @160\n      : @144 (gas: 10)\n  5564: t0 = u64 [s1 + 0xa8]\n  5568: a4 = u64 [s1 + 0xb0]\n  5572: a4 = a4 ^ t0\n  5575: t2 = u64 [s1 + 0x98]\n  5579: a4 = a4 | t2\n  5582: t1 = u64 [s1 + 0xa0]\n  5586: ra = u64 [s1 + 0x90]\n  5590: a5 = t1 | ra\n  5593: a4 = a4 | a5\n  5596: jump @156 if a4 == 0\n      : @145 (gas: 14)\n  5600: a4 = u64 [s1 + 0x110]\n  5604: a4 = a1 <u a4\n  5607: a3 = a3 + a4\n  5610: a5 = u64 [s1 + 0xe8]\n  5614: t0 = a3 ^ a5\n  5617: a5 = a3 <u a5\n  5620: a5 = a4 if t0 == 0\n  5623: a5 = a5 + a2\n  5626: t0 = a5 <u a2\n  5629: a4 = u64 [s1 + 0x118]\n  5633: a2 = a2 <u a4\n  5636: a0 = a0 + a2\n  5639: a0 = a0 + t0\n  5642: t0 = 116, jump @927\n      : @146 [@dyn 58] (gas: 1)\n  5647: jump @198 if a0 != 0\n      : @147 (gas: 2)\n  5651: a0 = s1 + 0x440\n  5655: ra = 118, jump @17\n      : @148 [@dyn 59] (gas: 11)\n  5660: a1 = s1 + 0x400\n  5664: a0 = u64 [a1 + 0x58]\n  5667: u64 [s1 + 0x110] = a0\n  5671: a0 = u64 [a1 + 0x50]\n  5674: u64 [s1 + 0x108] = a0\n  5678: a0 = u64 [a1 + 0x48]\n  5681: u64 [s1 + 0x100] = a0\n  5685: a0 = u64 [a1 + 0x40]\n  5688: u64 [s1 + 0xf8] = a0\n  5692: a0 = u64 [s1 + 0xa8]\n  5696: t0 = 120, jump @931\n      : @149 [@dyn 60] (gas: 1)\n  5701: ra = 122, jump @952\n      : @150 [@dyn 61] (gas: 6)\n  5706: u64 [s1 + 0xe8] = a0\n  5710: u64 [s1 + 0xd0] = a1\n  5714: a0 = 0xffffffffffffffff\n  5717: a1 = 0xffffffffffffffff\n  5720: a2 = u64 [s1 + 0x118]\n  5724: ra = 124, jump @947\n      : @151 [@dyn 62] (gas: 1)\n  5729: t0 = 126, jump @933\n      : @152 [@dyn 63] (gas: 1)\n  5734: ra = 128, jump @947\n      : @153 [@dyn 64] (gas: 1)\n  5740: t0 = 130, jump @910\n      : @154 [@dyn 65] (gas: 10)\n  5746: a4 = s1 + 0x7ff\n  5750: a4 = a4 + 0x99\n  5754: u64 [a4 + 0x20] = a3\n  5757: u64 [a4 + 0x18] = a2\n  5760: u64 [a4 + 0x10] = a1\n  5763: u64 [a4 + 0x8] = a0\n  5766: a1 = s1 + 0x7ff\n  5770: a1 = a1 + 0xa1\n  5774: a0 = u64 [s1 + 0xf0]\n  5778: ra = 132, jump @22\n      : @155 [@dyn 66] (gas: 5)\n  5784: t0 = u64 [s1 + 0xa8]\n  5788: t1 = u64 [s1 + 0xa0]\n  5792: t2 = u64 [s1 + 0x98]\n  5796: ra = u64 [s1 + 0x90]\n  5800: fallthrough\n      : @156 (gas: 27)\n  5801: a0 = t2 >> 0x3f\n  5804: a1 = ra << 0x1\n  5807: a0 = a0 | a1\n  5810: a1 = t1 >> 0x3f\n  5813: a2 = t2 << 0x1\n  5816: a1 = a1 | a2\n  5819: a2 = t0 >> 0x3f\n  5822: a3 = t1 << 0x1\n  5825: a2 = a2 | a3\n  5828: a3 = t0 << 0x1\n  5831: a3 = a3 + 0x1\n  5834: a5 = s1 + 0x7ff\n  5838: a5 = a5 + 0x99\n  5842: u64 [a5 + 64] = 0\n  5845: u64 [a5 + 56] = 0\n  5848: u64 [a5 + 48] = 0\n  5851: u64 [a5 + 40] = 0x4\n  5855: u64 [a5 + 0x48] = a3\n  5858: u64 [a5 + 0x50] = a2\n  5861: u64 [a5 + 0x58] = a1\n  5864: u64 [a5 + 0x60] = a0\n  5867: a0 = s1 + 0x7ff\n  5871: a0 = a0 + 0xc1\n  5875: a1 = s1 + 0x7ff\n  5879: a1 = a1 + 0xe1\n  5883: ra = 0x94\n  5887: jump @22\n      : @157 (gas: 9)\n  5890: a0 = u64 [s1 + 0x78]\n  5893: a1 = u64 [s1 + 0x70]\n  5896: a0 = a0 | a1\n  5899: a1 = 0xffffffe0\n  5909: a1 = t0 <u a1\n  5912: a3 = u64 [s1 + 0x80]\n  5916: a1 = 0 if a3 != 0\n  5918: a1 = 0 if a0 != 0\n  5920: jump @198 if a1 == 0\n      : @158 (gas: 3)\n  5924: i32 a1 = t0 + 0x20\n  5927: a0 = s1 + 0x480\n  5931: ra = 134, jump @17\n      : @159 [@dyn 67] (gas: 14)\n  5937: a2 = u64 [s1 + 0x90]\n  5941: a5 = u64 [s1 + 0x98]\n  5945: a4 = u64 [s1 + 0xa0]\n  5949: a3 = u64 [s1 + 0xa8]\n  5953: a1 = s1 + 0x400\n  5957: a0 = u64 [a1 + 0x98]\n  5961: u64 [s1 + 0x110] = a0\n  5965: a0 = u64 [a1 + 0x90]\n  5969: u64 [s1 + 0x108] = a0\n  5973: a0 = u64 [a1 + 0x88]\n  5977: u64 [s1 + 0xf8] = a0\n  5981: a0 = u64 [a1 + 0x80]\n  5985: u64 [s1 + 0x100] = a0\n  5989: fallthrough\n      : @160 (gas: 15)\n  5990: a0 = a4 >> 0x3f\n  5993: a1 = a5 << 0x1\n  5996: a0 = a0 | a1\n  5999: u64 [s1 + 0xf0] = a0\n  6003: a0 = a5 >> 0x3f\n  6006: a1 = a2 << 0x1\n  6009: a0 = a0 | a1\n  6012: u64 [s1 + 0xe8] = a0\n  6016: a0 = a3 >> 0x3f\n  6019: a1 = a4 << 0x1\n  6022: a0 = a0 | a1\n  6025: u64 [s1 + 0xe0] = a0\n  6029: a0 = a3 << 0x1\n  6032: u64 [s1 + 0xd8] = a0\n  6036: t0 = 136, jump @940\n      : @161 [@dyn 68] (gas: 1)\n  6042: ra = 138, jump @952\n      : @162 [@dyn 69] (gas: 7)\n  6048: u64 [s1 + 0xb8] = a0\n  6052: u64 [s1 + 0xd0] = a1\n  6056: a0 = u64 [s1 + 0xa8]\n  6060: i32 a2 = a0 << 0x3\n  6063: a0 = 0xffffffffffffffff\n  6066: a1 = 0xffffffffffffffff\n  6069: ra = 140, jump @947\n      : @163 [@dyn 70] (gas: 10)\n  6075: u64 [s1 + 0xc8] = a0\n  6079: u64 [s1 + 0xc0] = a1\n  6083: a1 = u64 [s1 + 0xb8]\n  6087: a0 = a0 | a1\n  6090: u64 [s1 + 0xb8] = a0\n  6094: a0 = u64 [s1 + 0x118]\n  6098: i32 a2 = a0 + 0xffffffffffffff80\n  6101: a0 = 0xffffffffffffffff\n  6104: a1 = 0xffffffffffffffff\n  6107: ra = 142, jump @947\n      : @164 [@dyn 71] (gas: 7)\n  6113: a4 = u64 [s1 + 0x118]\n  6117: a2 = a4 <u 0x80\n  6121: a3 = u64 [s1 + 0xb8]\n  6125: a0 = a3 if a2 != 0\n  6128: a5 = u64 [s1 + 0xc0]\n  6132: a3 = u64 [s1 + 0xd0]\n  6136: t0 = 144, jump @941\n      : @165 [@dyn 72] (gas: 2)\n  6142: a4 = u64 [s1 + 0xc8]\n  6146: t0 = 146, jump @917\n      : @166 [@dyn 73] (gas: 23)\n  6152: a4 = u64 [s1 + 0xd8]\n  6156: a0 = a0 | a4\n  6159: a4 = u64 [s1 + 0xe0]\n  6163: a1 = a1 | a4\n  6166: a4 = u64 [s1 + 0xe8]\n  6170: a3 = a3 | a4\n  6173: a4 = u64 [s1 + 0xf0]\n  6177: a2 = a2 | a4\n  6180: a5 = s1 + 0x7ff\n  6184: a5 = a5 + 0x99\n  6188: u64 [a5 + 104] = 0x4\n  6192: u64 [a5 + 0x98] = a2\n  6196: u64 [a5 + 0xa0] = a3\n  6200: u64 [a5 + 0x90] = a1\n  6204: u64 [a5 + 0x88] = a0\n  6208: u64 [a5 + 128] = 0\n  6212: u64 [a5 + 120] = 0\n  6215: u64 [a5 + 112] = 0\n  6218: a0 = s1 + 0x7ff\n  6222: a0 = a0 + 0x101\n  6226: a1 = s1 + 0x7ff\n  6230: a1 = a1 + 0x121\n  6234: ra = 148, jump @22\n      : @167 [@dyn 74] (gas: 9)\n  6240: a0 = 0x30110\n  6245: u64 [s1 + 0x118] = a0\n  6249: i32 a0 = a0 + 0\n  6251: u64 [s1 + 0x110] = a0\n  6255: ra = 0x96\n  6259: ecalli 3 // 'caller'\n  6261: a2 = u64 [s1 + 0x118]\n  6265: t0 = 0x98\n  6269: jump @934\n      : @168 [@dyn 75] (gas: 2)\n  6272: a2 = u64 [s1 + 0x118]\n  6276: t0 = 152, jump @934\n      : @169 [@dyn 76] (gas: 1)\n  6282: jump @227 if a0 == 0\n      : @170 (gas: 13)\n  6286: u64 [s1 + 264] = 0x152d\n  6292: a0 = 0x2c7e14af6800000\n  6302: u64 [s1 + 0x100] = a0\n  6306: a0 = s1 + 0x7ff\n  6310: a0 = a0 + 0x99\n  6314: u64 [a0 + 192] = 0\n  6318: u64 [a0 + 184] = 0\n  6322: u64 [a0 + 176] = 0\n  6326: u64 [a0 + 168] = 0x2\n  6331: a0 = s1 + 0x420\n  6335: a1 = s1 + 0x7ff\n  6339: a1 = a1 + 0x141\n  6343: ra = 154, jump @21\n      : @171 [@dyn 77] (gas: 34)\n  6349: a0 = u64 [s1 + 0x438]\n  6353: u64 [s1 + 0xf8] = a0\n  6357: t2 = u64 [s1 + 0x430]\n  6361: a3 = u64 [s1 + 0x428]\n  6365: ra = u64 [s1 + 0x420]\n  6369: a1 = sp + 0xffffffffffffffe0\n  6372: a1 = a1 & 0xffffffffffffffe0\n  6375: sp = a1\n  6377: t1 = u64 [s1 + 0x100]\n  6381: t1 = t1 + ra\n  6384: a0 = t1 <u ra\n  6387: a2 = u64 [s1 + 0x108]\n  6391: a2 = a2 + a3\n  6394: a2 = a2 + a0\n  6397: a4 = a2 ^ a3\n  6400: a5 = a2 <u a3\n  6403: a5 = a0 if a4 == 0\n  6406: t0 = u64 [0x20000]\n  6411: a0 = a3 ^ 0xffffffffffffead2\n  6415: a3 = a3 >u 0xffffffffffffead2\n  6419: a4 = t0 <u ra\n  6422: a4 = a3 if a0 != 0\n  6425: u64 [a1 + 0x8] = a2\n  6428: u64 [a1] = t1\n  6430: a5 = a5 + t2\n  6433: u64 [a1 + 0x10] = a5\n  6436: a0 = a5 <u t2\n  6439: a2 = u64 [s1 + 0xf8]\n  6443: a0 = a0 + a2\n  6446: a2 = t2 & a2\n  6449: a2 = a2 + 0x1\n  6452: a4 = 0 if a2 != 0\n  6454: u64 [a1 + 0x18] = a0\n  6457: jump @232 if a4 != 0\n      : @172 (gas: 9)\n  6461: a0 = s1 + 0x7ff\n  6465: a0 = a0 + 0x99\n  6469: u64 [a0 + 224] = 0\n  6473: u64 [a0 + 216] = 0\n  6477: u64 [a0 + 208] = 0\n  6481: u64 [a0 + 200] = 0x2\n  6486: a0 = s1 + 0x7ff\n  6490: a0 = a0 + 0x161\n  6494: ra = 156, jump @22\n      : @173 [@dyn 78] (gas: 6)\n  6500: a0 = u64 [s1 + 0x110]\n  6504: ra = 0x9e\n  6508: ecalli 3 // 'caller'\n  6510: a2 = u64 [s1 + 0x118]\n  6514: t0 = 0xa0\n  6518: jump @908\n      : @174 [@dyn 79] (gas: 2)\n  6521: a2 = u64 [s1 + 0x118]\n  6525: t0 = 160, jump @908\n      : @175 [@dyn 80] (gas: 8)\n  6531: u64 [s1 + 1048] = 0\n  6535: a2 = s1 + 0x400\n  6539: u64 [a2 + 0x10] = a1\n  6542: u64 [a2 + 0x8] = a0\n  6545: a1 = s1 + 0x400\n  6549: u64 [a2] = a3\n  6551: a0 = 0\n  6553: ra = 162, jump @19\n      : @176 [@dyn 81] (gas: 7)\n  6559: u64 [s1 + 1016] = 0\n  6563: u64 [s1 + 1008] = 0\n  6567: u64 [s1 + 1000] = 0\n  6571: a0 = 0x20\n  6574: a1 = s1 + 0x3e0\n  6578: u64 [s1 + 992] = 0\n  6582: ra = 164, jump @19\n      : @177 [@dyn 82] (gas: 6)\n  6588: a0 = sp + 0xffffffffffffffe0\n  6591: a0 = a0 & 0xffffffffffffffe0\n  6594: u64 [s1 + 0xf8] = a0\n  6598: sp = a0\n  6600: a1 = i32 [0x200fc]\n  6605: jump @179 if a1 >u 63\n      : @178 (gas: 2)\n  6609: u32 [0x200fc] = 0x40\n  6615: fallthrough\n      : @179 (gas: 13)\n  6616: a0 = sp + 0xffffffffffffffe0\n  6619: a2 = a0 & 0xffffffffffffffe0\n  6622: u64 [s1 + 0xf0] = a2\n  6626: sp = a2\n  6628: a0 = 0x20110\n  6633: i32 a0 = a0 + 0\n  6635: i32 a2 = a2 + 0\n  6637: a1 = 0x40\n  6640: ra = 0xa6\n  6644: ecalli 6 // 'hash_keccak_256'\n  6646: a3 = u64 [s1 + 0xf0]\n  6650: t0 = 0xa8\n  6654: jump @911\n      : @180 [@dyn 83] (gas: 2)\n  6657: a3 = u64 [s1 + 0xf0]\n  6661: t0 = 168, jump @911\n      : @181 [@dyn 84] (gas: 7)\n  6667: a1 = u64 [s1 + 0xf8]\n  6671: u64 [a1 + 0x18] = a3\n  6674: u64 [a1 + 0x10] = a2\n  6677: u64 [a1 + 0x8] = a4\n  6680: u64 [a1] = a0\n  6682: a0 = s1 + 0x3c0\n  6686: ra = 170, jump @21\n      : @182 [@dyn 85] (gas: 26)\n  6692: a0 = u64 [s1 + 0x3c8]\n  6696: a1 = u64 [s1 + 0x3c0]\n  6700: t0 = u64 [s1 + 0x3d8]\n  6704: a3 = u64 [s1 + 0x3d0]\n  6708: a4 = u64 [s1 + 0x108]\n  6712: a4 = a4 + a0\n  6715: a5 = u64 [s1 + 0x100]\n  6719: a5 = a5 + a1\n  6722: a1 = a5 <u a1\n  6725: a4 = a4 + a1\n  6728: a2 = a4 ^ a0\n  6731: a0 = a4 <u a0\n  6734: a0 = a1 if a2 == 0\n  6737: a0 = a0 + a3\n  6740: a1 = a0 <u a3\n  6743: a1 = a1 + t0\n  6746: a2 = s1 + 0x7ff\n  6750: a2 = a2 + 0x99\n  6754: u64 [a2 + 0xe8] = a5\n  6758: u64 [a2 + 0xf0] = a4\n  6762: u64 [a2 + 0xf8] = a0\n  6766: u64 [a2 + 0x100] = a1\n  6770: a1 = s1 + 0x7ff\n  6774: a1 = a1 + 0x181\n  6778: a0 = u64 [s1 + 0xf8]\n  6782: ra = 172, jump @22\n      : @183 [@dyn 86] (gas: 3)\n  6788: a0 = s1 + 0x3a0\n  6792: a1 = 0x40\n  6795: ra = 174, jump @17\n      : @184 [@dyn 87] (gas: 6)\n  6801: a4 = s1 + 0x300\n  6805: a0 = u64 [a4 + 0xb8]\n  6809: a1 = u64 [a4 + 0xb0]\n  6813: a2 = u64 [a4 + 0xa8]\n  6817: a3 = u64 [a4 + 0xa0]\n  6821: t0 = 176, jump @920\n      : @185 [@dyn 88] (gas: 1)\n  6827: jump @198 if a0 != 0\n      : @186 (gas: 9)\n  6831: u64 [s1 + 920] = 0\n  6835: u64 [s1 + 912] = 0\n  6839: u64 [s1 + 904] = 0x152d\n  6845: a0 = 0x2c7e14af6800000\n  6855: a1 = s1 + 0x380\n  6859: u64 [s1 + 0x380] = a0\n  6863: a0 = a3\n  6865: u64 [s1 + 0x108] = a3\n  6869: ra = 178, jump @19\n      : @187 [@dyn 89] (gas: 6)\n  6875: a0 = u64 [s1 + 0x110]\n  6879: ra = 0xb4\n  6883: ecalli 3 // 'caller'\n  6885: a2 = u64 [s1 + 0x118]\n  6889: t0 = 0xb6\n  6893: jump @937\n      : @188 [@dyn 90] (gas: 2)\n  6896: a2 = u64 [s1 + 0x118]\n  6900: t0 = 182, jump @937\n      : @189 [@dyn 91] (gas: 28)\n  6906: t0 = a1 | a0\n  6909: a3 = a3 >> 0x20\n  6912: a2 = reverse a2\n  6914: a1 = a2 << 0x20\n  6917: a1 = a1 | a3\n  6920: a2 = a2 >> 0x20\n  6923: u64 [s1 + 824] = 0\n  6927: u64 [s1 + 856] = 0\n  6931: u64 [s1 + 848] = 0\n  6935: u64 [s1 + 840] = 0\n  6939: u64 [s1 + 832] = 0\n  6943: a3 = u64 [0x20008]\n  6948: a4 = u64 [0x20010]\n  6953: a5 = u64 [0x20018]\n  6958: a0 = u64 [0x20020]\n  6963: u64 [s1 + 0x378] = a3\n  6967: u64 [s1 + 0x370] = a4\n  6971: u64 [s1 + 0x368] = a5\n  6975: u64 [s1 + 0x360] = a0\n  6979: u64 [s1 + 0x330] = a2\n  6983: u64 [s1 + 0x328] = a1\n  6987: a1 = 0x20\n  6990: a2 = s1 + 0x360\n  6994: a3 = s1 + 0x340\n  6998: a4 = s1 + 0x320\n  7002: u64 [s1 + 0x320] = t0\n  7006: a0 = u64 [s1 + 0x108]\n  7010: ra = 184, jump @23\n      : @190 [@dyn 92] (gas: 6)\n  7016: a0 = u64 [s1 + 0x110]\n  7020: ra = 0xba\n  7024: ecalli 3 // 'caller'\n  7026: a2 = u64 [s1 + 0x118]\n  7030: t0 = 0xbc\n  7034: jump @932\n      : @191 [@dyn 93] (gas: 2)\n  7037: a2 = u64 [s1 + 0x118]\n  7041: t0 = 188, jump @932\n      : @192 [@dyn 94] (gas: 18)\n  7047: u64 [s1 + 0x118] = a1\n  7051: a0 = a0 >> 0x20\n  7054: a1 = reverse a2\n  7056: a2 = a1 << 0x20\n  7059: a0 = a0 | a2\n  7062: u64 [s1 + 0x110] = a0\n  7066: a1 = a1 >> 0x20\n  7069: u64 [s1 + 0x108] = a1\n  7073: a1 = s1 + 0x7ff\n  7077: a1 = a1 + 0x99\n  7081: u64 [a1 + 288] = 0\n  7085: u64 [a1 + 280] = 0\n  7089: u64 [a1 + 272] = 0\n  7093: u64 [a1 + 264] = 0x7\n  7098: a0 = s1 + 0x300\n  7102: a1 = s1 + 0x7ff\n  7106: a1 = a1 + 0x1a1\n  7110: ra = 190, jump @21\n      : @193 [@dyn 95] (gas: 24)\n  7116: a0 = u32 [s1 + 0x314]\n  7120: a0 = a0 << 0x20\n  7123: a1 = u64 [s1 + 0x318]\n  7127: a4 = s1 + 0x100\n  7131: a2 = u64 [a4 + 0x8]\n  7134: a0 = a0 | a2\n  7137: a2 = s1 + 0x7ff\n  7141: a2 = a2 + 0x99\n  7145: u64 [a2 + 320] = 0\n  7149: u64 [a2 + 312] = 0\n  7153: u64 [a2 + 304] = 0\n  7157: a5 = a2 + 0x100\n  7161: u64 [a5 + 40] = 0x7\n  7165: u64 [a5 + 0x60] = a1\n  7168: a1 = u64 [a4 + 0x10]\n  7171: u64 [a5 + 0x50] = a1\n  7174: a1 = u64 [a4 + 0x18]\n  7177: u64 [a5 + 0x48] = a1\n  7180: u64 [a5 + 0x58] = a0\n  7183: a0 = s1 + 0x7ff\n  7187: a0 = a0 + 0x1c1\n  7191: a1 = s1 + 0x7ff\n  7195: a1 = a1 + 0x1e1\n  7199: ra = 192, jump @22\n      : @194 [@dyn 96] (gas: 15)\n  7205: a1 = s1 + 0x7ff\n  7209: a1 = a1 + 0x99\n  7213: u64 [a1 + 384] = 0\n  7217: u64 [a1 + 376] = 0\n  7221: u64 [a1 + 368] = 0\n  7225: u64 [a1 + 360] = 0x6\n  7230: u64 [a1 + 416] = 0\n  7234: u64 [a1 + 408] = 0\n  7238: u64 [a1 + 400] = 0\n  7242: u64 [a1 + 392] = 0xe10\n  7248: a0 = s1 + 0x7ff\n  7252: a0 = a0 + 0x201\n  7256: a1 = s1 + 0x7ff\n  7260: a1 = a1 + 0x221\n  7264: ra = 194, jump @22\n      : @195 [@dyn 97] (gas: 3)\n  7270: a0 = s1 + 0x2e0\n  7274: a1 = 0x40\n  7277: ra = 196, jump @17\n      : @196 [@dyn 98] (gas: 6)\n  7283: a4 = s1 + 0x200\n  7287: a3 = u64 [a4 + 0xf8]\n  7291: a1 = u64 [a4 + 0xf0]\n  7295: a2 = u64 [a4 + 0xe8]\n  7299: a0 = u64 [a4 + 0xe0]\n  7303: t0 = 198, jump @918\n      : @197 [@dyn 99] (gas: 1)\n  7309: jump @239 if a1 == 0\n      : @198 (gas: 1)\n  7313: trap\n      : @199 (gas: 6)\n  7314: a1 = 0x20110\n  7319: i32 a1 = a1 + 0\n  7321: a0 = 0x1\n  7324: a2 = 0\n  7326: ecalli 8 // 'seal_return'\n  7328: jump @203\n      : @200 (gas: 6)\n  7330: a1 = 0x20110\n  7335: i32 a1 = a1 + 0\n  7337: a0 = 0x1\n  7340: a2 = 0\n  7342: ecalli 8 // 'seal_return'\n  7344: jump @203\n      : @201 (gas: 6)\n  7346: a1 = 0x20110\n  7351: i32 a1 = a1 + 0\n  7353: a0 = 0x1\n  7356: a2 = 0\n  7358: ecalli 8 // 'seal_return'\n  7360: jump @203\n      : @202 (gas: 6)\n  7362: a1 = 0x20110\n  7367: i32 a1 = a1 + 0\n  7369: a0 = 0x1\n  7372: a2 = 0\n  7374: ecalli 8 // 'seal_return'\n  7376: fallthrough\n      : @203 (gas: 6)\n  7377: u64 [s1 + 336] = 0\n  7381: u64 [s1 + 328] = 0\n  7385: u64 [s1 + 320] = 0\n  7389: t0 = 0xc8\n  7393: a0 = 0x4e487b7100000000\n  7403: fallthrough\n      : @204 [@dyn 100] (gas: 4)\n  7404: a1 = s1 + 0x140\n  7408: u64 [s1 + 0x158] = a0\n  7412: a0 = 0\n  7414: ra = 202, jump @19\n      : @205 [@dyn 101] (gas: 7)\n  7420: u64 [s1 + 312] = 0\n  7424: u64 [s1 + 304] = 0\n  7428: u64 [s1 + 288] = 0x41\n  7433: a0 = 0x4\n  7436: a1 = s1 + 0x120\n  7440: u64 [s1 + 296] = 0\n  7444: ra = 204, jump @19\n      : @206 [@dyn 102] (gas: 2)\n  7450: a1 = i32 [0x200fc]\n  7455: jump @208 if a1 >u 63\n      : @207 (gas: 3)\n  7459: u32 [0x200fc] = 0x40\n  7465: a1 = 0x20110\n  7470: jump @238\n      : @208 (gas: 2)\n  7473: a1 = 0x20110\n  7478: jump @238\n      : @209 (gas: 6)\n  7481: u64 [s1 + 400] = 0\n  7485: u64 [s1 + 392] = 0\n  7489: u64 [s1 + 384] = 0\n  7493: t0 = 0xce\n  7497: a0 = 0x4e487b7100000000\n  7507: fallthrough\n      : @210 [@dyn 103] (gas: 4)\n  7508: a1 = s1 + 0x180\n  7512: u64 [s1 + 0x198] = a0\n  7516: a0 = 0\n  7518: ra = 208, jump @19\n      : @211 [@dyn 104] (gas: 7)\n  7524: u64 [s1 + 376] = 0\n  7528: u64 [s1 + 368] = 0\n  7532: u64 [s1 + 352] = 0x22\n  7537: a0 = 0x4\n  7540: a1 = s1 + 0x160\n  7544: u64 [s1 + 360] = 0\n  7548: ra = 210, jump @19\n      : @212 [@dyn 105] (gas: 2)\n  7554: a1 = i32 [0x200fc]\n  7559: jump @214 if a1 >u 63\n      : @213 (gas: 3)\n  7563: u32 [0x200fc] = 0x40\n  7569: a1 = 0x20110\n  7574: jump @238\n      : @214 (gas: 2)\n  7577: a1 = 0x20110\n  7582: jump @238\n      : @215 (gas: 6)\n  7585: u64 [s1 + 496] = 0\n  7589: u64 [s1 + 488] = 0\n  7593: u64 [s1 + 480] = 0\n  7597: t0 = 0xd4\n  7601: a0 = 0x4e487b7100000000\n  7611: fallthrough\n      : @216 [@dyn 106] (gas: 4)\n  7612: a1 = s1 + 0x1e0\n  7616: u64 [s1 + 0x1f8] = a0\n  7620: a0 = 0\n  7622: ra = 214, jump @19\n      : @217 [@dyn 107] (gas: 7)\n  7628: u64 [s1 + 472] = 0\n  7632: u64 [s1 + 464] = 0\n  7636: u64 [s1 + 448] = 0x41\n  7641: a0 = 0x4\n  7644: a1 = s1 + 0x1c0\n  7648: u64 [s1 + 456] = 0\n  7652: ra = 216, jump @19\n      : @218 [@dyn 108] (gas: 2)\n  7658: a1 = i32 [0x200fc]\n  7663: jump @220 if a1 >u 63\n      : @219 (gas: 3)\n  7667: u32 [0x200fc] = 0x40\n  7673: a1 = 0x20110\n  7678: jump @238\n      : @220 (gas: 2)\n  7681: a1 = 0x20110\n  7686: jump @238\n      : @221 (gas: 6)\n  7689: u64 [s1 + 560] = 0\n  7693: u64 [s1 + 552] = 0\n  7697: u64 [s1 + 544] = 0\n  7701: t0 = 0xda\n  7705: a0 = 0x4e487b7100000000\n  7715: fallthrough\n      : @222 [@dyn 109] (gas: 4)\n  7716: a1 = s1 + 0x220\n  7720: u64 [s1 + 0x238] = a0\n  7724: a0 = 0\n  7726: ra = 220, jump @19\n      : @223 [@dyn 110] (gas: 7)\n  7732: u64 [s1 + 536] = 0\n  7736: u64 [s1 + 528] = 0\n  7740: u64 [s1 + 512] = 0x22\n  7745: a0 = 0x4\n  7748: a1 = s1 + 0x200\n  7752: u64 [s1 + 520] = 0\n  7756: ra = 222, jump @19\n      : @224 [@dyn 111] (gas: 2)\n  7762: a1 = i32 [0x200fc]\n  7767: jump @226 if a1 >u 63\n      : @225 (gas: 3)\n  7771: u32 [0x200fc] = 0x40\n  7777: a1 = 0x20110\n  7782: jump @238\n      : @226 (gas: 2)\n  7785: a1 = 0x20110\n  7790: jump @238\n      : @227 (gas: 8)\n  7793: u64 [s1 + 656] = 0\n  7797: u64 [s1 + 648] = 0\n  7801: u64 [s1 + 640] = 0\n  7805: a0 = 0xec442f0500000000\n  7815: a1 = s1 + 0x280\n  7819: u64 [s1 + 0x298] = a0\n  7823: a0 = 0\n  7825: ra = 224, jump @19\n      : @228 [@dyn 112] (gas: 7)\n  7831: u64 [s1 + 632] = 0\n  7835: u64 [s1 + 624] = 0\n  7839: u64 [s1 + 616] = 0\n  7843: a0 = 0x4\n  7846: a1 = s1 + 0x260\n  7850: u64 [s1 + 608] = 0\n  7854: ra = 226, jump @19\n      : @229 [@dyn 113] (gas: 2)\n  7860: a1 = i32 [0x200fc]\n  7865: jump @231 if a1 >u 63\n      : @230 (gas: 3)\n  7869: u32 [0x200fc] = 0x40\n  7875: a1 = 0x20110\n  7880: jump @238\n      : @231 (gas: 2)\n  7882: a1 = 0x20110\n  7887: jump @238\n      : @232 (gas: 6)\n  7889: u64 [s1 + 720] = 0\n  7893: u64 [s1 + 712] = 0\n  7897: u64 [s1 + 704] = 0\n  7901: t0 = 0xe4\n  7905: a0 = 0x4e487b7100000000\n  7915: fallthrough\n      : @233 [@dyn 114] (gas: 4)\n  7916: a1 = s1 + 0x2c0\n  7920: u64 [s1 + 0x2d8] = a0\n  7924: a0 = 0\n  7926: ra = 230, jump @19\n      : @234 [@dyn 115] (gas: 7)\n  7932: u64 [s1 + 696] = 0\n  7936: u64 [s1 + 688] = 0\n  7940: u64 [s1 + 672] = 0x11\n  7945: a0 = 0x4\n  7948: a1 = s1 + 0x2a0\n  7952: u64 [s1 + 680] = 0\n  7956: ra = 232, jump @19\n      : @235 [@dyn 116] (gas: 2)\n  7962: a1 = i32 [0x200fc]\n  7967: jump @237 if a1 >u 63\n      : @236 (gas: 3)\n  7971: u32 [0x200fc] = 0x40\n  7977: a1 = 0x20110\n  7982: jump @238\n      : @237 (gas: 2)\n  7984: a1 = 0x20110\n  7989: fallthrough\n      : @238 (gas: 7)\n  7990: i32 a1 = a1 + 0\n  7992: a0 = 0x1\n  7995: a2 = 0x24\n  7998: ecalli 8 // 'seal_return'\n  8000: u64 [s1 + 0x118] = a0\n  8004: ra = 0xea\n  8008: jump @26\n      : @239 (gas: 2)\n  8011: u64 [s1 + 0x118] = a0\n  8015: ra = 234, jump @26\n      : @240 [@dyn 117] (gas: 5)\n  8021: i32 a0 = a0 + 0\n  8023: a1 = 0\n  8025: a2 = 0\n  8027: ecalli 0 // 'call_data_copy'\n  8028: jump @15\n      : @241 (gas: 3)\n  8031: a0 = u64 [s1 + 0x118]\n  8035: a1 = 0\n  8037: ra = 236, jump @26\n      : @242 [@dyn 118] (gas: 5)\n  8043: i32 a1 = a0 + 0\n  8045: a0 = 0\n  8047: a2 = 0\n  8049: ecalli 8 // 'seal_return'\n  8051: jump @203\n      : @243 [@dyn 119] (gas: 4)\n  8054: a0 = 0x200f8\n  8059: u64 [s1 + 0xf8] = a0\n  8063: a0 = i32 [0x200f8]\n  8068: jump @245 if a0 >=u 4\n      : @244 (gas: 1)\n  8072: jump @719\n      : @245 (gas: 6)\n  8075: a0 = s1 + 0x1000\n  8079: i32 a0 = a0 + 0x360\n  8083: a1 = 0\n  8085: ra = 0xf0\n  8089: ecalli 1 // 'call_data_load'\n  8091: fallthrough\n      : @246 [@dyn 120] (gas: 3)\n  8092: a2 = s1 + 0x1070\n  8096: a0 = i32 [a2 + 0x30c]\n  8100: jump @248 if a0 != 2376452955\n      : @247 (gas: 1)\n  8107: jump @497\n      : @248 (gas: 1)\n  8110: jump @363 if a0 == 2514000705\n      : @249 (gas: 1)\n  8118: jump @251 if a0 != 2835717307\n      : @250 (gas: 1)\n  8125: jump @564\n      : @251 (gas: 2)\n  8128: a3 = s1 + 0x1878\n  8132: jump @253 if a0 != 3266987844\n      : @252 (gas: 1)\n  8139: jump @521\n      : @253 (gas: 1)\n  8142: jump @286 if a0 == 3714247998\n      : @254 (gas: 1)\n  8150: jump @256 if a0 != 117300739\n      : @255 (gas: 1)\n  8157: jump @554\n      : @256 (gas: 1)\n  8160: jump @393 if a0 == 157198259\n      : @257 (gas: 1)\n  8168: jump @259 if a0 != 404098525\n      : @258 (gas: 1)\n  8175: jump @509\n      : @259 (gas: 1)\n  8178: jump @315 if a0 == 537198553\n      : @260 (gas: 1)\n  8186: jump @262 if a0 != 599290589\n      : @261 (gas: 1)\n  8193: jump @434\n      : @262 (gas: 1)\n  8196: jump @264 if a0 != 826074471\n      : @263 (gas: 1)\n  8203: jump @487\n      : @264 (gas: 1)\n  8206: jump @266 if a0 == 1789336856\n      : @265 (gas: 1)\n  8213: jump @577\n      : @266 (gas: 10)\n  8216: u64 [a2 + 1640] = 0\n  8220: u64 [a2 + 1632] = 0\n  8224: u64 [a2 + 1624] = 0\n  8228: u64 [a2 + 1616] = 0\n  8232: a0 = s1 + 0x1000\n  8236: i32 a0 = a0 + 0x6c0\n  8240: ra = 0xf2\n  8244: ecalli 11 // 'value_transferred'\n  8246: t0 = 0xf4\n  8250: jump @925\n      : @267 [@dyn 121] (gas: 1)\n  8253: t0 = 244, jump @925\n      : @268 [@dyn 122] (gas: 1)\n  8259: t0 = 246, jump @936\n      : @269 [@dyn 123] (gas: 1)\n  8265: jump @271 if a0 == 0\n      : @270 (gas: 1)\n  8268: jump @633\n      : @271 (gas: 4)\n  8271: a0 = u64 [s1 + 0xf8]\n  8275: a0 = i32 [a0]\n  8277: a1 = 0x23\n  8280: jump @273 if a1 <u a0\n      : @272 (gas: 1)\n  8283: jump @634\n      : @273 (gas: 5)\n  8286: a0 = s1 + 0x7ff\n  8290: a0 = a0 + 0x4a1\n  8294: ra = 0xf8\n  8298: t0 = 0x2fc\n  8302: jump @946\n      : @274 [@dyn 124] (gas: 14)\n  8305: a3 = s1 + 0x7ff\n  8309: a3 = a3 + 0x71\n  8312: a4 = a3 + 0x400\n  8316: a0 = u64 [a4 + 0x30]\n  8319: a1 = u64 [a4 + 0x38]\n  8322: a2 = u32 [a3 + 0x440]\n  8326: u64 [a3 + 1064] = 0\n  8330: u64 [a4 + 0x20] = a2\n  8333: u64 [a4 + 0x18] = a1\n  8336: a1 = s1 + 0x7ff\n  8340: a1 = a1 + 0x481\n  8344: u64 [a4 + 0x10] = a0\n  8347: a0 = 0\n  8349: ra = 250, jump @19\n      : @275 [@dyn 125] (gas: 11)\n  8355: a1 = s1 + 0x7ff\n  8359: a1 = a1 + 0x71\n  8362: u64 [a1 + 1032] = 0\n  8366: u64 [a1 + 1024] = 0\n  8370: u64 [a1 + 1008] = 0x5\n  8375: a2 = a1\n  8377: a0 = 0x20\n  8380: a1 = s1 + 0x7ff\n  8384: a1 = a1 + 0x461\n  8388: u64 [a2 + 1016] = 0\n  8392: ra = 252, jump @19\n      : @276 [@dyn 126] (gas: 2)\n  8398: a1 = i32 [0x200fc]\n  8403: jump @278 if a1 >u 63\n      : @277 (gas: 2)\n  8407: u32 [0x200fc] = 0x40\n  8413: fallthrough\n      : @278 (gas: 12)\n  8414: a0 = sp + 0xffffffffffffffe0\n  8417: a2 = a0 & 0xffffffffffffffe0\n  8420: u64 [s1 + 0xf8] = a2\n  8424: sp = a2\n  8426: a0 = 0x20110\n  8431: i32 a0 = a0 + 0\n  8433: i32 a2 = a2 + 0\n  8435: a1 = 0x40\n  8438: ra = 0xfe\n  8442: ecalli 6 // 'hash_keccak_256'\n  8444: t0 = 0x100\n  8448: jump @913\n      : @279 [@dyn 127] (gas: 1)\n  8451: t0 = 256, jump @913\n      : @280 [@dyn 128] (gas: 8)\n  8457: u64 [a5 + 0x88] = a3\n  8461: u64 [a5 + 0x80] = a2\n  8465: u64 [a5 + 0x78] = a1\n  8468: u64 [a5 + 0x70] = a0\n  8471: a0 = s1 + 0x7ff\n  8475: a0 = a0 + 0x441\n  8479: a1 = s1 + 0x16e0\n  8483: ra = 258, jump @21\n      : @281 [@dyn 129] (gas: 15)\n  8489: a1 = s1 + 0x7ff\n  8493: a1 = a1 + 0x71\n  8496: a2 = a1 + 0x300\n  8500: a0 = u64 [a2 + 0xe8]\n  8504: u64 [s1 + 0xf8] = a0\n  8508: a0 = u64 [a2 + 0xe0]\n  8512: u64 [s1 + 0xf0] = a0\n  8516: a0 = u64 [a2 + 0xd8]\n  8520: u64 [s1 + 0xe8] = a0\n  8524: a0 = u64 [a2 + 0xd0]\n  8528: u64 [s1 + 0xe0] = a0\n  8532: a0 = s1 + 0x7ff\n  8536: a0 = a0 + 0x421\n  8540: a1 = 0x40\n  8543: ra = 260, jump @17\n      : @282 [@dyn 130] (gas: 8)\n  8549: a3 = s1 + 0x7ff\n  8553: a3 = a3 + 0x71\n  8556: a5 = a3 + 0x300\n  8560: a0 = u64 [a5 + 0xc8]\n  8564: a1 = u64 [a5 + 0xc0]\n  8568: a2 = u64 [a5 + 0xb8]\n  8572: a4 = u64 [a5 + 0xb0]\n  8576: t0 = 262, jump @919\n      : @283 [@dyn 131] (gas: 1)\n  8582: jump @285 if a0 == 0\n      : @284 (gas: 1)\n  8585: jump @609\n      : @285 (gas: 15)\n  8588: a0 = u64 [s1 + 0xe0]\n  8592: a2 = a3 + 0x300\n  8596: u64 [a2 + 0x90] = a0\n  8600: a0 = u64 [s1 + 0xe8]\n  8604: u64 [a2 + 0x98] = a0\n  8608: a0 = u64 [s1 + 0xf0]\n  8612: u64 [a2 + 0xa0] = a0\n  8616: a1 = s1 + 0x7ff\n  8620: a1 = a1 + 0x401\n  8624: a0 = u64 [s1 + 0xf8]\n  8628: u64 [a2 + 0xa8] = a0\n  8632: a0 = a4\n  8634: u64 [s1 + 0xf8] = a4\n  8638: ra = 0x254\n  8642: jump @19\n      : @286 (gas: 9)\n  8645: u64 [a3 + 64] = 0\n  8648: u64 [a3 + 56] = 0\n  8651: u64 [a3 + 48] = 0\n  8654: u64 [a3 + 40] = 0\n  8657: a0 = s1 + 0x2000\n  8661: i32 a0 = a0 + 0xfffffffffffff8a0\n  8665: ra = 0x108\n  8669: ecalli 11 // 'value_transferred'\n  8671: fallthrough\n      : @287 [@dyn 132] (gas: 9)\n  8672: a3 = s1 + 0x1878\n  8676: a0 = u64 [a3 + 0x38]\n  8679: a1 = u64 [a3 + 0x40]\n  8682: a2 = u64 [a3 + 0x30]\n  8685: a3 = u64 [a3 + 0x28]\n  8688: a1 = a1 | a2\n  8691: a0 = a0 | a3\n  8694: a0 = a0 | a1\n  8697: jump @289 if a0 == 0\n      : @288 (gas: 1)\n  8700: jump @635\n      : @289 (gas: 4)\n  8703: a0 = u64 [s1 + 0xf8]\n  8707: a0 = i32 [a0]\n  8709: a1 = 0x43\n  8712: jump @291 if a1 <u a0\n      : @290 (gas: 1)\n  8715: jump @636\n      : @291 (gas: 6)\n  8718: a0 = 0xffffffff\n  8728: u64 [s1 + 0xf8] = a0\n  8732: a0 = s1 + 0x1320\n  8736: ra = 0x10a\n  8740: t0 = 0x2fc\n  8744: jump @946\n      : @292 [@dyn 133] (gas: 11)\n  8747: a1 = s1 + 0x1070\n  8751: a0 = u64 [a1 + 0x2b0]\n  8755: u64 [s1 + 0xf0] = a0\n  8759: a0 = u64 [a1 + 0x2b8]\n  8763: u64 [s1 + 0xd0] = a0\n  8767: a0 = u32 [a1 + 0x2c0]\n  8771: u64 [s1 + 0xc8] = a0\n  8775: a0 = s1 + 0x1300\n  8779: ra = 0x10c\n  8783: t0 = 0x306\n  8787: jump @946\n      : @293 [@dyn 134] (gas: 3)\n  8790: t0 = 0x10e\n  8794: a1 = s1 + 0x1070\n  8798: fallthrough\n      : @294 [@dyn 135] (gas: 18)\n  8799: a2 = a1 + 0x200\n  8803: a0 = u64 [a2 + 0xa0]\n  8807: u64 [s1 + 0xe8] = a0\n  8811: a0 = u64 [a2 + 0x98]\n  8815: u64 [s1 + 0xe0] = a0\n  8819: a0 = u64 [a2 + 0x90]\n  8823: u64 [s1 + 0xd8] = a0\n  8827: u64 [a1 + 648] = 0\n  8831: a0 = u64 [s1 + 0xc8]\n  8835: u64 [a2 + 0x80] = a0\n  8839: a0 = u64 [s1 + 0xd0]\n  8843: u64 [a2 + 0x78] = a0\n  8846: a2 = a1\n  8848: a1 = s1 + 0x12e0\n  8852: a0 = u64 [s1 + 0xf0]\n  8856: u64 [a2 + 0x270] = a0\n  8860: a0 = 0\n  8862: ra = 272, jump @19\n      : @295 [@dyn 136] (gas: 3)\n  8868: t0 = 0x112\n  8872: a1 = s1 + 0x1070\n  8876: fallthrough\n      : @296 [@dyn 137] (gas: 8)\n  8877: u64 [a1 + 616] = 0\n  8881: u64 [a1 + 608] = 0\n  8885: u64 [a1 + 592] = 0x1\n  8890: a2 = a1\n  8892: a0 = 0x20\n  8895: a1 = s1 + 0x12c0\n  8899: u64 [a2 + 600] = 0\n  8903: ra = 276, jump @19\n      : @297 [@dyn 138] (gas: 3)\n  8909: a1 = 0x200fc\n  8914: a0 = i32 [0x200fc]\n  8919: jump @299 if a0 >u 63\n      : @298 (gas: 2)\n  8923: u32 [0x200fc] = 0x40\n  8929: fallthrough\n      : @299 (gas: 15)\n  8930: a0 = sp + 0xffffffffffffffe0\n  8933: a2 = a0 & 0xffffffffffffffe0\n  8936: u64 [s1 + 0xc8] = a2\n  8940: sp = a2\n  8942: a0 = 0x20110\n  8947: i32 a0 = a0 + 0\n  8949: i32 a2 = a2 + 0\n  8951: u64 [s1 + 0xf0] = a1\n  8955: a1 = 0x40\n  8958: u64 [s1 + 0xd0] = a0\n  8962: ra = 0x116\n  8966: ecalli 6 // 'hash_keccak_256'\n  8968: a3 = u64 [s1 + 0xc8]\n  8972: t0 = 0x118\n  8976: jump @942\n      : @300 [@dyn 139] (gas: 2)\n  8979: a3 = u64 [s1 + 0xc8]\n  8983: t0 = 280, jump @942\n      : @301 [@dyn 140] (gas: 27)\n  8989: u64 [s1 + 0xc0] = a0\n  8993: a0 = reverse a1\n  8995: u64 [s1 + 0xb8] = a0\n  8999: a0 = reverse a2\n  9001: u64 [s1 + 0xb0] = a0\n  9005: a0 = reverse a3\n  9007: u64 [s1 + 0xa8] = a0\n  9011: a0 = sp + 0xffffffffffffffe0\n  9014: a0 = a0 & 0xffffffffffffffe0\n  9017: u64 [s1 + 0xc8] = a0\n  9021: sp = a0\n  9023: a0 = u64 [s1 + 0xd8]\n  9027: a0 = a0 & 0xffffffffffffffff\n  9030: a2 = u64 [s1 + 0xe0]\n  9034: a1 = a2 & 0xffffffffffffffff\n  9037: a2 = u64 [s1 + 0xf8]\n  9041: a3 = u64 [s1 + 0xe8]\n  9045: a2 = a2 & a3\n  9048: a3 = s1 + 0x1070\n  9052: u64 [a3 + 584] = 0\n  9056: a4 = a3 + 0x200\n  9060: u64 [a4 + 0x40] = a2\n  9063: u64 [a4 + 0x38] = a1\n  9066: a1 = s1 + 0x12a0\n  9070: u64 [a4 + 0x30] = a0\n  9073: a0 = 0\n  9075: ra = 282, jump @19\n      : @302 [@dyn 141] (gas: 14)\n  9081: a0 = u64 [s1 + 0xa8]\n  9085: a1 = s1 + 0x1070\n  9089: a2 = a1 + 0x200\n  9093: u64 [a2 + 0x28] = a0\n  9096: a0 = u64 [s1 + 0xb0]\n  9100: u64 [a2 + 0x20] = a0\n  9103: a0 = u64 [s1 + 0xb8]\n  9107: u64 [a2 + 0x18] = a0\n  9110: a3 = a1\n  9112: a0 = 0x20\n  9115: a1 = s1 + 0x1280\n  9119: a2 = u64 [s1 + 0xc0]\n  9123: u64 [a3 + 0x210] = a2\n  9127: ra = 284, jump @19\n      : @303 [@dyn 142] (gas: 3)\n  9133: a1 = u64 [s1 + 0xf0]\n  9137: a0 = i32 [a1]\n  9139: jump @305 if a0 >u 63\n      : @304 (gas: 3)\n  9143: u32 [a1 + 0] = 0x40\n  9146: t0 = 0x11e\n  9150: jump @935\n      : @305 (gas: 1)\n  9153: t0 = 286, jump @935\n      : @306 [@dyn 143] (gas: 5)\n  9159: ra = 0x120\n  9163: ecalli 6 // 'hash_keccak_256'\n  9165: a3 = u64 [s1 + 0xf8]\n  9169: t0 = 0x122\n  9173: jump @911\n      : @307 [@dyn 144] (gas: 2)\n  9176: a3 = u64 [s1 + 0xf8]\n  9180: t0 = 290, jump @911\n      : @308 [@dyn 145] (gas: 7)\n  9186: a1 = u64 [s1 + 0xc8]\n  9190: u64 [a1 + 0x18] = a3\n  9193: u64 [a1 + 0x10] = a2\n  9196: u64 [a1 + 0x8] = a4\n  9199: u64 [a1] = a0\n  9201: a0 = s1 + 0x1260\n  9205: ra = 292, jump @21\n      : @309 [@dyn 146] (gas: 3)\n  9211: t0 = 0x126\n  9215: a1 = s1 + 0x1070\n  9219: fallthrough\n      : @310 [@dyn 147] (gas: 11)\n  9220: a0 = u64 [a1 + 0x208]\n  9224: u64 [s1 + 0xf8] = a0\n  9228: a0 = u64 [a1 + 0x200]\n  9232: u64 [s1 + 0xf0] = a0\n  9236: a0 = u64 [a1 + 0x1f8]\n  9240: u64 [s1 + 0xe8] = a0\n  9244: a0 = u64 [a1 + 0x1f0]\n  9248: u64 [s1 + 0xe0] = a0\n  9252: a0 = s1 + 0x1240\n  9256: a1 = 0x40\n  9259: ra = 296, jump @17\n      : @311 [@dyn 148] (gas: 7)\n  9265: a3 = s1 + 0x1070\n  9269: a5 = a3 + 0x100\n  9273: a0 = u64 [a5 + 0xe8]\n  9277: a1 = u64 [a5 + 0xe0]\n  9281: a2 = u64 [a5 + 0xd8]\n  9285: a4 = u64 [a5 + 0xd0]\n  9289: t0 = 298, jump @919\n      : @312 [@dyn 149] (gas: 1)\n  9295: jump @314 if a0 == 0\n      : @313 (gas: 1)\n  9298: jump @609\n      : @314 (gas: 14)\n  9301: a0 = u64 [s1 + 0xe0]\n  9305: a2 = a3 + 0x100\n  9309: u64 [a2 + 0xb0] = a0\n  9313: a0 = u64 [s1 + 0xe8]\n  9317: u64 [a2 + 0xb8] = a0\n  9321: a0 = u64 [s1 + 0xf0]\n  9325: u64 [a2 + 0xc0] = a0\n  9329: a1 = s1 + 0x1220\n  9333: a0 = u64 [s1 + 0xf8]\n  9337: u64 [a2 + 0xc8] = a0\n  9341: a0 = a4\n  9343: u64 [s1 + 0xf8] = a4\n  9347: ra = 0x254\n  9351: jump @19\n      : @315 (gas: 10)\n  9354: u64 [a2 + 1000] = 0\n  9358: u64 [a2 + 992] = 0\n  9362: u64 [a2 + 984] = 0\n  9366: u64 [a2 + 976] = 0\n  9370: a0 = s1 + 0x1000\n  9374: i32 a0 = a0 + 0x440\n  9378: ra = 0x12c\n  9382: ecalli 11 // 'value_transferred'\n  9384: t0 = 0x12e\n  9388: jump @924\n      : @316 [@dyn 150] (gas: 1)\n  9391: t0 = 302, jump @924\n      : @317 [@dyn 151] (gas: 1)\n  9397: t0 = 304, jump @926\n      : @318 [@dyn 152] (gas: 1)\n  9403: jump @320 if a0 == 0\n      : @319 (gas: 1)\n  9406: jump @637\n      : @320 (gas: 3)\n  9409: a0 = u64 [s1 + 0xf8]\n  9413: a0 = i32 [a0]\n  9415: jump @322 if a0 >u 3\n      : @321 (gas: 1)\n  9419: jump @638\n      : @322 (gas: 9)\n  9422: a0 = 0x30110\n  9427: u64 [s1 + 0xf0] = a0\n  9431: i32 a0 = a0 + 0\n  9433: u64 [s1 + 0xe0] = a0\n  9437: ra = 0x132\n  9441: ecalli 3 // 'caller'\n  9443: a2 = u64 [s1 + 0xf0]\n  9447: t0 = 0x134\n  9451: jump @908\n      : @323 [@dyn 153] (gas: 2)\n  9454: a2 = u64 [s1 + 0xf0]\n  9458: t0 = 308, jump @908\n      : @324 [@dyn 154] (gas: 7)\n  9464: u64 [s1 + 1944] = 0\n  9468: u64 [s1 + 0x790] = a1\n  9472: u64 [s1 + 0x788] = a0\n  9476: a1 = s1 + 0x780\n  9480: u64 [s1 + 0x780] = a3\n  9484: a0 = 0\n  9486: ra = 310, jump @19\n      : @325 [@dyn 155] (gas: 7)\n  9492: u64 [s1 + 1912] = 0\n  9496: u64 [s1 + 1904] = 0\n  9500: u64 [s1 + 1888] = 0x5\n  9505: a0 = 0x20\n  9508: a1 = s1 + 0x760\n  9512: u64 [s1 + 1896] = 0\n  9516: ra = 312, jump @19\n      : @326 [@dyn 156] (gas: 4)\n  9522: a0 = 0x200fc\n  9527: u64 [s1 + 0xf8] = a0\n  9531: a0 = i32 [0x200fc]\n  9536: jump @328 if a0 >u 63\n      : @327 (gas: 3)\n  9540: a1 = u64 [s1 + 0xf8]\n  9544: u32 [a1 + 0] = 0x40\n  9547: fallthrough\n      : @328 (gas: 27)\n  9548: a0 = sp + 0xffffffffffffffe0\n  9551: a2 = a0 & 0xffffffffffffffe0\n  9554: u64 [s1 + 0xd8] = a2\n  9558: sp = a2\n  9560: a0 = 0x20110\n  9565: i32 a0 = a0 + 0\n  9567: i32 a2 = a2 + 0\n  9569: a1 = 0x40\n  9572: u64 [s1 + 0xe8] = a0\n  9576: ecalli 6 // 'hash_keccak_256'\n  9578: a3 = u64 [s1 + 0xd8]\n  9582: a0 = u64 [a3 + 0x18]\n  9585: a1 = u64 [a3 + 0x10]\n  9588: a2 = u64 [a3 + 0x8]\n  9591: a3 = u64 [a3]\n  9593: a0 = reverse a0\n  9595: a1 = reverse a1\n  9597: a2 = reverse a2\n  9599: a3 = reverse a3\n  9601: a4 = s1 + 0x1070\n  9605: u64 [a4 + 0x408] = a3\n  9609: u64 [a4 + 0x400] = a2\n  9613: u64 [a4 + 0x3f8] = a1\n  9617: u64 [a4 + 0x3f0] = a0\n  9621: a0 = s1 + 0x740\n  9625: a1 = s1 + 0x1460\n  9629: ra = 314, jump @21\n      : @329 [@dyn 157] (gas: 9)\n  9635: a4 = s1 + 0x700\n  9639: a0 = u64 [a4 + 0x50]\n  9642: a1 = u64 [a4 + 0x58]\n  9645: a2 = u64 [a4 + 0x48]\n  9648: a3 = u64 [a4 + 0x40]\n  9651: a1 = a1 | a2\n  9654: a0 = a0 | a3\n  9657: a0 = a0 | a1\n  9660: jump @331 if a0 != 0\n      : @330 (gas: 1)\n  9663: jump @618\n      : @331 (gas: 6)\n  9666: a0 = u64 [s1 + 0xe0]\n  9670: ra = 0x13c\n  9674: ecalli 3 // 'caller'\n  9676: a2 = u64 [s1 + 0xf0]\n  9680: t0 = 0x13e\n  9684: jump @908\n      : @332 [@dyn 158] (gas: 2)\n  9687: a2 = u64 [s1 + 0xf0]\n  9691: t0 = 318, jump @908\n      : @333 [@dyn 159] (gas: 7)\n  9697: u64 [s1 + 1848] = 0\n  9701: u64 [s1 + 0x730] = a1\n  9705: u64 [s1 + 0x728] = a0\n  9709: a1 = s1 + 0x720\n  9713: u64 [s1 + 0x720] = a3\n  9717: a0 = 0\n  9719: ra = 320, jump @19\n      : @334 [@dyn 160] (gas: 7)\n  9725: u64 [s1 + 1816] = 0\n  9729: u64 [s1 + 1808] = 0\n  9733: u64 [s1 + 1792] = 0x5\n  9738: a0 = 0x20\n  9741: a1 = s1 + 0x700\n  9745: u64 [s1 + 1800] = 0\n  9749: ra = 322, jump @19\n      : @335 [@dyn 161] (gas: 3)\n  9755: a0 = u64 [s1 + 0xf8]\n  9759: a0 = i32 [a0]\n  9761: jump @337 if a0 >u 63\n      : @336 (gas: 3)\n  9765: a1 = u64 [s1 + 0xf8]\n  9769: u32 [a1 + 0] = 0x40\n  9772: fallthrough\n      : @337 (gas: 12)\n  9773: a0 = sp + 0xffffffffffffffe0\n  9776: a0 = a0 & 0xffffffffffffffe0\n  9779: u64 [s1 + 0xd8] = a0\n  9783: sp = a0\n  9785: i32 a2 = a0 + 0\n  9787: a1 = 0x40\n  9790: a0 = u64 [s1 + 0xe8]\n  9794: ra = 0x144\n  9798: ecalli 6 // 'hash_keccak_256'\n  9800: a3 = u64 [s1 + 0xd8]\n  9804: t0 = 0x146\n  9808: jump @916\n      : @338 [@dyn 162] (gas: 2)\n  9811: a3 = u64 [s1 + 0xd8]\n  9815: t0 = 326, jump @916\n      : @339 [@dyn 163] (gas: 7)\n  9821: u64 [a5 + 0x28] = a3\n  9824: u64 [a5 + 0x20] = a2\n  9827: u64 [a5 + 0x18] = a1\n  9830: u64 [a5 + 0x10] = a0\n  9833: a0 = s1 + 0x6e0\n  9837: a1 = s1 + 0x1480\n  9841: ra = 328, jump @21\n      : @340 [@dyn 164] (gas: 16)\n  9847: a0 = u64 [s1 + 0x6e0]\n  9851: u64 [s1 + 0xd8] = a0\n  9855: a0 = u64 [s1 + 0x6e8]\n  9859: u64 [s1 + 0xd0] = a0\n  9863: a0 = u64 [s1 + 0x6f0]\n  9867: u64 [s1 + 0xc8] = a0\n  9871: a0 = u64 [s1 + 0x6f8]\n  9875: u64 [s1 + 0xc0] = a0\n  9879: a1 = s1 + 0x1070\n  9883: u64 [a1 + 1096] = 0\n  9887: u64 [a1 + 1088] = 0\n  9891: u64 [a1 + 1080] = 0\n  9895: u64 [a1 + 1072] = 0x6\n  9900: a0 = s1 + 0x6c0\n  9904: a1 = s1 + 0x14a0\n  9908: ra = 330, jump @21\n      : @341 [@dyn 165] (gas: 20)\n  9914: a0 = u64 [s1 + 0x6c0]\n  9918: a1 = u64 [s1 + 0x6c8]\n  9922: a2 = u64 [s1 + 0x6d0]\n  9926: a3 = u64 [s1 + 0x6d8]\n  9930: u64 [s1 + 0x678] = a3\n  9934: u64 [s1 + 0x670] = a2\n  9938: u64 [s1 + 0x668] = a1\n  9942: u64 [s1 + 0x660] = a0\n  9946: a0 = u64 [s1 + 0xc0]\n  9950: u64 [s1 + 0x698] = a0\n  9954: a0 = u64 [s1 + 0xc8]\n  9958: u64 [s1 + 0x690] = a0\n  9962: a0 = u64 [s1 + 0xd0]\n  9966: u64 [s1 + 0x688] = a0\n  9970: a0 = s1 + 0x6a0\n  9974: a1 = s1 + 0x680\n  9978: a2 = s1 + 0x660\n  9982: a3 = u64 [s1 + 0xd8]\n  9986: u64 [s1 + 0x680] = a3\n  9990: ra = 332, jump @813\n      : @342 [@dyn 166] (gas: 13)\n  9996: a1 = s1 + 0x600\n 10000: a0 = u64 [a1 + 0xa0]\n 10004: u64 [s1 + 0xd8] = a0\n 10008: a0 = u64 [a1 + 0xa8]\n 10012: u64 [s1 + 0xd0] = a0\n 10016: a0 = u64 [a1 + 0xb0]\n 10020: u64 [s1 + 0xc8] = a0\n 10024: a0 = u64 [a1 + 0xb8]\n 10028: u64 [s1 + 0xc0] = a0\n 10032: a0 = s1 + 0x1000\n 10036: i32 a0 = a0 + 0x4c0\n 10040: ecalli 7 // 'now'\n 10042: fallthrough\n      : @343 (gas: 22)\n 10043: a3 = s1 + 0x1070\n 10047: a1 = a3 + 0x400\n 10051: a0 = u64 [a1 + 0x68]\n 10054: t0 = u64 [a3 + 0x450]\n 10058: a2 = u64 [a1 + 0x60]\n 10061: a3 = u64 [a1 + 0x58]\n 10064: a1 = u64 [s1 + 0xc0]\n 10068: a4 = a0 ^ a1\n 10071: a1 = a1 <u a0\n 10074: a0 = u64 [s1 + 0xc8]\n 10078: a5 = a0 <u a2\n 10081: a5 = a1 if a4 != 0\n 10084: a1 = u64 [s1 + 0xd0]\n 10088: t1 = a3 ^ a1\n 10091: a3 = a1 <u a3\n 10094: a1 = u64 [s1 + 0xd8]\n 10098: a1 = a1 <u t0\n 10101: a1 = a3 if t1 != 0\n 10104: a0 = a0 ^ a2\n 10107: a0 = a0 | a4\n 10110: a1 = a5 if a0 != 0\n 10113: jump @345 if a1 == 0\n      : @344 (gas: 1)\n 10116: jump @618\n      : @345 (gas: 3)\n 10119: a0 = s1 + 0x640\n 10123: a1 = 0x40\n 10126: ra = 334, jump @17\n      : @346 [@dyn 167] (gas: 13)\n 10132: a1 = s1 + 0x600\n 10136: a4 = u64 [a1 + 0x58]\n 10139: a5 = u64 [a1 + 0x50]\n 10142: a3 = u64 [a1 + 0x48]\n 10145: a0 = u64 [a1 + 0x40]\n 10148: a2 = a3 | a4\n 10151: a1 = a0 | a5\n 10154: a1 = a1 | a2\n 10157: a1 = a1 >> 0x20\n 10160: a2 = a2 | a5\n 10163: a2 = a2 << 0x20\n 10166: a1 = a1 | a2\n 10169: jump @348 if a1 == 0\n      : @347 (gas: 1)\n 10172: jump @609\n      : @348 (gas: 11)\n 10175: u64 [s1 + 1584] = 0\n 10179: u64 [s1 + 1576] = 0\n 10183: u64 [s1 + 1568] = 0\n 10187: a2 = 0x8c379a000000000\n 10197: a1 = s1 + 0x620\n 10201: u64 [s1 + 0x638] = a2\n 10205: u64 [s1 + 0xf8] = a0\n 10209: u64 [s1 + 0xf0] = a3\n 10213: u64 [s1 + 0xe8] = a4\n 10217: u64 [s1 + 0xe0] = a5\n 10221: ra = 336, jump @19\n      : @349 [@dyn 168] (gas: 11)\n 10227: a1 = u64 [s1 + 0xf8]\n 10231: a0 = u64 [s1 + 0xe8]\n 10235: a3 = u64 [s1 + 0xe0]\n 10239: a3 = a3 | a0\n 10242: a4 = 0x100000000\n 10252: a0 = 0xfffffffc\n 10262: a0 = a1 <u a0\n 10265: a2 = u64 [s1 + 0xf0]\n 10269: a0 = 0 if a2 != 0\n 10271: a0 = 0 if a3 != 0\n 10273: jump @351 if a0 != 0\n      : @350 (gas: 1)\n 10276: jump @609\n      : @351 (gas: 9)\n 10279: i32 a0 = a1 + 0x4\n 10282: u64 [s1 + 1560] = 0\n 10286: u64 [s1 + 1552] = 0\n 10290: u64 [s1 + 1536] = 0x20\n 10295: a1 = s1 + 0x600\n 10299: u64 [s1 + 1544] = 0\n 10303: u64 [s1 + 0xe8] = a3\n 10307: u64 [s1 + 0xe0] = a4\n 10311: ra = 338, jump @19\n      : @352 [@dyn 169] (gas: 9)\n 10317: a1 = u64 [s1 + 0xf8]\n 10321: a0 = u64 [s1 + 0xe0]\n 10325: a0 = a0 + 0xffffffffffffffdc\n 10328: a0 = a1 <u a0\n 10331: a2 = u64 [s1 + 0xf0]\n 10335: a0 = 0 if a2 != 0\n 10337: a2 = u64 [s1 + 0xe8]\n 10341: a0 = 0 if a2 != 0\n 10343: jump @354 if a0 != 0\n      : @353 (gas: 1)\n 10346: jump @609\n      : @354 (gas: 7)\n 10349: i32 a0 = a1 + 0x24\n 10352: u64 [s1 + 1528] = 0\n 10356: u64 [s1 + 1520] = 0\n 10360: u64 [s1 + 1504] = 0x26\n 10365: a1 = s1 + 0x5e0\n 10369: u64 [s1 + 1512] = 0\n 10373: ra = 340, jump @19\n      : @355 [@dyn 170] (gas: 9)\n 10379: a4 = u64 [s1 + 0xe8]\n 10383: a3 = u64 [s1 + 0xf0]\n 10387: a1 = u64 [s1 + 0xf8]\n 10391: a2 = 0x100000000\n 10401: a0 = 0xffffffbc\n 10411: a0 = a1 <u a0\n 10414: a0 = 0 if a3 != 0\n 10416: a0 = 0 if a4 != 0\n 10418: jump @357 if a0 != 0\n      : @356 (gas: 1)\n 10421: jump @609\n      : @357 (gas: 13)\n 10424: i32 a0 = a1 + 0x44\n 10427: a1 = u64 [0x20048]\n 10432: a4 = s1 + 0x500\n 10436: u64 [a4 + 0xd8] = a1\n 10440: a1 = u64 [0x20050]\n 10445: u64 [s1 + 0xe0] = a2\n 10449: a2 = u64 [0x20058]\n 10454: a3 = u64 [0x20060]\n 10459: u64 [a4 + 0xd0] = a1\n 10463: u64 [a4 + 0xc8] = a2\n 10467: a1 = s1 + 0x5c0\n 10471: u64 [a4 + 0xc0] = a3\n 10475: ra = 342, jump @19\n      : @358 [@dyn 171] (gas: 9)\n 10481: a2 = u64 [s1 + 0xf8]\n 10485: a0 = u64 [s1 + 0xe0]\n 10489: a0 = a0 + 0xffffffffffffff9c\n 10492: a0 = a2 <u a0\n 10495: a1 = u64 [s1 + 0xf0]\n 10499: a0 = 0 if a1 != 0\n 10501: a1 = u64 [s1 + 0xe8]\n 10505: a0 = 0 if a1 != 0\n 10507: jump @360 if a0 != 0\n      : @359 (gas: 1)\n 10510: jump @609\n      : @360 (gas: 8)\n 10513: i32 a0 = a2 + 0x64\n 10516: a1 = u64 [0x20068]\n 10521: u64 [s1 + 1456] = 0\n 10525: u64 [s1 + 1448] = 0\n 10529: u64 [s1 + 0x5b8] = a1\n 10533: a1 = s1 + 0x5a0\n 10537: u64 [s1 + 1440] = 0\n 10541: ra = 344, jump @19\n      : @361 [@dyn 172] (gas: 3)\n 10547: a1 = 0x84\n 10551: a0 = u64 [s1 + 0xf8]\n 10555: ra = 346, jump @26\n      : @362 [@dyn 173] (gas: 5)\n 10561: i32 a1 = a0 + 0\n 10563: a0 = 0x1\n 10566: a2 = 0x84\n 10570: ecalli 8 // 'seal_return'\n 10572: fallthrough\n      : @363 (gas: 10)\n 10573: u64 [a2 + 1832] = 0\n 10577: u64 [a2 + 1824] = 0\n 10581: u64 [a2 + 1816] = 0\n 10585: u64 [a2 + 1808] = 0\n 10589: a0 = s1 + 0x1000\n 10593: i32 a0 = a0 + 0x780\n 10597: ra = 0x15c\n 10601: ecalli 11 // 'value_transferred'\n 10603: t0 = 0x15e\n 10607: jump @939\n      : @364 [@dyn 174] (gas: 1)\n 10610: t0 = 350, jump @939\n      : @365 [@dyn 175] (gas: 8)\n 10616: a0 = u64 [a4 + 0x20]\n 10619: a1 = u64 [a4 + 0x28]\n 10622: a2 = u64 [a4 + 0x18]\n 10625: a3 = u64 [a4 + 0x10]\n 10628: a1 = a1 | a2\n 10631: a0 = a0 | a3\n 10634: a0 = a0 | a1\n 10637: jump @367 if a0 == 0\n      : @366 (gas: 1)\n 10640: jump @639\n      : @367 (gas: 3)\n 10643: a0 = u64 [s1 + 0xf8]\n 10647: a0 = i32 [a0]\n 10649: jump @369 if a0 >u 3\n      : @368 (gas: 1)\n 10653: jump @640\n      : @369 (gas: 4)\n 10656: a0 = s1 + 0x7ff\n 10660: a0 = a0 + 0x7a1\n 10664: a1 = 0x40\n 10667: ra = 352, jump @17\n      : @370 [@dyn 176] (gas: 20)\n 10673: a1 = s1 + 0x7ff\n 10677: a1 = a1 + 0x71\n 10680: a2 = a1 + 0x700\n 10684: a0 = u64 [a2 + 0x48]\n 10687: u64 [s1 + 0x58] = a0\n 10690: a0 = u64 [a2 + 0x40]\n 10693: u64 [s1 + 0x68] = a0\n 10696: a0 = u64 [a2 + 0x38]\n 10699: u64 [s1 + 0x60] = a0\n 10702: a0 = u64 [a2 + 0x30]\n 10705: u64 [s1 + 0x70] = a0\n 10708: a1 = s1 + 0x1070\n 10712: u64 [a1 + 1864] = 0\n 10716: u64 [a1 + 1856] = 0\n 10720: u64 [a1 + 1848] = 0\n 10724: u64 [a1 + 1840] = 0x4\n 10729: a0 = s1 + 0x7ff\n 10733: a0 = a0 + 0x781\n 10737: a1 = s1 + 0x17a0\n 10741: ra = 354, jump @21\n      : @371 [@dyn 177] (gas: 36)\n 10747: a0 = s1 + 0x7ff\n 10751: a0 = a0 + 0x71\n 10754: t2 = u64 [a0 + 0x720]\n 10758: ra = u64 [a0 + 0x718]\n 10762: t1 = u64 [a0 + 0x728]\n 10766: a4 = u64 [a0 + 0x710]\n 10770: a0 = t2 << 0x3f\n 10773: a1 = ra >> 0x1\n 10776: a0 = a0 | a1\n 10779: a1 = t1 << 0x3f\n 10782: a2 = t2 >> 0x1\n 10785: a1 = a1 | a2\n 10788: a2 = ra << 0x3f\n 10791: a3 = a4 >> 0x1\n 10794: a5 = a3 | a2\n 10797: a2 = t1 >> 0x1\n 10800: u64 [s1 + 0xf0] = a4\n 10804: a4 = a4 & 0x1\n 10807: a3 = -a4\n 10809: a1 = a1 & a3\n 10812: t0 = a3 & a0\n 10815: a2 = a2 & a3\n 10818: a0 = a5 & 0x7f\n 10821: u64 [s1 + 0xe8] = a0\n 10825: a5 = a0 if a4 == 0\n 10828: u64 [s1 + 0xb0] = a5\n 10832: a0 = a5 <u 0x20\n 10835: u64 [s1 + 0xa0] = t0\n 10839: a0 = 0 if t0 != 0\n 10841: u64 [s1 + 0xa8] = a1\n 10845: u64 [s1 + 0x98] = a2\n 10849: a1 = a1 | a2\n 10852: a0 = 0 if a1 != 0\n 10854: u64 [s1 + 0xf8] = a4\n 10858: a1 = a4 <u 0x1\n 10861: jump @373 if a1 == a0\n      : @372 (gas: 1)\n 10864: jump @641\n      : @373 (gas: 12)\n 10867: a2 = u64 [s1 + 0x68]\n 10870: a3 = u64 [s1 + 0x70]\n 10873: a0 = a3 | a2\n 10876: a1 = u64 [s1 + 0x60]\n 10879: a4 = u64 [s1 + 0x58]\n 10882: a1 = a1 | a4\n 10885: a0 = a0 | a1\n 10888: a0 = a0 >> 0x20\n 10891: a1 = a1 | a2\n 10894: a1 = a1 << 0x20\n 10897: a1 = a1 | a0\n 10900: jump @375 if a1 == 0\n      : @374 (gas: 1)\n 10903: jump @609\n      : @375 (gas: 17)\n 10906: a0 = a3\n 10908: u64 [s1 + 0xd0] = ra\n 10912: u64 [s1 + 0xd8] = t2\n 10916: u64 [s1 + 0xe0] = t1\n 10920: a1 = u64 [s1 + 0xb0]\n 10924: a3 = s1 + 0x7ff\n 10928: a3 = a3 + 0x71\n 10931: u64 [a3 + 0x6f0] = a1\n 10935: a1 = u64 [s1 + 0xa0]\n 10939: u64 [a3 + 0x6f8] = a1\n 10943: a1 = u64 [s1 + 0xa8]\n 10947: u64 [a3 + 0x700] = a1\n 10951: a1 = s1 + 0x7ff\n 10955: a1 = a1 + 0x761\n 10959: a2 = u64 [s1 + 0x98]\n 10963: u64 [a3 + 0x708] = a2\n 10967: ra = 356, jump @19\n      : @376 [@dyn 178] (gas: 2)\n 10973: a0 = u64 [s1 + 0xf8]\n 10977: jump @378 if a0 == 0\n      : @377 (gas: 1)\n 10980: jump @610\n      : @378 (gas: 10)\n 10983: a0 = u64 [s1 + 0x68]\n 10986: a1 = u64 [s1 + 0x58]\n 10989: a0 = a0 | a1\n 10992: a1 = 0xffffffe0\n 11002: a3 = u64 [s1 + 0x70]\n 11005: a1 = a3 <u a1\n 11008: a2 = u64 [s1 + 0x60]\n 11011: a1 = 0 if a2 != 0\n 11013: a1 = 0 if a0 != 0\n 11015: jump @380 if a1 != 0\n      : @379 (gas: 1)\n 11018: jump @609\n      : @380 (gas: 16)\n 11021: a1 = u64 [s1 + 0xf0]\n 11025: a1 = a1 & 0xffffffffffffff00\n 11029: i32 a0 = a3 + 0x20\n 11032: a2 = s1 + 0x7ff\n 11036: a2 = a2 + 0x71\n 11039: a3 = u64 [s1 + 0xd0]\n 11043: a4 = a2 + 0x600\n 11047: u64 [a4 + 0x78] = a3\n 11050: u64 [a4 + 0x70] = a1\n 11053: a1 = u64 [s1 + 0xd8]\n 11057: u64 [a4 + 0x80] = a1\n 11061: a1 = s1 + 0x7ff\n 11065: a1 = a1 + 0x6e1\n 11069: a3 = u64 [s1 + 0xe0]\n 11073: u64 [a4 + 0x88] = a3\n 11077: ra = 358, jump @19\n      : @381 [@dyn 179] (gas: 8)\n 11083: t2 = 0\n 11085: t1 = 0\n 11087: u64 [s1 + 240] = 0\n 11091: a0 = u64 [s1 + 0xe8]\n 11095: a0 = a0 >u 0\n 11097: a0 = a0 << 0x5\n 11100: u64 [s1 + 0xf8] = a0\n 11104: fallthrough\n      : @382 (gas: 37)\n 11105: a1 = u64 [s1 + 0xf8]\n 11109: a0 = a1 + 0x3f\n 11112: a1 = a0 <u a1\n 11115: a2 = t2 + a1\n 11118: a0 = a0 & 0xffffffffffffffe0\n 11121: ra = u64 [s1 + 0x70]\n 11124: ra = ra + a0\n 11127: u64 [s1 + 0xf8] = ra\n 11131: a0 = ra <u a0\n 11134: t0 = u64 [s1 + 0x60]\n 11137: a3 = a2 + t0\n 11140: ra = a3 + a0\n 11143: a3 = ra ^ a2\n 11146: a4 = ra <u a2\n 11149: a4 = a0 if a3 == 0\n 11152: a0 = a2 <u t2\n 11155: a0 = a1 if a1 == 0\n 11158: a0 = a0 + t1\n 11161: a1 = a0 <u t1\n 11164: a2 = u64 [s1 + 0x68]\n 11167: a2 = a2 + a0\n 11170: a4 = a4 + a2\n 11173: a0 = a2 <u a0\n 11176: a2 = a4 <u a2\n 11179: t1 = u64 [s1 + 0x58]\n 11182: a3 = u64 [s1 + 0xf0]\n 11186: a3 = a3 + t1\n 11189: a1 = a1 + a3\n 11192: a0 = a0 + a1\n 11195: a5 = a0 + a2\n 11198: a0 = a5 >u 0\n 11200: a1 = a4 >u 0\n 11202: a1 = a0 if a5 != 0\n 11205: a0 = a4 | a5\n 11208: a2 = ra >u 0\n 11210: a2 = a1 if a0 != 0\n 11213: jump @384 if a2 == 0\n      : @383 (gas: 1)\n 11216: jump @690\n      : @384 (gas: 15)\n 11219: a0 = u64 [s1 + 0x70]\n 11222: a1 = u64 [s1 + 0xf8]\n 11226: a0 = a1 <u a0\n 11229: a1 = ra ^ t0\n 11232: a2 = ra <u t0\n 11235: a2 = a0 if a1 == 0\n 11238: a0 = u64 [s1 + 0x68]\n 11241: t2 = a4 <u a0\n 11244: a1 = a5 ^ t1\n 11247: a3 = a5 <u t1\n 11250: a3 = t2 if a1 == 0\n 11253: a0 = a0 ^ a4\n 11256: a0 = a0 | a1\n 11259: a3 = a2 if a0 == 0\n 11262: jump @386 if a3 == 0\n      : @385 (gas: 1)\n 11265: jump @690\n      : @386 (gas: 15)\n 11268: a2 = s1 + 0x7ff\n 11272: a2 = a2 + 0x71\n 11275: a0 = u64 [s1 + 0xf8]\n 11279: a3 = a2 + 0x600\n 11283: u64 [a3 + 0x50] = a0\n 11286: u64 [a2 + 0x658] = ra\n 11290: u64 [a3 + 0x60] = a4\n 11293: a0 = 0x40\n 11296: a1 = s1 + 0x7ff\n 11300: a1 = a1 + 0x6c1\n 11304: u64 [a3 + 0x68] = a5\n 11307: u64 [s1 + 0xe8] = ra\n 11311: u64 [s1 + 0xe0] = a4\n 11315: u64 [s1 + 0xf0] = a5\n 11319: ra = 360, jump @19\n      : @387 [@dyn 180] (gas: 27)\n 11325: a1 = s1 + 0x7ff\n 11329: a1 = a1 + 0x71\n 11332: a0 = u64 [s1 + 0x58]\n 11335: a2 = a1 + 0x600\n 11339: u64 [a2 + 0x8] = a0\n 11342: a0 = u64 [s1 + 0x68]\n 11345: u64 [a2] = a0\n 11347: a0 = u64 [s1 + 0x60]\n 11350: u64 [a1 + 0x5f8] = a0\n 11354: a0 = u64 [s1 + 0x70]\n 11357: u64 [a1 + 0x5f0] = a0\n 11361: a0 = u64 [s1 + 0xf0]\n 11365: u64 [a2 + 0x28] = a0\n 11368: a0 = u64 [s1 + 0xe0]\n 11372: u64 [a2 + 0x20] = a0\n 11375: a0 = u64 [s1 + 0xe8]\n 11379: u64 [a2 + 0x18] = a0\n 11382: a4 = a1\n 11384: a0 = s1 + 0x7ff\n 11388: a0 = a0 + 0x6a1\n 11392: a1 = s1 + 0x7ff\n 11396: a1 = a1 + 0x681\n 11400: a2 = s1 + 0x7ff\n 11404: a2 = a2 + 0x661\n 11408: a3 = u64 [s1 + 0xf8]\n 11412: u64 [a4 + 0x610] = a3\n 11416: ra = 362, jump @784\n      : @388 [@dyn 181] (gas: 12)\n 11422: a3 = u64 [s1 + 0xe0]\n 11426: a4 = u64 [s1 + 0xe8]\n 11430: t0 = u64 [s1 + 0xf8]\n 11434: a0 = t0 | a3\n 11437: a1 = u64 [s1 + 0xf0]\n 11441: a1 = a1 | a4\n 11444: a0 = a0 | a1\n 11447: a0 = a0 >> 0x20\n 11450: a1 = a1 | a3\n 11453: a1 = a1 << 0x20\n 11456: a0 = a0 | a1\n 11459: jump @390 if a0 == 0\n      : @389 (gas: 1)\n 11462: jump @609\n      : @390 (gas: 33)\n 11465: a1 = s1 + 0x7ff\n 11469: a1 = a1 + 0x71\n 11472: a5 = a1 + 0x600\n 11476: a0 = u64 [a5 + 0x38]\n 11479: a2 = u64 [a5 + 0x48]\n 11482: u64 [s1 + 0xd8] = a2\n 11486: a2 = a3\n 11488: t1 = u64 [a1 + 0x630]\n 11492: a3 = u64 [a5 + 0x40]\n 11495: t2 = a0 ^ a4\n 11498: a5 = a0 <u a4\n 11501: ra = t1 <u t0\n 11504: a5 = ra if t2 == 0\n 11507: a1 = a3 - a2\n 11510: t2 = a1 - a5\n 11513: a1 = a1 <u a5\n 11516: a3 = a3 <u a2\n 11519: a2 = u64 [s1 + 0xd8]\n 11523: a3 = a2 - a3\n 11526: a2 = u64 [s1 + 0xf0]\n 11530: a3 = a3 - a2\n 11533: a3 = a3 - a1\n 11536: a0 = a0 - a4\n 11539: a0 = a0 - ra\n 11542: a1 = t1 - t0\n 11545: a0 = a0 | a3\n 11548: a2 = a1 | t2\n 11551: a2 = a2 | a0\n 11554: a0 = a0 | t2\n 11557: a2 = a2 >> 0x20\n 11560: a0 = a0 << 0x20\n 11563: a0 = a0 | a2\n 11566: jump @392 if a0 == 0\n      : @391 (gas: 1)\n 11569: jump @609\n      : @392 (gas: 4)\n 11572: a0 = t0\n 11574: u64 [s1 + 0xf8] = a1\n 11578: ra = 0x2ac\n 11582: jump @26\n      : @393 (gas: 10)\n 11585: u64 [a2 + 872] = 0\n 11589: u64 [a2 + 864] = 0\n 11593: u64 [a2 + 856] = 0\n 11597: u64 [a2 + 848] = 0\n 11601: a0 = s1 + 0x1000\n 11605: i32 a0 = a0 + 0x3c0\n 11609: ra = 0x16c\n 11613: ecalli 11 // 'value_transferred'\n 11615: t0 = 0x16e\n 11619: jump @924\n      : @394 [@dyn 182] (gas: 1)\n 11622: t0 = 366, jump @924\n      : @395 [@dyn 183] (gas: 1)\n 11628: t0 = 368, jump @936\n      : @396 [@dyn 184] (gas: 1)\n 11634: jump @398 if a0 == 0\n      : @397 (gas: 1)\n 11637: jump @646\n      : @398 (gas: 4)\n 11640: a0 = u64 [s1 + 0xf8]\n 11644: a0 = i32 [a0]\n 11646: a1 = 0x43\n 11649: jump @400 if a1 <u a0\n      : @399 (gas: 1)\n 11652: jump @647\n      : @400 (gas: 4)\n 11655: a0 = s1 + 0x460\n 11659: ra = 0x172\n 11663: t0 = 0x2fc\n 11667: jump @946\n      : @401 [@dyn 185] (gas: 39)\n 11670: a1 = s1 + 0x400\n 11674: a0 = u64 [a1 + 0x70]\n 11677: u64 [s1 + 0xd8] = a0\n 11681: a0 = u64 [a1 + 0x68]\n 11684: u64 [s1 + 0xf0] = a0\n 11688: a0 = u64 [a1 + 0x60]\n 11691: u64 [s1 + 0xf8] = a0\n 11695: a0 = sp + 0xffffffffffffffe0\n 11698: a0 = a0 & 0xffffffffffffffe0\n 11701: u64 [s1 + 0xe0] = a0\n 11705: sp = a0\n 11707: a0 = s1 + 0x1000\n 11711: i32 a0 = a0 + 0x3e0\n 11715: a1 = 0x24\n 11718: ecalli 1 // 'call_data_load'\n 11720: a0 = s1 + 0x1070\n 11724: a4 = a0 + 0x300\n 11728: a1 = u64 [a4 + 0x88]\n 11732: a2 = u64 [a4 + 0x80]\n 11736: a3 = u64 [a4 + 0x78]\n 11739: a0 = u64 [a4 + 0x70]\n 11742: u64 [s1 + 0x90] = a1\n 11746: a4 = u64 [s1 + 0xe0]\n 11750: u64 [a4 + 0x18] = a1\n 11753: u64 [s1 + 0x88] = a2\n 11757: u64 [a4 + 0x10] = a2\n 11760: u64 [s1 + 0x80] = a3\n 11764: u64 [a4 + 0x8] = a3\n 11767: u64 [s1 + 0x78] = a0\n 11770: u64 [a4] = a0\n 11772: a0 = 0x30110\n 11777: u64 [s1 + 0xe8] = a0\n 11781: i32 a0 = a0 + 0\n 11783: u64 [s1 + 0xd0] = a0\n 11787: ra = 0x174\n 11791: ecalli 3 // 'caller'\n 11793: a2 = u64 [s1 + 0xe8]\n 11797: t0 = 0x176\n 11801: jump @934\n      : @402 [@dyn 186] (gas: 2)\n 11804: a2 = u64 [s1 + 0xe8]\n 11808: t0 = 374, jump @934\n      : @403 [@dyn 187] (gas: 1)\n 11814: jump @405 if a0 != 0\n      : @404 (gas: 1)\n 11817: jump @648\n      : @405 (gas: 9)\n 11820: a0 = u64 [s1 + 0xd8]\n 11824: a0 = a0 << 0x20\n 11827: a1 = a0 >> 0x20\n 11830: a0 = u64 [s1 + 0xf0]\n 11834: a2 = u64 [s1 + 0xf8]\n 11838: a0 = a0 | a2\n 11841: u64 [s1 + 0xd8] = a1\n 11845: a0 = a0 | a1\n 11848: jump @407 if a0 != 0\n      : @406 (gas: 1)\n 11851: jump @653\n      : @407 (gas: 6)\n 11854: a0 = u64 [s1 + 0xd0]\n 11858: ra = 0x178\n 11862: ecalli 3 // 'caller'\n 11864: a2 = u64 [s1 + 0xe8]\n 11868: t0 = 0x17a\n 11872: jump @908\n      : @408 [@dyn 188] (gas: 2)\n 11875: a2 = u64 [s1 + 0xe8]\n 11879: t0 = 378, jump @908\n      : @409 [@dyn 189] (gas: 7)\n 11885: u64 [s1 + 1112] = 0\n 11889: u64 [s1 + 0x450] = a1\n 11893: u64 [s1 + 0x448] = a0\n 11897: a1 = s1 + 0x440\n 11901: u64 [s1 + 0x440] = a3\n 11905: a0 = 0\n 11907: ra = 380, jump @19\n      : @410 [@dyn 190] (gas: 7)\n 11913: u64 [s1 + 1080] = 0\n 11917: u64 [s1 + 1072] = 0\n 11921: u64 [s1 + 1056] = 0x1\n 11926: a0 = 0x20\n 11929: a1 = s1 + 0x420\n 11933: u64 [s1 + 1064] = 0\n 11937: ra = 382, jump @19\n      : @411 [@dyn 191] (gas: 3)\n 11943: a1 = 0x200fc\n 11948: a0 = i32 [0x200fc]\n 11953: jump @413 if a0 >u 63\n      : @412 (gas: 2)\n 11957: u32 [0x200fc] = 0x40\n 11963: fallthrough\n      : @413 (gas: 15)\n 11964: a0 = sp + 0xffffffffffffffe0\n 11967: a2 = a0 & 0xffffffffffffffe0\n 11970: u64 [s1 + 0xb8] = a2\n 11974: sp = a2\n 11976: a0 = 0x20110\n 11981: i32 a0 = a0 + 0\n 11983: i32 a2 = a2 + 0\n 11985: u64 [s1 + 0xc8] = a1\n 11989: a1 = 0x40\n 11992: u64 [s1 + 0xc0] = a0\n 11996: ra = 0x180\n 12000: ecalli 6 // 'hash_keccak_256'\n 12002: a3 = u64 [s1 + 0xb8]\n 12006: t0 = 0x182\n 12010: jump @942\n      : @414 [@dyn 192] (gas: 2)\n 12013: a3 = u64 [s1 + 0xb8]\n 12017: t0 = 386, jump @942\n      : @415 [@dyn 193] (gas: 22)\n 12023: u64 [s1 + 0xb0] = a0\n 12027: a0 = reverse a1\n 12029: u64 [s1 + 0xa8] = a0\n 12033: a0 = reverse a2\n 12035: u64 [s1 + 0xa0] = a0\n 12039: a0 = reverse a3\n 12041: u64 [s1 + 0x98] = a0\n 12045: a0 = sp + 0xffffffffffffffe0\n 12048: a0 = a0 & 0xffffffffffffffe0\n 12051: u64 [s1 + 0xb8] = a0\n 12055: sp = a0\n 12057: u64 [s1 + 1048] = 0\n 12061: a0 = u64 [s1 + 0xd8]\n 12065: a2 = s1 + 0x400\n 12069: u64 [a2 + 0x10] = a0\n 12072: a0 = u64 [s1 + 0xf0]\n 12076: u64 [a2 + 0x8] = a0\n 12079: a1 = s1 + 0x400\n 12083: a0 = u64 [s1 + 0xf8]\n 12087: u64 [a2] = a0\n 12089: a0 = 0\n 12091: ra = 388, jump @19\n      : @416 [@dyn 194] (gas: 12)\n 12097: a0 = u64 [s1 + 0x98]\n 12101: a3 = s1 + 0x300\n 12105: u64 [a3 + 0xf8] = a0\n 12109: a0 = u64 [s1 + 0xa0]\n 12113: u64 [a3 + 0xf0] = a0\n 12117: a0 = u64 [s1 + 0xa8]\n 12121: u64 [a3 + 0xe8] = a0\n 12125: a0 = 0x20\n 12128: a1 = s1 + 0x3e0\n 12132: a2 = u64 [s1 + 0xb0]\n 12136: u64 [a3 + 0xe0] = a2\n 12140: ra = 390, jump @19\n      : @417 [@dyn 195] (gas: 3)\n 12146: a1 = u64 [s1 + 0xc8]\n 12150: a0 = i32 [a1]\n 12152: jump @419 if a0 >u 63\n      : @418 (gas: 2)\n 12156: u32 [a1 + 0] = 0x40\n 12159: fallthrough\n      : @419 (gas: 4)\n 12160: a0 = sp + 0xffffffffffffffe0\n 12163: a0 = a0 & 0xffffffffffffffe0\n 12166: u64 [s1 + 0xc8] = a0\n 12170: t0 = 392, jump @944\n      : @420 [@dyn 196] (gas: 17)\n 12176: ecalli 6 // 'hash_keccak_256'\n 12178: a3 = u64 [s1 + 0xc8]\n 12182: a0 = u64 [a3 + 0x18]\n 12185: a1 = u64 [a3 + 0x10]\n 12188: a2 = u64 [a3 + 0x8]\n 12191: a3 = u64 [a3]\n 12193: a4 = reverse a0\n 12195: a1 = reverse a1\n 12197: a2 = reverse a2\n 12199: a3 = reverse a3\n 12201: a0 = u64 [s1 + 0xb8]\n 12205: u64 [a0 + 0x18] = a3\n 12208: u64 [a0 + 0x10] = a2\n 12211: u64 [a0 + 0x8] = a1\n 12214: u64 [a0] = a4\n 12216: a1 = u64 [s1 + 0xe0]\n 12220: ra = 394, jump @22\n      : @421 [@dyn 197] (gas: 3)\n 12226: a0 = s1 + 0x3c0\n 12230: a1 = 0x40\n 12233: ra = 396, jump @17\n      : @422 [@dyn 198] (gas: 6)\n 12239: a4 = s1 + 0x300\n 12243: a0 = u64 [a4 + 0xd8]\n 12247: a1 = u64 [a4 + 0xd0]\n 12251: a2 = u64 [a4 + 0xc8]\n 12255: a3 = u64 [a4 + 0xc0]\n 12259: t0 = 398, jump @920\n      : @423 [@dyn 199] (gas: 1)\n 12265: jump @425 if a0 == 0\n      : @424 (gas: 1)\n 12268: jump @609\n      : @425 (gas: 12)\n 12271: a0 = u64 [s1 + 0x78]\n 12274: u64 [s1 + 0x3a0] = a0\n 12278: a0 = u64 [s1 + 0x80]\n 12282: u64 [s1 + 0x3a8] = a0\n 12286: a0 = u64 [s1 + 0x88]\n 12290: u64 [s1 + 0x3b0] = a0\n 12294: a1 = s1 + 0x3a0\n 12298: a0 = u64 [s1 + 0x90]\n 12302: u64 [s1 + 0x3b8] = a0\n 12306: a0 = a3\n 12308: u64 [s1 + 0xe0] = a3\n 12312: ra = 400, jump @19\n      : @426 [@dyn 200] (gas: 6)\n 12318: a0 = u64 [s1 + 0xd0]\n 12322: ra = 0x192\n 12326: ecalli 3 // 'caller'\n 12328: a2 = u64 [s1 + 0xe8]\n 12332: t0 = 0x194\n 12336: jump @937\n      : @427 [@dyn 201] (gas: 2)\n 12339: a2 = u64 [s1 + 0xe8]\n 12343: t0 = 404, jump @937\n      : @428 [@dyn 202] (gas: 31)\n 12349: t0 = a1 | a0\n 12352: a3 = a3 >> 0x20\n 12355: a2 = reverse a2\n 12357: a1 = a2 << 0x20\n 12360: a1 = a1 | a3\n 12363: a2 = a2 >> 0x20\n 12366: u64 [s1 + 856] = 0\n 12370: a0 = u64 [s1 + 0xd8]\n 12374: u64 [s1 + 0x350] = a0\n 12378: a0 = u64 [s1 + 0xf0]\n 12382: u64 [s1 + 0x348] = a0\n 12386: a0 = u64 [s1 + 0xf8]\n 12390: u64 [s1 + 0x340] = a0\n 12394: u64 [s1 + 888] = 0\n 12398: a3 = u64 [0x20070]\n 12403: a4 = u64 [0x20078]\n 12408: a5 = u64 [0x20080]\n 12413: a0 = u64 [0x20088]\n 12418: u64 [s1 + 0x398] = a3\n 12422: u64 [s1 + 0x390] = a4\n 12426: u64 [s1 + 0x388] = a5\n 12430: u64 [s1 + 0x380] = a0\n 12434: u64 [s1 + 0x370] = a2\n 12438: u64 [s1 + 0x368] = a1\n 12442: a1 = 0x20\n 12445: a2 = s1 + 0x380\n 12449: a3 = s1 + 0x360\n 12453: a4 = s1 + 0x340\n 12457: u64 [s1 + 0x360] = t0\n 12461: a0 = u64 [s1 + 0xe0]\n 12465: ra = 406, jump @23\n      : @429 [@dyn 203] (gas: 3)\n 12471: a0 = s1 + 0x320\n 12475: a1 = 0x40\n 12478: ra = 408, jump @17\n      : @430 [@dyn 204] (gas: 6)\n 12484: a4 = s1 + 0x300\n 12488: a3 = u64 [a4 + 0x38]\n 12491: a1 = u64 [a4 + 0x30]\n 12494: a2 = u64 [a4 + 0x28]\n 12497: a0 = u64 [a4 + 0x20]\n 12500: t0 = 410, jump @918\n      : @431 [@dyn 205] (gas: 1)\n 12506: jump @433 if a1 == 0\n      : @432 (gas: 1)\n 12509: jump @609\n      : @433 (gas: 8)\n 12512: u64 [s1 + 792] = 0\n 12516: u64 [s1 + 784] = 0\n 12520: u64 [s1 + 776] = 0\n 12524: a1 = s1 + 0x300\n 12528: u64 [s1 + 768] = 0x1\n 12533: u64 [s1 + 0xf8] = a0\n 12537: ra = 0x254\n 12541: jump @19\n      : @434 (gas: 8)\n 12544: u64 [a2 + 1416] = 0\n 12548: u64 [a2 + 1408] = 0\n 12552: u64 [a2 + 1400] = 0\n 12556: u64 [a2 + 1392] = 0\n 12560: a0 = s1 + 0x1000\n 12564: i32 a0 = a0 + 0x5e0\n 12568: ecalli 11 // 'value_transferred'\n 12570: fallthrough\n      : @435 (gas: 10)\n 12571: a3 = s1 + 0x1070\n 12575: a4 = a3 + 0x500\n 12579: a0 = u64 [a4 + 0x80]\n 12583: a1 = u64 [a4 + 0x88]\n 12587: a2 = u64 [a4 + 0x78]\n 12590: a3 = u64 [a4 + 0x70]\n 12593: a1 = a1 | a2\n 12596: a0 = a0 | a3\n 12599: a0 = a0 | a1\n 12602: jump @437 if a0 == 0\n      : @436 (gas: 1)\n 12605: jump @658\n      : @437 (gas: 4)\n 12608: a0 = u64 [s1 + 0xf8]\n 12612: a0 = i32 [a0]\n 12614: a1 = 0x63\n 12617: jump @439 if a1 <u a0\n      : @438 (gas: 1)\n 12620: jump @659\n      : @439 (gas: 5)\n 12623: a0 = s1 + 0x7ff\n 12627: a0 = a0 + 0x2c1\n 12631: ra = 0x19c\n 12635: t0 = 0x2fc\n 12639: jump @946\n      : @440 [@dyn 206] (gas: 16)\n 12642: a1 = s1 + 0x7ff\n 12646: a1 = a1 + 0x71\n 12649: a2 = a1 + 0x200\n 12653: a0 = u64 [a2 + 0x68]\n 12656: u64 [s1 + 0xa8] = a0\n 12660: a0 = u64 [a2 + 0x60]\n 12663: u64 [s1 + 0xc8] = a0\n 12667: a0 = u64 [a2 + 0x58]\n 12670: u64 [s1 + 0xf8] = a0\n 12674: a0 = u64 [a2 + 0x50]\n 12677: u64 [s1 + 0xf0] = a0\n 12681: a0 = s1 + 0x7ff\n 12685: a0 = a0 + 0x2a1\n 12689: ra = 0x19e\n 12693: t0 = 0x306\n 12697: jump @946\n      : @441 [@dyn 207] (gas: 42)\n 12700: a1 = s1 + 0x7ff\n 12704: a1 = a1 + 0x71\n 12707: a2 = a1 + 0x200\n 12711: a0 = u64 [a2 + 0x48]\n 12714: u64 [s1 + 0xa0] = a0\n 12718: a0 = u64 [a2 + 0x40]\n 12721: u64 [s1 + 0x98] = a0\n 12725: a0 = u64 [a2 + 0x38]\n 12728: u64 [s1 + 0x90] = a0\n 12732: a0 = u64 [a2 + 0x30]\n 12735: u64 [s1 + 0x88] = a0\n 12739: a0 = s1 + 0x1000\n 12743: i32 a0 = a0 + 0x600\n 12747: a1 = 0x44\n 12750: ecalli 1 // 'call_data_load'\n 12752: a0 = s1 + 0x1070\n 12756: a2 = a0 + 0x500\n 12760: a1 = u64 [a2 + 0xa8]\n 12764: u64 [s1 + 0xe8] = a1\n 12768: a1 = u64 [a2 + 0xa0]\n 12772: u64 [s1 + 0xe0] = a1\n 12776: a1 = u64 [a2 + 0x98]\n 12780: u64 [s1 + 0xd0] = a1\n 12784: a0 = u64 [a2 + 0x90]\n 12788: u64 [s1 + 0xd8] = a0\n 12792: a0 = u64 [s1 + 0xc8]\n 12796: a0 = a0 << 0x20\n 12799: a0 = a0 >> 0x20\n 12802: a2 = s1 + 0x7ff\n 12806: a2 = a2 + 0x71\n 12809: u64 [a2 + 552] = 0\n 12813: u64 [s1 + 0x78] = a0\n 12816: a3 = a2 + 0x200\n 12820: u64 [a3 + 0x20] = a0\n 12823: a0 = u64 [s1 + 0xf8]\n 12827: u64 [a3 + 0x18] = a0\n 12830: a1 = s1 + 0x7ff\n 12834: a1 = a1 + 0x281\n 12838: a0 = u64 [s1 + 0xf0]\n 12842: u64 [a3 + 0x10] = a0\n 12845: a0 = 0\n 12847: ra = 416, jump @19\n      : @442 [@dyn 208] (gas: 11)\n 12853: a1 = s1 + 0x7ff\n 12857: a1 = a1 + 0x71\n 12860: u64 [a1 + 520] = 0\n 12864: u64 [a1 + 512] = 0\n 12868: u64 [a1 + 496] = 0x1\n 12873: a2 = a1\n 12875: a0 = 0x20\n 12878: a1 = s1 + 0x7ff\n 12882: a1 = a1 + 0x261\n 12886: u64 [a2 + 504] = 0\n 12890: ra = 418, jump @19\n      : @443 [@dyn 209] (gas: 3)\n 12896: a1 = 0x200fc\n 12901: a0 = i32 [0x200fc]\n 12906: jump @445 if a0 >u 63\n      : @444 (gas: 2)\n 12910: u32 [0x200fc] = 0x40\n 12916: fallthrough\n      : @445 (gas: 15)\n 12917: a0 = sp + 0xffffffffffffffe0\n 12920: a2 = a0 & 0xffffffffffffffe0\n 12923: u64 [s1 + 0xb0] = a2\n 12927: sp = a2\n 12929: a0 = 0x20110\n 12934: i32 a0 = a0 + 0\n 12936: i32 a2 = a2 + 0\n 12938: u64 [s1 + 0xb8] = a1\n 12942: a1 = 0x40\n 12945: u64 [s1 + 0xc0] = a0\n 12949: ra = 0x1a4\n 12953: ecalli 6 // 'hash_keccak_256'\n 12955: a3 = u64 [s1 + 0xb0]\n 12959: t0 = 0x1a6\n 12963: jump @942\n      : @446 [@dyn 210] (gas: 2)\n 12966: a3 = u64 [s1 + 0xb0]\n 12970: t0 = 422, jump @942\n      : @447 [@dyn 211] (gas: 19)\n 12976: u64 [s1 + 0x68] = a0\n 12979: a0 = reverse a1\n 12981: u64 [s1 + 0x60] = a0\n 12984: a0 = reverse a2\n 12986: u64 [s1 + 0x58] = a0\n 12989: a0 = reverse a3\n 12991: u64 [s1 + 0x50] = a0\n 12994: a0 = sp + 0xffffffffffffffe0\n 12997: a0 = a0 & 0xffffffffffffffe0\n 13000: u64 [s1 + 0x70] = a0\n 13003: sp = a0\n 13005: a0 = 0x30110\n 13010: u64 [s1 + 0xb0] = a0\n 13014: i32 a0 = a0 + 0\n 13016: u64 [s1 + 0x80] = a0\n 13020: ra = 0x1a8\n 13024: ecalli 3 // 'caller'\n 13026: t0 = 0x1aa\n 13030: jump @909\n      : @448 [@dyn 212] (gas: 1)\n 13033: t0 = 426, jump @909\n      : @449 [@dyn 213] (gas: 9)\n 13039: u64 [a2 + 488] = 0\n 13043: a4 = a2 + 0x100\n 13047: u64 [a4 + 0xe0] = a1\n 13051: u64 [a4 + 0xd8] = a0\n 13055: a1 = s1 + 0x7ff\n 13059: a1 = a1 + 0x241\n 13063: u64 [a4 + 0xd0] = a3\n 13067: a0 = 0\n 13069: ra = 428, jump @19\n      : @450 [@dyn 214] (gas: 16)\n 13075: a0 = u64 [s1 + 0x50]\n 13078: a1 = s1 + 0x7ff\n 13082: a1 = a1 + 0x71\n 13085: a2 = a1 + 0x100\n 13089: u64 [a2 + 0xc8] = a0\n 13093: a0 = u64 [s1 + 0x58]\n 13096: u64 [a2 + 0xc0] = a0\n 13100: a0 = u64 [s1 + 0x60]\n 13103: u64 [a2 + 0xb8] = a0\n 13107: a3 = a1\n 13109: a0 = 0x20\n 13112: a1 = s1 + 0x7ff\n 13116: a1 = a1 + 0x221\n 13120: a2 = u64 [s1 + 0x68]\n 13123: u64 [a3 + 0x1b0] = a2\n 13127: ra = 430, jump @19\n      : @451 [@dyn 215] (gas: 3)\n 13133: a1 = u64 [s1 + 0xb8]\n 13137: a0 = i32 [a1]\n 13139: jump @453 if a0 >u 63\n      : @452 (gas: 2)\n 13143: u32 [a1 + 0] = 0x40\n 13146: fallthrough\n      : @453 (gas: 4)\n 13147: a0 = sp + 0xffffffffffffffe0\n 13150: a0 = a0 & 0xffffffffffffffe0\n 13153: u64 [s1 + 0x68] = a0\n 13156: t0 = 432, jump @944\n      : @454 [@dyn 216] (gas: 5)\n 13162: ra = 0x1b2\n 13166: ecalli 6 // 'hash_keccak_256'\n 13168: a3 = u64 [s1 + 0x68]\n 13171: t0 = 0x1b4\n 13175: jump @911\n      : @455 [@dyn 217] (gas: 2)\n 13178: a3 = u64 [s1 + 0x68]\n 13181: t0 = 436, jump @911\n      : @456 [@dyn 218] (gas: 8)\n 13187: a1 = u64 [s1 + 0x70]\n 13190: u64 [a1 + 0x18] = a3\n 13193: u64 [a1 + 0x10] = a2\n 13196: u64 [a1 + 0x8] = a4\n 13199: u64 [a1] = a0\n 13201: a0 = s1 + 0x7ff\n 13205: a0 = a0 + 0x201\n 13209: ra = 438, jump @21\n      : @457 [@dyn 219] (gas: 10)\n 13215: a3 = s1 + 0x7ff\n 13219: a3 = a3 + 0x71\n 13222: t1 = u64 [a3 + 0x1a8]\n 13226: ra = u64 [a3 + 0x1a0]\n 13230: a5 = u64 [a3 + 0x198]\n 13234: t0 = u64 [a3 + 0x190]\n 13238: a0 = a5 & t1\n 13241: a1 = t0 & ra\n 13244: a0 = a0 & a1\n 13247: jump @482 if a0 == 4294967295\n      : @458 (gas: 22)\n 13252: a0 = u64 [s1 + 0xd8]\n 13256: a2 = t0 <u a0\n 13259: a1 = u64 [s1 + 0xd0]\n 13263: a0 = a5 ^ a1\n 13266: a4 = a5 <u a1\n 13269: u64 [s1 + 0x50] = a2\n 13272: a4 = a2 if a0 == 0\n 13275: a2 = u64 [s1 + 0xe0]\n 13279: t2 = ra <u a2\n 13282: a1 = u64 [s1 + 0xe8]\n 13286: a0 = t1 ^ a1\n 13289: a1 = t1 <u a1\n 13292: u64 [s1 + 0x40] = t2\n 13295: a1 = t2 if a0 == 0\n 13298: a2 = ra ^ a2\n 13301: a0 = a0 | a2\n 13304: a1 = a4 if a0 == 0\n 13307: u64 [s1 + 0x70] = t0\n 13310: u64 [s1 + 0x68] = a5\n 13313: u64 [s1 + 0x60] = t1\n 13316: u64 [s1 + 0x58] = ra\n 13319: jump @460 if a1 == 0\n      : @459 (gas: 1)\n 13322: jump @696\n      : @460 (gas: 7)\n 13325: u64 [s1 + 0x48] = a4\n 13328: a0 = u64 [s1 + 0xf0]\n 13332: a1 = u64 [s1 + 0x78]\n 13335: a0 = a0 | a1\n 13338: a1 = u64 [s1 + 0xf8]\n 13342: a0 = a0 | a1\n 13345: jump @462 if a0 != 0\n      : @461 (gas: 1)\n 13348: jump @705\n      : @462 (gas: 6)\n 13351: a0 = u64 [s1 + 0x80]\n 13355: ra = 0x1b8\n 13359: ecalli 3 // 'caller'\n 13361: a2 = u64 [s1 + 0xb0]\n 13365: t0 = 0x1ba\n 13369: jump @934\n      : @463 [@dyn 220] (gas: 2)\n 13372: a2 = u64 [s1 + 0xb0]\n 13376: t0 = 442, jump @934\n      : @464 [@dyn 221] (gas: 1)\n 13382: jump @466 if a0 != 0\n      : @465 (gas: 1)\n 13385: jump @707\n      : @466 (gas: 14)\n 13388: a2 = s1 + 0x7ff\n 13392: a2 = a2 + 0x71\n 13395: u64 [a2 + 392] = 0\n 13399: a0 = u64 [s1 + 0xf0]\n 13403: a3 = a2 + 0x100\n 13407: u64 [a3 + 0x70] = a0\n 13410: a0 = u64 [s1 + 0xf8]\n 13414: u64 [a3 + 0x78] = a0\n 13417: a1 = s1 + 0x7ff\n 13421: a1 = a1 + 0x1e1\n 13425: a0 = u64 [s1 + 0x78]\n 13428: u64 [a3 + 0x80] = a0\n 13432: a0 = 0\n 13434: ra = 444, jump @19\n      : @467 [@dyn 222] (gas: 11)\n 13440: a1 = s1 + 0x7ff\n 13444: a1 = a1 + 0x71\n 13447: u64 [a1 + 360] = 0\n 13451: u64 [a1 + 352] = 0\n 13455: u64 [a1 + 336] = 0x1\n 13460: a2 = a1\n 13462: a0 = 0x20\n 13465: a1 = s1 + 0x7ff\n 13469: a1 = a1 + 0x1c1\n 13473: u64 [a2 + 344] = 0\n 13477: ra = 446, jump @19\n      : @468 [@dyn 223] (gas: 3)\n 13483: a1 = u64 [s1 + 0xb8]\n 13487: a0 = i32 [a1]\n 13489: jump @470 if a0 >u 63\n      : @469 (gas: 2)\n 13493: u32 [a1 + 0] = 0x40\n 13496: fallthrough\n      : @470 (gas: 4)\n 13497: a0 = sp + 0xffffffffffffffe0\n 13500: a0 = a0 & 0xffffffffffffffe0\n 13503: u64 [s1 + 0x78] = a0\n 13506: t0 = 448, jump @944\n      : @471 [@dyn 224] (gas: 5)\n 13512: ra = 0x1c2\n 13516: ecalli 6 // 'hash_keccak_256'\n 13518: a3 = u64 [s1 + 0x78]\n 13521: t0 = 0x1c4\n 13525: jump @942\n      : @472 [@dyn 225] (gas: 2)\n 13528: a3 = u64 [s1 + 0x78]\n 13531: t0 = 452, jump @942\n      : @473 [@dyn 226] (gas: 16)\n 13537: u64 [s1 + 0x38] = a0\n 13540: a0 = reverse a1\n 13542: u64 [s1 + 0x30] = a0\n 13545: a0 = reverse a2\n 13547: u64 [s1 + 0x28] = a0\n 13550: a0 = reverse a3\n 13552: u64 [s1 + 0x20] = a0\n 13555: a0 = sp + 0xffffffffffffffe0\n 13558: a0 = a0 & 0xffffffffffffffe0\n 13561: u64 [s1 + 0x78] = a0\n 13564: sp = a0\n 13566: a0 = u64 [s1 + 0x80]\n 13570: ra = 0x1c6\n 13574: ecalli 3 // 'caller'\n 13576: t0 = 0x1c8\n 13580: jump @909\n      : @474 [@dyn 227] (gas: 1)\n 13583: t0 = 456, jump @909\n      : @475 [@dyn 228] (gas: 9)\n 13589: u64 [a2 + 328] = 0\n 13593: a4 = a2 + 0x100\n 13597: u64 [a4 + 0x40] = a1\n 13600: u64 [a4 + 0x38] = a0\n 13603: a1 = s1 + 0x7ff\n 13607: a1 = a1 + 0x1a1\n 13611: u64 [a4 + 0x30] = a3\n 13614: a0 = 0\n 13616: ra = 458, jump @19\n      : @476 [@dyn 229] (gas: 16)\n 13622: a0 = u64 [s1 + 0x20]\n 13625: a1 = s1 + 0x7ff\n 13629: a1 = a1 + 0x71\n 13632: a2 = a1 + 0x100\n 13636: u64 [a2 + 0x28] = a0\n 13639: a0 = u64 [s1 + 0x28]\n 13642: u64 [a2 + 0x20] = a0\n 13645: a0 = u64 [s1 + 0x30]\n 13648: u64 [a2 + 0x18] = a0\n 13651: a3 = a1\n 13653: a0 = 0x20\n 13656: a1 = s1 + 0x7ff\n 13660: a1 = a1 + 0x181\n 13664: a2 = u64 [s1 + 0x38]\n 13667: u64 [a3 + 0x110] = a2\n 13671: ra = 460, jump @19\n      : @477 [@dyn 230] (gas: 3)\n 13677: a1 = u64 [s1 + 0xb8]\n 13681: a0 = i32 [a1]\n 13683: jump @479 if a0 >u 63\n      : @478 (gas: 2)\n 13687: u32 [a1 + 0] = 0x40\n 13690: fallthrough\n      : @479 (gas: 4)\n 13691: a0 = sp + 0xffffffffffffffe0\n 13694: a0 = a0 & 0xffffffffffffffe0\n 13697: u64 [s1 + 0xb8] = a0\n 13701: t0 = 462, jump @944\n      : @480 [@dyn 231] (gas: 43)\n 13707: ecalli 6 // 'hash_keccak_256'\n 13709: a0 = u64 [s1 + 0xe0]\n 13713: a1 = u64 [s1 + 0x58]\n 13716: a0 = a1 - a0\n 13719: a2 = u64 [s1 + 0x48]\n 13722: a1 = a0 - a2\n 13725: a0 = a0 <u a2\n 13728: a2 = u64 [s1 + 0xe8]\n 13732: a3 = u64 [s1 + 0x60]\n 13735: a2 = a3 - a2\n 13738: a3 = u64 [s1 + 0x40]\n 13741: a2 = a2 - a3\n 13744: a2 = a2 - a0\n 13747: a0 = u64 [s1 + 0xd0]\n 13751: a3 = u64 [s1 + 0x68]\n 13754: a0 = a3 - a0\n 13757: a3 = u64 [s1 + 0x50]\n 13760: a0 = a0 - a3\n 13763: a3 = s1 + 0x1070\n 13767: a5 = a3 + 0x500\n 13771: u64 [a5 + 0xc8] = a2\n 13775: u64 [a5 + 0xc0] = a1\n 13779: u64 [a5 + 0xb8] = a0\n 13783: a4 = u64 [s1 + 0xb8]\n 13787: a0 = u64 [a4]\n 13789: a1 = u64 [s1 + 0xd8]\n 13793: a2 = u64 [s1 + 0x70]\n 13796: a1 = a2 - a1\n 13799: u64 [a5 + 0xb0] = a1\n 13803: a1 = u64 [a4 + 0x8]\n 13806: a2 = reverse a0\n 13808: a0 = u64 [s1 + 0x78]\n 13811: u64 [a0 + 0x18] = a2\n 13814: a3 = u64 [a4 + 0x10]\n 13817: a2 = u64 [a4 + 0x18]\n 13820: a1 = reverse a1\n 13822: u64 [a0 + 0x10] = a1\n 13825: a1 = reverse a3\n 13827: u64 [a0 + 0x8] = a1\n 13830: a1 = reverse a2\n 13832: u64 [a0] = a1\n 13834: a1 = s1 + 0x1620\n 13838: ra = 464, jump @22\n      : @481 [@dyn 232] (gas: 3)\n 13844: a3 = s1 + 0x7ff\n 13848: a3 = a3 + 0x71\n 13851: fallthrough\n      : @482 (gas: 41)\n 13852: a0 = u64 [s1 + 0xd8]\n 13856: a1 = s1 + 0x1000\n 13860: u64 [a1 + 0xfffffffffffff820] = a0\n 13864: a0 = u64 [s1 + 0x88]\n 13868: a1 = s1 + 0x1000\n 13872: u64 [a1 + 0xfffffffffffff840] = a0\n 13876: a0 = u64 [s1 + 0xf0]\n 13880: a1 = s1 + 0x1000\n 13884: u64 [a1 + 0xfffffffffffff860] = a0\n 13888: a0 = u64 [s1 + 0xd0]\n 13892: a1 = s1 + 0x1000\n 13896: u64 [a1 + 0xfffffffffffff828] = a0\n 13900: a0 = u64 [s1 + 0x90]\n 13904: a1 = s1 + 0x1000\n 13908: u64 [a1 + 0xfffffffffffff848] = a0\n 13912: a0 = u64 [s1 + 0xf8]\n 13916: a1 = s1 + 0x1000\n 13920: u64 [a1 + 0xfffffffffffff868] = a0\n 13924: a0 = u64 [s1 + 0xe0]\n 13928: a1 = s1 + 0x1000\n 13932: u64 [a1 + 0xfffffffffffff830] = a0\n 13936: a0 = u64 [s1 + 0x98]\n 13940: a1 = s1 + 0x1000\n 13944: u64 [a1 + 0xfffffffffffff850] = a0\n 13948: a0 = u64 [s1 + 0xc8]\n 13952: u64 [a3] = a0\n 13954: a0 = u64 [s1 + 0xe8]\n 13958: a1 = s1 + 0x1000\n 13962: u64 [a1 + 0xfffffffffffff838] = a0\n 13966: a0 = u64 [s1 + 0xa0]\n 13970: a1 = s1 + 0x1000\n 13974: u64 [a1 + 0xfffffffffffff858] = a0\n 13978: a0 = s1 + 0x7ff\n 13982: a0 = a0 + 0x61\n 13985: a1 = s1 + 0x7ff\n 13989: a1 = a1 + 0x41\n 13992: a2 = s1 + 0x7ff\n 13996: a2 = a2 + 0x21\n 13999: a4 = u64 [s1 + 0xa8]\n 14003: u64 [a3 + 0x8] = a4\n 14006: ra = 466, jump @835\n      : @483 [@dyn 233] (gas: 4)\n 14012: a0 = s1 + 0x7ff\n 14016: a0 = a0 + 0x1\n 14019: a1 = 0x40\n 14022: ra = 468, jump @17\n      : @484 [@dyn 234] (gas: 9)\n 14028: a0 = s1 + 0x1000\n 14032: a3 = u64 [a0 + 0xfffffffffffff818]\n 14036: a0 = s1 + 0x1000\n 14040: a1 = u64 [a0 + 0xfffffffffffff810]\n 14044: a0 = s1 + 0x1000\n 14048: a2 = u64 [a0 + 0xfffffffffffff808]\n 14052: a0 = s1 + 0x1000\n 14056: a0 = u64 [a0 + 0xfffffffffffff800]\n 14060: t0 = 470, jump @918\n      : @485 [@dyn 235] (gas: 1)\n 14066: jump @609 if a1 != 0\n      : @486 (gas: 8)\n 14070: u64 [s1 + 2040] = 0\n 14074: u64 [s1 + 2032] = 0\n 14078: u64 [s1 + 2024] = 0\n 14082: a1 = s1 + 0x7e0\n 14086: u64 [s1 + 2016] = 0x1\n 14091: u64 [s1 + 0xf8] = a0\n 14095: ra = 0x254\n 14099: jump @19\n      : @487 (gas: 9)\n 14102: u64 [a2 + 1512] = 0\n 14106: u64 [a2 + 1504] = 0\n 14110: u64 [a2 + 1496] = 0\n 14114: u64 [a2 + 1488] = 0\n 14118: a0 = s1 + 0x1000\n 14122: i32 a0 = a0 + 0x640\n 14126: ra = 0x1d8\n 14130: ecalli 11 // 'value_transferred'\n 14132: fallthrough\n      : @488 [@dyn 236] (gas: 3)\n 14133: a3 = s1 + 0x1070\n 14137: a4 = a3 + 0x500\n 14141: t0 = 474, jump @926\n      : @489 [@dyn 237] (gas: 1)\n 14147: jump @491 if a0 == 0\n      : @490 (gas: 1)\n 14150: jump @660\n      : @491 (gas: 3)\n 14153: a0 = u64 [s1 + 0xf8]\n 14157: a0 = i32 [a0]\n 14159: jump @493 if a0 >u 3\n      : @492 (gas: 1)\n 14163: jump @661\n      : @493 (gas: 4)\n 14166: a0 = s1 + 0x7ff\n 14170: a0 = a0 + 0x301\n 14174: a1 = 0x40\n 14177: ra = 476, jump @17\n      : @494 [@dyn 238] (gas: 8)\n 14183: a3 = s1 + 0x7ff\n 14187: a3 = a3 + 0x71\n 14190: a5 = a3 + 0x200\n 14194: a4 = u64 [a5 + 0xa8]\n 14198: a1 = u64 [a5 + 0xa0]\n 14202: a2 = u64 [a5 + 0x98]\n 14206: a0 = u64 [a5 + 0x90]\n 14210: t0 = 478, jump @930\n      : @495 [@dyn 239] (gas: 1)\n 14216: jump @609 if a1 != 0\n      : @496 (gas: 9)\n 14220: u64 [a3 + 648] = 0\n 14224: u64 [a3 + 640] = 0\n 14228: u64 [a3 + 624] = 0x12\n 14233: a1 = s1 + 0x7ff\n 14237: a1 = a1 + 0x2e1\n 14241: u64 [a3 + 632] = 0\n 14245: u64 [s1 + 0xf8] = a0\n 14249: ra = 0x254\n 14253: jump @19\n      : @497 (gas: 10)\n 14256: u64 [a2 + 1768] = 0\n 14260: u64 [a2 + 1760] = 0\n 14264: u64 [a2 + 1752] = 0\n 14268: u64 [a2 + 1744] = 0\n 14272: a0 = s1 + 0x1000\n 14276: i32 a0 = a0 + 0x740\n 14280: ra = 0x1e0\n 14284: ecalli 11 // 'value_transferred'\n 14286: t0 = 0x1e2\n 14290: jump @925\n      : @498 [@dyn 240] (gas: 1)\n 14293: t0 = 482, jump @925\n      : @499 [@dyn 241] (gas: 1)\n 14299: t0 = 484, jump @926\n      : @500 [@dyn 242] (gas: 1)\n 14305: jump @502 if a0 == 0\n      : @501 (gas: 1)\n 14308: jump @662\n      : @502 (gas: 3)\n 14311: a0 = u64 [s1 + 0xf8]\n 14315: a0 = i32 [a0]\n 14317: jump @504 if a0 >u 3\n      : @503 (gas: 1)\n 14321: jump @663\n      : @504 (gas: 9)\n 14324: a1 = s1 + 0x1070\n 14328: u64 [a1 + 1800] = 0\n 14332: u64 [a1 + 1792] = 0\n 14336: u64 [a1 + 1784] = 0\n 14340: u64 [a1 + 1776] = 0x7\n 14345: a0 = s1 + 0x7ff\n 14349: a0 = a0 + 0x5c1\n 14353: a1 = s1 + 0x1760\n 14357: ra = 486, jump @21\n      : @505 [@dyn 243] (gas: 13)\n 14363: a1 = s1 + 0x7ff\n 14367: a1 = a1 + 0x71\n 14370: a2 = a1 + 0x500\n 14374: a0 = u64 [a2 + 0x60]\n 14377: u64 [s1 + 0xe8] = a0\n 14381: a0 = u64 [a2 + 0x58]\n 14384: u64 [s1 + 0xf8] = a0\n 14388: a0 = u64 [a2 + 0x50]\n 14391: u64 [s1 + 0xf0] = a0\n 14395: a0 = s1 + 0x7ff\n 14399: a0 = a0 + 0x5a1\n 14403: a1 = 0x40\n 14406: ra = 488, jump @17\n      : @506 [@dyn 244] (gas: 8)\n 14412: a3 = s1 + 0x7ff\n 14416: a3 = a3 + 0x71\n 14419: a5 = a3 + 0x500\n 14423: a4 = u64 [a5 + 0x48]\n 14426: a1 = u64 [a5 + 0x40]\n 14429: a2 = u64 [a5 + 0x38]\n 14432: a0 = u64 [a5 + 0x30]\n 14435: t0 = 490, jump @930\n      : @507 [@dyn 245] (gas: 1)\n 14441: jump @609 if a1 != 0\n      : @508 (gas: 15)\n 14445: a1 = u64 [s1 + 0xe8]\n 14449: a1 = a1 << 0x20\n 14452: a2 = a1 >> 0x20\n 14455: u64 [a3 + 1320] = 0\n 14459: a1 = u64 [s1 + 0xf0]\n 14463: a4 = a3 + 0x500\n 14467: u64 [a4 + 0x10] = a1\n 14470: a1 = u64 [s1 + 0xf8]\n 14474: u64 [a4 + 0x18] = a1\n 14477: a1 = s1 + 0x7ff\n 14481: a1 = a1 + 0x581\n 14485: u64 [a4 + 0x20] = a2\n 14488: u64 [s1 + 0xf8] = a0\n 14492: ra = 0x254\n 14496: jump @19\n      : @509 (gas: 10)\n 14499: u64 [a2 + 936] = 0\n 14503: u64 [a2 + 928] = 0\n 14507: u64 [a2 + 920] = 0\n 14511: u64 [a2 + 912] = 0\n 14515: a0 = s1 + 0x1000\n 14519: i32 a0 = a0 + 0x400\n 14523: ra = 0x1ec\n 14527: ecalli 11 // 'value_transferred'\n 14529: t0 = 0x1ee\n 14533: jump @924\n      : @510 [@dyn 246] (gas: 1)\n 14536: t0 = 494, jump @924\n      : @511 [@dyn 247] (gas: 1)\n 14542: t0 = 496, jump @945\n      : @512 [@dyn 248] (gas: 1)\n 14548: jump @514 if a0 == 0\n      : @513 (gas: 1)\n 14551: jump @664\n      : @514 (gas: 3)\n 14554: a0 = u64 [s1 + 0xf8]\n 14558: a0 = i32 [a0]\n 14560: jump @516 if a0 >u 3\n      : @515 (gas: 1)\n 14564: jump @665\n      : @516 (gas: 8)\n 14567: a1 = s1 + 0x1070\n 14571: u64 [a1 + 968] = 0\n 14575: u64 [a1 + 960] = 0\n 14579: u64 [a1 + 952] = 0\n 14583: u64 [a1 + 944] = 0x2\n 14588: a0 = s1 + 0x4c0\n 14592: a1 = s1 + 0x1420\n 14596: ra = 498, jump @21\n      : @517 [@dyn 249] (gas: 11)\n 14602: a0 = u64 [s1 + 0x4d8]\n 14606: u64 [s1 + 0xf8] = a0\n 14610: a0 = u64 [s1 + 0x4d0]\n 14614: u64 [s1 + 0xf0] = a0\n 14618: a0 = u64 [s1 + 0x4c8]\n 14622: u64 [s1 + 0xe8] = a0\n 14626: a0 = u64 [s1 + 0x4c0]\n 14630: u64 [s1 + 0xe0] = a0\n 14634: a0 = s1 + 0x4a0\n 14638: a1 = 0x40\n 14641: ra = 500, jump @17\n      : @518 [@dyn 250] (gas: 6)\n 14647: a4 = s1 + 0x400\n 14651: a0 = u64 [a4 + 0xb8]\n 14655: a1 = u64 [a4 + 0xb0]\n 14659: a2 = u64 [a4 + 0xa8]\n 14663: a3 = u64 [a4 + 0xa0]\n 14667: t0 = 502, jump @920\n      : @519 [@dyn 251] (gas: 1)\n 14673: jump @609 if a0 != 0\n      : @520 (gas: 14)\n 14677: a0 = u64 [s1 + 0xe0]\n 14681: a2 = s1 + 0x400\n 14685: u64 [a2 + 0x80] = a0\n 14689: a0 = u64 [s1 + 0xe8]\n 14693: u64 [a2 + 0x88] = a0\n 14697: a0 = u64 [s1 + 0xf0]\n 14701: u64 [a2 + 0x90] = a0\n 14705: a1 = s1 + 0x480\n 14709: a0 = u64 [s1 + 0xf8]\n 14713: u64 [a2 + 0x98] = a0\n 14717: a0 = a3\n 14719: u64 [s1 + 0xf8] = a3\n 14723: ra = 0x254\n 14727: jump @19\n      : @521 (gas: 10)\n 14730: u64 [a2 + 1960] = 0\n 14734: u64 [a2 + 1952] = 0\n 14738: u64 [a2 + 1944] = 0\n 14742: u64 [a2 + 1936] = 0\n 14746: a0 = s1 + 0x2000\n 14750: i32 a0 = a0 + 0xfffffffffffff800\n 14754: ra = 0x1f8\n 14758: ecalli 11 // 'value_transferred'\n 14760: t0 = 0x1fa\n 14764: jump @939\n      : @522 [@dyn 252] (gas: 1)\n 14767: t0 = 506, jump @939\n      : @523 [@dyn 253] (gas: 1)\n 14773: t0 = 508, jump @945\n      : @524 [@dyn 254] (gas: 1)\n 14779: jump @526 if a0 == 0\n      : @525 (gas: 1)\n 14782: jump @666\n      : @526 (gas: 4)\n 14785: a0 = u64 [s1 + 0xf8]\n 14789: a0 = i32 [a0]\n 14791: a1 = 0x23\n 14794: jump @528 if a1 <u a0\n      : @527 (gas: 1)\n 14797: jump @667\n      : @528 (gas: 4)\n 14800: a0 = s1 + 0x1200\n 14804: ra = 0x1fe\n 14808: t0 = 0x2fc\n 14812: jump @946\n      : @529 [@dyn 255] (gas: 15)\n 14815: a3 = s1 + 0x1070\n 14819: a4 = a3 + 0x100\n 14823: a2 = u64 [a4 + 0x90]\n 14827: a1 = u64 [a4 + 0x98]\n 14831: a0 = u32 [a3 + 0x1a0]\n 14835: u64 [a3 + 392] = 0\n 14839: u64 [s1 + 0xf0] = a0\n 14843: u64 [a4 + 0x80] = a0\n 14847: u64 [s1 + 0xe0] = a1\n 14851: u64 [a4 + 0x78] = a1\n 14854: a1 = s1 + 0x11e0\n 14858: u64 [s1 + 0xe8] = a2\n 14862: u64 [a4 + 0x70] = a2\n 14865: a0 = 0\n 14867: ra = 512, jump @19\n      : @530 [@dyn 256] (gas: 3)\n 14873: t0 = 0x202\n 14877: a1 = s1 + 0x1070\n 14881: fallthrough\n      : @531 [@dyn 257] (gas: 8)\n 14882: u64 [a1 + 360] = 0\n 14886: u64 [a1 + 352] = 0\n 14890: u64 [a1 + 336] = 0x5\n 14895: a2 = a1\n 14897: a0 = 0x20\n 14900: a1 = s1 + 0x11c0\n 14904: u64 [a2 + 344] = 0\n 14908: ra = 516, jump @19\n      : @532 [@dyn 258] (gas: 3)\n 14914: a2 = 0x200fc\n 14919: a0 = i32 [0x200fc]\n 14924: jump @534 if a0 >u 63\n      : @533 (gas: 2)\n 14928: u32 [0x200fc] = 0x40\n 14934: fallthrough\n      : @534 (gas: 14)\n 14935: u64 [s1 + 0xd8] = a2\n 14939: a0 = sp + 0xffffffffffffffe0\n 14942: a2 = a0 & 0xffffffffffffffe0\n 14945: u64 [s1 + 0xf8] = a2\n 14949: sp = a2\n 14951: a0 = 0x20110\n 14956: i32 a0 = a0 + 0\n 14958: i32 a2 = a2 + 0\n 14960: a1 = 0x40\n 14963: u64 [s1 + 0xd0] = a0\n 14967: ra = 0x206\n 14971: ecalli 6 // 'hash_keccak_256'\n 14973: t0 = 0x208\n 14977: jump @912\n      : @535 [@dyn 259] (gas: 1)\n 14980: t0 = 520, jump @912\n      : @536 [@dyn 260] (gas: 7)\n 14986: u64 [a5 + 0xc8] = a3\n 14990: u64 [a5 + 0xc0] = a2\n 14994: u64 [a5 + 0xb8] = a1\n 14998: u64 [a5 + 0xb0] = a0\n 15002: a0 = s1 + 0x11a0\n 15006: a1 = s1 + 0x1820\n 15010: ra = 522, jump @21\n      : @537 [@dyn 261] (gas: 11)\n 15016: a3 = s1 + 0x1070\n 15020: a4 = a3 + 0x100\n 15024: a0 = u64 [a4 + 0x40]\n 15027: a1 = u64 [a4 + 0x48]\n 15030: a2 = u64 [a4 + 0x38]\n 15033: a3 = u64 [a4 + 0x30]\n 15036: a1 = a1 | a2\n 15039: a0 = a0 | a3\n 15042: a0 = a0 | a1\n 15045: a1 = 0x1\n 15048: jump @550 if a0 == 0\n      : @538 (gas: 12)\n 15052: a2 = s1 + 0x1070\n 15056: u64 [a2 + 296] = 0\n 15060: a0 = u64 [s1 + 0xe8]\n 15064: a3 = a2 + 0x100\n 15068: u64 [a3 + 0x10] = a0\n 15071: a0 = u64 [s1 + 0xe0]\n 15075: u64 [a3 + 0x18] = a0\n 15078: a1 = s1 + 0x1180\n 15082: a0 = u64 [s1 + 0xf0]\n 15086: u64 [a3 + 0x20] = a0\n 15089: a0 = 0\n 15091: ra = 524, jump @19\n      : @539 [@dyn 262] (gas: 3)\n 15097: t0 = 0x20e\n 15101: a1 = s1 + 0x1070\n 15105: fallthrough\n      : @540 [@dyn 263] (gas: 8)\n 15106: u64 [a1 + 264] = 0\n 15110: u64 [a1 + 256] = 0\n 15114: u64 [a1 + 240] = 0x5\n 15119: a2 = a1\n 15121: a0 = 0x20\n 15124: a1 = s1 + 0x1160\n 15128: u64 [a2 + 248] = 0\n 15132: ra = 528, jump @19\n      : @541 [@dyn 264] (gas: 3)\n 15138: a2 = u64 [s1 + 0xd8]\n 15142: a0 = i32 [a2]\n 15144: jump @543 if a0 >u 63\n      : @542 (gas: 3)\n 15148: u32 [a2 + 0] = 0x40\n 15151: t0 = 0x212\n 15155: jump @935\n      : @543 (gas: 1)\n 15158: t0 = 530, jump @935\n      : @544 [@dyn 265] (gas: 4)\n 15164: ra = 0x214\n 15168: ecalli 6 // 'hash_keccak_256'\n 15170: t0 = 0x216\n 15174: jump @912\n      : @545 [@dyn 266] (gas: 1)\n 15177: t0 = 534, jump @912\n      : @546 [@dyn 267] (gas: 7)\n 15183: u64 [a5 + 0xe8] = a3\n 15187: u64 [a5 + 0xe0] = a2\n 15191: u64 [a5 + 0xd8] = a1\n 15195: u64 [a5 + 0xd0] = a0\n 15199: a0 = s1 + 0x1140\n 15203: a1 = s1 + 0x1840\n 15207: ra = 536, jump @21\n      : @547 [@dyn 268] (gas: 17)\n 15213: a1 = s1 + 0x1070\n 15217: a0 = u64 [a1 + 0xd0]\n 15221: u64 [s1 + 0xf8] = a0\n 15225: a0 = u64 [a1 + 0xd8]\n 15229: u64 [s1 + 0xf0] = a0\n 15233: a0 = u64 [a1 + 0xe0]\n 15237: u64 [s1 + 0xe8] = a0\n 15241: a0 = u64 [a1 + 0xe8]\n 15245: u64 [s1 + 0xe0] = a0\n 15249: a1 = s1 + 0x1878\n 15253: u64 [a1 + 0] = 0\n 15255: u64 [a1 + 4294967288] = 0\n 15258: u64 [a1 + 4294967280] = 0\n 15261: u64 [a1 + 4294967272] = 0x6\n 15265: a0 = s1 + 0x1120\n 15269: a1 = s1 + 0x1860\n 15273: ra = 538, jump @21\n      : @548 [@dyn 269] (gas: 21)\n 15279: a4 = s1 + 0x1070\n 15283: a0 = u64 [a4 + 0xb0]\n 15287: a1 = u64 [a4 + 0xb8]\n 15291: a2 = u64 [a4 + 0xc0]\n 15295: a3 = u64 [a4 + 0xc8]\n 15299: u64 [a4 + 0x68] = a3\n 15302: u64 [a4 + 0x60] = a2\n 15305: u64 [a4 + 0x58] = a1\n 15308: u64 [a4 + 0x50] = a0\n 15311: a0 = u64 [s1 + 0xe0]\n 15315: u64 [a4 + 0x88] = a0\n 15319: a0 = u64 [s1 + 0xe8]\n 15323: u64 [a4 + 0x80] = a0\n 15327: a0 = u64 [s1 + 0xf0]\n 15331: u64 [a4 + 0x78] = a0\n 15334: a0 = s1 + 0x1100\n 15338: a1 = s1 + 0x10e0\n 15342: a2 = s1 + 0x10c0\n 15346: a3 = u64 [s1 + 0xf8]\n 15350: u64 [a4 + 0x70] = a3\n 15353: ra = 540, jump @813\n      : @549 [@dyn 270] (gas: 33)\n 15359: a1 = s1 + 0x1070\n 15363: a0 = u64 [a1 + 0x90]\n 15367: u64 [s1 + 0xf8] = a0\n 15371: a0 = u64 [a1 + 0x98]\n 15375: u64 [s1 + 0xf0] = a0\n 15379: a0 = u64 [a1 + 0xa0]\n 15383: u64 [s1 + 0xe8] = a0\n 15387: a0 = u64 [a1 + 0xa8]\n 15391: u64 [s1 + 0xe0] = a0\n 15395: a0 = s1 + 0x2000\n 15399: i32 a0 = a0 + 0xfffffffffffff880\n 15403: ecalli 7 // 'now'\n 15405: a3 = s1 + 0x1878\n 15409: a0 = u64 [a3 + 0x20]\n 15412: t0 = u64 [a3 + 0x8]\n 15415: a2 = u64 [a3 + 0x18]\n 15418: a3 = u64 [a3 + 0x10]\n 15421: a1 = u64 [s1 + 0xe0]\n 15425: a4 = a0 ^ a1\n 15428: a1 = a1 <u a0\n 15431: a0 = u64 [s1 + 0xe8]\n 15435: a5 = a0 <u a2\n 15438: a5 = a1 if a4 != 0\n 15441: a1 = u64 [s1 + 0xf0]\n 15445: t1 = a3 ^ a1\n 15448: a3 = a1 <u a3\n 15451: a1 = u64 [s1 + 0xf8]\n 15455: a1 = a1 <u t0\n 15458: a1 = a3 if t1 != 0\n 15461: a0 = a0 ^ a2\n 15464: a0 = a0 | a4\n 15467: a1 = a5 if a0 != 0\n 15470: fallthrough\n      : @550 (gas: 4)\n 15471: u64 [s1 + 0xf8] = a1\n 15475: a0 = s1 + 0x10a0\n 15479: a1 = 0x40\n 15482: ra = 542, jump @17\n      : @551 [@dyn 271] (gas: 6)\n 15488: a3 = s1 + 0x1070\n 15492: a0 = u64 [a3 + 0x48]\n 15495: a1 = u64 [a3 + 0x40]\n 15498: a2 = u64 [a3 + 0x38]\n 15501: a4 = u64 [a3 + 0x30]\n 15504: t0 = 544, jump @919\n      : @552 [@dyn 272] (gas: 1)\n 15510: jump @609 if a0 != 0\n      : @553 (gas: 10)\n 15514: u64 [a3 + 40] = 0\n 15517: u64 [a3 + 32] = 0\n 15520: a0 = u64 [s1 + 0xf8]\n 15524: u64 [a3 + 0x10] = a0\n 15527: a1 = s1 + 0x1080\n 15531: u64 [a3 + 24] = 0\n 15534: a0 = a4\n 15536: u64 [s1 + 0xf8] = a4\n 15540: ra = 0x254\n 15544: jump @19\n      : @554 (gas: 10)\n 15547: u64 [a2 + 808] = 0\n 15551: u64 [a2 + 800] = 0\n 15555: u64 [a2 + 792] = 0\n 15559: u64 [a2 + 784] = 0\n 15563: a0 = s1 + 0x1000\n 15567: i32 a0 = a0 + 0x380\n 15571: ra = 0x222\n 15575: ecalli 11 // 'value_transferred'\n 15577: t0 = 0x224\n 15581: jump @924\n      : @555 [@dyn 273] (gas: 1)\n 15584: t0 = 548, jump @924\n      : @556 [@dyn 274] (gas: 8)\n 15590: a0 = u64 [a4 + 0x20]\n 15593: a1 = u64 [a4 + 0x28]\n 15596: a2 = u64 [a4 + 0x18]\n 15599: a3 = u64 [a4 + 0x10]\n 15602: a1 = a1 | a2\n 15605: a0 = a0 | a3\n 15608: a0 = a0 | a1\n 15611: jump @668 if a0 != 0\n      : @557 (gas: 3)\n 15615: a0 = u64 [s1 + 0xf8]\n 15619: a1 = i32 [a0]\n 15621: jump @669 if a1 <=u 3\n      : @558 (gas: 8)\n 15626: a1 = s1 + 0x1070\n 15630: u64 [a1 + 840] = 0\n 15634: u64 [a1 + 832] = 0\n 15638: u64 [a1 + 824] = 0\n 15642: u64 [a1 + 816] = 0x3\n 15647: a0 = s1 + 0x260\n 15651: a1 = s1 + 0x13a0\n 15655: ra = 550, jump @21\n      : @559 [@dyn 275] (gas: 34)\n 15661: a1 = s1 + 0x200\n 15665: a2 = u64 [a1 + 0x70]\n 15668: a3 = u64 [a1 + 0x68]\n 15671: a5 = u64 [a1 + 0x78]\n 15674: a0 = u64 [a1 + 0x60]\n 15677: a4 = a2 << 0x3f\n 15680: a1 = a3 >> 0x1\n 15683: t0 = a1 | a4\n 15686: a1 = a5 << 0x3f\n 15689: u64 [s1 + 0xf0] = a2\n 15693: a2 = a2 >> 0x1\n 15696: a1 = a1 | a2\n 15699: u64 [s1 + 0xe0] = a3\n 15703: a2 = a3 << 0x3f\n 15706: a3 = a0 >> 0x1\n 15709: a4 = a3 | a2\n 15712: u64 [s1 + 0xe8] = a5\n 15716: t1 = a5 >> 0x1\n 15719: u64 [s1 + 0xd0] = a0\n 15723: a5 = a0 & 0x1\n 15726: a3 = -a5\n 15728: t2 = a3 & a1\n 15731: a2 = a3 & t0\n 15734: a3 = a3 & t1\n 15737: a0 = a4 & 0x7f\n 15740: u64 [s1 + 0xd8] = a0\n 15744: a4 = a0 if a5 == 0\n 15747: a0 = a4 <u 0x20\n 15750: a0 = 0 if a2 != 0\n 15752: a1 = t2 | a3\n 15755: a0 = 0 if a1 != 0\n 15757: u64 [s1 + 0xf8] = a5\n 15761: a1 = a5 <u 0x1\n 15764: jump @670 if a1 != a0\n      : @560 (gas: 12)\n 15768: u64 [s1 + 0xb8] = a4\n 15772: a5 = s1 + 0x200\n 15776: u64 [a5 + 0x40] = a4\n 15779: u64 [s1 + 0xa8] = a2\n 15783: u64 [a5 + 0x48] = a2\n 15786: u64 [s1 + 0xb0] = t2\n 15790: u64 [s1 + 0x250] = t2\n 15794: a0 = 0x80\n 15798: a1 = s1 + 0x240\n 15802: u64 [s1 + 0xa0] = a3\n 15806: u64 [a5 + 0x58] = a3\n 15809: ra = 552, jump @19\n      : @561 [@dyn 276] (gas: 2)\n 15815: a0 = u64 [s1 + 0xf8]\n 15819: jump @597 if a0 != 0\n      : @562 (gas: 13)\n 15823: a0 = u64 [s1 + 0xd0]\n 15827: a0 = a0 & 0xffffffffffffff00\n 15831: a1 = u64 [s1 + 0xe0]\n 15835: a2 = s1 + 0x100\n 15839: u64 [a2 + 0xc8] = a1\n 15843: u64 [a2 + 0xc0] = a0\n 15847: a0 = u64 [s1 + 0xf0]\n 15851: u64 [a2 + 0xd0] = a0\n 15855: a0 = u64 [s1 + 0xe8]\n 15859: u64 [a2 + 0xd8] = a0\n 15863: a0 = 0xa0\n 15867: a1 = s1 + 0x1c0\n 15871: ra = 554, jump @19\n      : @563 [@dyn 277] (gas: 7)\n 15877: a1 = 0\n 15879: a0 = 0\n 15881: t0 = 0\n 15883: a3 = 0xc0\n 15887: a2 = u64 [s1 + 0xd8]\n 15891: a3 = 0xa0 if a2 == 0\n 15895: jump @605\n      : @564 (gas: 10)\n 15898: u64 [a2 + 1896] = 0\n 15902: u64 [a2 + 1888] = 0\n 15906: u64 [a2 + 1880] = 0\n 15910: u64 [a2 + 1872] = 0\n 15914: a0 = s1 + 0x1000\n 15918: i32 a0 = a0 + 0x7c0\n 15922: ra = 0x22c\n 15926: ecalli 11 // 'value_transferred'\n 15928: t0 = 0x22e\n 15932: jump @939\n      : @565 [@dyn 278] (gas: 1)\n 15935: t0 = 558, jump @939\n      : @566 [@dyn 279] (gas: 1)\n 15941: t0 = 560, jump @936\n      : @567 [@dyn 280] (gas: 1)\n 15947: jump @676 if a0 != 0\n      : @568 (gas: 4)\n 15951: a0 = u64 [s1 + 0xf8]\n 15955: a0 = i32 [a0]\n 15957: a1 = 0x43\n 15960: jump @677 if a1 >=u a0\n      : @569 (gas: 4)\n 15964: a0 = s1 + 0x1060\n 15968: ra = 0x232\n 15972: t0 = 0x2fc\n 15976: jump @946\n      : @570 [@dyn 281] (gas: 33)\n 15979: a1 = s1 + 0x7ff\n 15983: a1 = a1 + 0x71\n 15986: a0 = u64 [a1 + 0x7f0]\n 15990: u64 [s1 + 0xf8] = a0\n 15994: a0 = u64 [a1 + 0x7f8]\n 15998: u64 [s1 + 0xf0] = a0\n 16002: a1 = s1 + 0x1070\n 16006: a0 = u64 [a1]\n 16008: u64 [s1 + 0xe8] = a0\n 16012: a0 = u64 [a1 + 0x8]\n 16015: u64 [s1 + 0xe0] = a0\n 16019: a0 = s1 + 0x1000\n 16023: i32 a0 = a0 + 0x7e0\n 16027: a1 = 0x24\n 16030: ecalli 1 // 'call_data_load'\n 16032: a1 = s1 + 0x1070\n 16036: a2 = a1 + 0x700\n 16040: a0 = u64 [a2 + 0x70]\n 16043: u64 [s1 + 0xd8] = a0\n 16047: a0 = u64 [a2 + 0x78]\n 16050: u64 [s1 + 0xd0] = a0\n 16054: a0 = u64 [a2 + 0x80]\n 16058: u64 [s1 + 0xc8] = a0\n 16062: a0 = u64 [a2 + 0x88]\n 16066: u64 [s1 + 0xc0] = a0\n 16070: a0 = 0x30110\n 16075: u64 [s1 + 0xb8] = a0\n 16079: i32 a0 = a0 + 0\n 16081: ra = 0x234\n 16085: ecalli 3 // 'caller'\n 16087: a2 = u64 [s1 + 0xb8]\n 16091: t0 = 0x236\n 16095: jump @932\n      : @571 [@dyn 282] (gas: 2)\n 16098: a2 = u64 [s1 + 0xb8]\n 16102: t0 = 566, jump @932\n      : @572 [@dyn 283] (gas: 32)\n 16108: a0 = a0 >> 0x20\n 16111: a2 = reverse a2\n 16113: a3 = a2 << 0x20\n 16116: a0 = a0 | a3\n 16119: a2 = a2 >> 0x20\n 16122: a3 = s1 + 0x7ff\n 16126: a3 = a3 + 0x71\n 16129: a4 = u64 [s1 + 0xc0]\n 16133: a5 = a3 + 0x700\n 16137: u64 [a5 + 0xa8] = a4\n 16141: a4 = u64 [s1 + 0xc8]\n 16145: u64 [a5 + 0xa0] = a4\n 16149: a4 = u64 [s1 + 0xd0]\n 16153: u64 [a5 + 0x98] = a4\n 16157: a4 = u64 [s1 + 0xd8]\n 16161: u64 [a5 + 0x90] = a4\n 16165: a4 = u64 [s1 + 0xe0]\n 16169: u64 [a5 + 0xc8] = a4\n 16173: a4 = u64 [s1 + 0xe8]\n 16177: u64 [a5 + 0xc0] = a4\n 16181: a4 = u64 [s1 + 0xf0]\n 16185: u64 [a5 + 0xb8] = a4\n 16189: a4 = u64 [s1 + 0xf8]\n 16193: u64 [a5 + 0xb0] = a4\n 16197: u64 [a5 + 0xe0] = a2\n 16201: u64 [a5 + 0xd8] = a0\n 16205: u64 [a5 + 0xd0] = a1\n 16209: a0 = s1 + 0x1040\n 16213: a1 = s1 + 0x1020\n 16217: a2 = s1 + 0x1000\n 16221: u64 [a3 + 2024] = 0\n 16225: ra = 568, jump @835\n      : @573 [@dyn 284] (gas: 4)\n 16231: a0 = s1 + 0x7ff\n 16235: a0 = a0 + 0x7e1\n 16239: a1 = 0x40\n 16242: ra = 570, jump @17\n      : @574 [@dyn 285] (gas: 8)\n 16248: a3 = s1 + 0x7ff\n 16252: a3 = a3 + 0x71\n 16255: a5 = a3 + 0x700\n 16259: a4 = u64 [a5 + 0x88]\n 16263: a1 = u64 [a5 + 0x80]\n 16267: a2 = u64 [a5 + 0x78]\n 16270: a0 = u64 [a5 + 0x70]\n 16273: t0 = 572, jump @930\n      : @575 [@dyn 286] (gas: 1)\n 16279: jump @609 if a1 != 0\n      : @576 (gas: 9)\n 16283: u64 [a3 + 1896] = 0\n 16287: u64 [a3 + 1888] = 0\n 16291: u64 [a3 + 1872] = 0x1\n 16296: a1 = s1 + 0x7ff\n 16300: a1 = a1 + 0x7c1\n 16304: u64 [a3 + 1880] = 0\n 16308: u64 [s1 + 0xf8] = a0\n 16312: ra = 0x254\n 16316: jump @19\n      : @577 (gas: 1)\n 16319: jump @678 if a0 != 1889567281\n      : @578 (gas: 10)\n 16327: u64 [a2 + 1704] = 0\n 16331: u64 [a2 + 1696] = 0\n 16335: u64 [a2 + 1688] = 0\n 16339: u64 [a2 + 1680] = 0\n 16343: a0 = s1 + 0x1000\n 16347: i32 a0 = a0 + 0x700\n 16351: ra = 0x23e\n 16355: ecalli 11 // 'value_transferred'\n 16357: t0 = 0x240\n 16361: jump @925\n      : @579 [@dyn 287] (gas: 1)\n 16364: t0 = 576, jump @925\n      : @580 [@dyn 288] (gas: 1)\n 16370: t0 = 578, jump @945\n      : @581 [@dyn 289] (gas: 1)\n 16376: jump @683 if a0 != 0\n      : @582 (gas: 4)\n 16380: a0 = u64 [s1 + 0xf8]\n 16384: a0 = i32 [a0]\n 16386: a1 = 0x23\n 16389: jump @684 if a1 >=u a0\n      : @583 (gas: 5)\n 16393: a0 = s1 + 0x7ff\n 16397: a0 = a0 + 0x561\n 16401: ra = 0x244\n 16405: t0 = 0x2fc\n 16409: jump @946\n      : @584 [@dyn 290] (gas: 14)\n 16412: a3 = s1 + 0x7ff\n 16416: a3 = a3 + 0x71\n 16419: a4 = a3 + 0x400\n 16423: a0 = u64 [a4 + 0xf0]\n 16427: a1 = u64 [a4 + 0xf8]\n 16431: a2 = u32 [a3 + 0x500]\n 16435: u64 [a3 + 1256] = 0\n 16439: u64 [a4 + 0xe0] = a2\n 16443: u64 [a4 + 0xd8] = a1\n 16447: a1 = s1 + 0x7ff\n 16451: a1 = a1 + 0x541\n 16455: u64 [a4 + 0xd0] = a0\n 16459: a0 = 0\n 16461: ra = 582, jump @19\n      : @585 [@dyn 291] (gas: 11)\n 16467: a0 = s1 + 0x7ff\n 16471: a0 = a0 + 0x71\n 16474: u64 [a0 + 1224] = 0\n 16478: u64 [a0 + 1216] = 0\n 16482: u64 [a0 + 1208] = 0\n 16486: a2 = a0\n 16488: a0 = 0x20\n 16491: a1 = s1 + 0x7ff\n 16495: a1 = a1 + 0x521\n 16499: u64 [a2 + 1200] = 0\n 16503: ra = 584, jump @19\n      : @586 [@dyn 292] (gas: 2)\n 16509: a1 = i32 [0x200fc]\n 16514: jump @588 if a1 >u 63\n      : @587 (gas: 2)\n 16518: u32 [0x200fc] = 0x40\n 16524: fallthrough\n      : @588 (gas: 12)\n 16525: a0 = sp + 0xffffffffffffffe0\n 16528: a2 = a0 & 0xffffffffffffffe0\n 16531: u64 [s1 + 0xf8] = a2\n 16535: sp = a2\n 16537: a0 = 0x20110\n 16542: i32 a0 = a0 + 0\n 16544: i32 a2 = a2 + 0\n 16546: a1 = 0x40\n 16549: ra = 0x24a\n 16553: ecalli 6 // 'hash_keccak_256'\n 16555: t0 = 0x24c\n 16559: jump @913\n      : @589 [@dyn 293] (gas: 1)\n 16562: t0 = 588, jump @913\n      : @590 [@dyn 294] (gas: 8)\n 16568: u64 [a5 + 0xc8] = a3\n 16572: u64 [a5 + 0xc0] = a2\n 16576: u64 [a5 + 0xb8] = a1\n 16580: u64 [a5 + 0xb0] = a0\n 16584: a0 = s1 + 0x7ff\n 16588: a0 = a0 + 0x501\n 16592: a1 = s1 + 0x1720\n 16596: ra = 590, jump @21\n      : @591 [@dyn 295] (gas: 15)\n 16602: a1 = s1 + 0x7ff\n 16606: a1 = a1 + 0x71\n 16609: a2 = a1 + 0x400\n 16613: a0 = u64 [a2 + 0xa8]\n 16617: u64 [s1 + 0xf8] = a0\n 16621: a0 = u64 [a2 + 0xa0]\n 16625: u64 [s1 + 0xf0] = a0\n 16629: a0 = u64 [a2 + 0x98]\n 16633: u64 [s1 + 0xe8] = a0\n 16637: a0 = u64 [a2 + 0x90]\n 16641: u64 [s1 + 0xe0] = a0\n 16645: a0 = s1 + 0x7ff\n 16649: a0 = a0 + 0x4e1\n 16653: a1 = 0x40\n 16656: ra = 592, jump @17\n      : @592 [@dyn 296] (gas: 8)\n 16662: a3 = s1 + 0x7ff\n 16666: a3 = a3 + 0x71\n 16669: a5 = a3 + 0x400\n 16673: a0 = u64 [a5 + 0x88]\n 16677: a1 = u64 [a5 + 0x80]\n 16681: a2 = u64 [a5 + 0x78]\n 16684: a4 = u64 [a5 + 0x70]\n 16687: t0 = 594, jump @919\n      : @593 [@dyn 297] (gas: 1)\n 16693: jump @609 if a0 != 0\n      : @594 (gas: 14)\n 16697: a0 = u64 [s1 + 0xe0]\n 16701: a2 = a3 + 0x400\n 16705: u64 [a2 + 0x50] = a0\n 16708: a0 = u64 [s1 + 0xe8]\n 16712: u64 [a2 + 0x58] = a0\n 16715: a0 = u64 [s1 + 0xf0]\n 16719: u64 [a2 + 0x60] = a0\n 16722: a1 = s1 + 0x7ff\n 16726: a1 = a1 + 0x4c1\n 16730: a0 = u64 [s1 + 0xf8]\n 16734: u64 [a2 + 0x68] = a0\n 16737: a0 = a4\n 16739: u64 [s1 + 0xf8] = a4\n 16743: ra = 596, jump @19\n      : @595 [@dyn 298] (gas: 3)\n 16749: a1 = 0x20\n 16752: a0 = u64 [s1 + 0xf8]\n 16756: ra = 598, jump @26\n      : @596 [@dyn 299] (gas: 5)\n 16762: i32 a1 = a0 + 0\n 16764: a2 = 0x20\n 16767: a0 = 0\n 16769: ecalli 8 // 'seal_return'\n 16771: fallthrough\n      : @597 (gas: 7)\n 16772: u64 [s1 + 568] = 0\n 16776: u64 [s1 + 560] = 0\n 16780: u64 [s1 + 552] = 0\n 16784: a1 = s1 + 0x220\n 16788: u64 [s1 + 544] = 0x3\n 16793: a0 = 0\n 16795: ra = 600, jump @19\n      : @598 [@dyn 300] (gas: 21)\n 16801: a0 = sp + 0xffffffffffffffe0\n 16804: a1 = a0 & 0xffffffffffffffe0\n 16807: sp = a1\n 16809: u64 [s1 + 248] = 0\n 16813: a5 = 0\n 16815: t2 = 0\n 16817: t0 = 0\n 16819: t1 = u64 [0x20090]\n 16824: a2 = u64 [0x20098]\n 16829: ra = u64 [0x200a0]\n 16834: a0 = u64 [0x200a8]\n 16839: u64 [a1 + 0x18] = t1\n 16842: u64 [s1 + 0xd0] = a2\n 16846: u64 [a1 + 0x10] = a2\n 16849: u64 [a1 + 0x8] = ra\n 16852: a2 = a0\n 16854: u64 [a1] = a0\n 16856: a0 = 0xffffff60\n 16866: u64 [s1 + 0x98] = a0\n 16870: u64 [s1 + 0x90] = a1\n 16874: fallthrough\n      : @599 (gas: 19)\n 16875: u64 [s1 + 0xd8] = a2\n 16879: a0 = u64 [s1 + 0xb8]\n 16883: a2 = u64 [s1 + 0xf8]\n 16887: a0 = a2 <u a0\n 16890: a2 = u64 [s1 + 0xa8]\n 16894: a3 = a5 ^ a2\n 16897: u64 [s1 + 0xf0] = a5\n 16901: a2 = a5 <u a2\n 16904: a2 = a0 if a3 == 0\n 16907: a4 = u64 [s1 + 0xb0]\n 16911: a0 = t2 <u a4\n 16914: a3 = u64 [s1 + 0xa0]\n 16918: a5 = t0 ^ a3\n 16921: a3 = t0 <u a3\n 16924: a3 = a0 if a5 == 0\n 16927: a0 = t2 ^ a4\n 16930: a0 = a0 | a5\n 16933: a3 = a2 if a0 == 0\n 16936: jump @604 if a3 == 0\n      : @600 (gas: 6)\n 16940: a0 = s1 + 0x200\n 16944: u64 [s1 + 0xe8] = t0\n 16948: u64 [s1 + 0xc8] = t1\n 16952: u64 [s1 + 0xe0] = t2\n 16956: u64 [s1 + 0xc0] = ra\n 16960: ra = 602, jump @21\n      : @601 [@dyn 301] (gas: 10)\n 16966: a5 = u64 [s1 + 0xe0]\n 16970: a0 = u64 [s1 + 0xe8]\n 16974: a0 = a0 | a5\n 16977: a1 = u64 [s1 + 0xf8]\n 16981: a2 = u64 [s1 + 0x98]\n 16985: a1 = a1 <u a2\n 16988: a2 = u64 [s1 + 0xf0]\n 16992: a1 = 0 if a2 != 0\n 16994: a1 = 0 if a0 != 0\n 16996: jump @609 if a1 == 0\n      : @602 (gas: 14)\n 17000: t0 = u64 [s1 + 0x218]\n 17004: a0 = s1 + 0x200\n 17008: a1 = u64 [a0 + 0x10]\n 17011: a3 = u64 [a0 + 0x8]\n 17014: a4 = u64 [a0]\n 17016: a0 = u64 [s1 + 0xf8]\n 17020: i32 a0 = a0 + 0xa0\n 17024: a2 = s1 + 0x100\n 17028: u64 [a2 + 0xe0] = a4\n 17032: u64 [a2 + 0xe8] = a3\n 17036: u64 [a2 + 0xf0] = a1\n 17040: a1 = s1 + 0x1e0\n 17044: u64 [s1 + 0x1f8] = t0\n 17048: ra = 604, jump @19\n      : @603 [@dyn 302] (gas: 36)\n 17054: t0 = u64 [s1 + 0xe8]\n 17058: a5 = u64 [s1 + 0xd8]\n 17062: a5 = a5 + 0x1\n 17065: a0 = a5 <u 0x1\n 17068: ra = u64 [s1 + 0xc0]\n 17072: ra = ra + a0\n 17075: a0 = a5 | ra\n 17078: a0 = a0 <u 0x1\n 17081: a1 = u64 [s1 + 0xd0]\n 17085: a0 = a0 + a1\n 17088: a1 = a0 <u a1\n 17091: a3 = u64 [s1 + 0xc8]\n 17095: a3 = a3 + a1\n 17098: a1 = u64 [s1 + 0xf8]\n 17102: t1 = a1 + 0x20\n 17105: a2 = t1 <u a1\n 17108: a4 = u64 [s1 + 0xf0]\n 17112: t2 = a4 + a2\n 17115: a4 = t2 <u a4\n 17118: a4 = a2 if a2 == 0\n 17121: a1 = u64 [s1 + 0xe0]\n 17125: a4 = a4 + a1\n 17128: a2 = a4 <u a1\n 17131: t0 = t0 + a2\n 17134: a1 = u64 [s1 + 0x90]\n 17138: u64 [a1 + 0x8] = ra\n 17141: a2 = a5\n 17143: u64 [a1] = a5\n 17145: u64 [a1 + 0x10] = a0\n 17148: u64 [a1 + 0x18] = a3\n 17151: u64 [s1 + 0xd0] = a0\n 17155: u64 [s1 + 0xf8] = t1\n 17159: a5 = t2\n 17161: t2 = a4\n 17163: t1 = a3\n 17165: jump @599\n      : @604 (gas: 11)\n 17168: a0 = u64 [s1 + 0xf8]\n 17172: a3 = a0 + 0xa0\n 17176: a0 = a3 <u a0\n 17179: a2 = u64 [s1 + 0xf0]\n 17183: a1 = a2 + a0\n 17186: a2 = a1 <u a2\n 17189: a2 = a0 if a0 == 0\n 17192: a0 = t2 + a2\n 17195: a2 = a0 <u t2\n 17198: t0 = t0 + a2\n 17201: fallthrough\n      : @605 (gas: 37)\n 17202: t1 = a3 + 0xffffffffffffff9f\n 17205: a3 = t1 <u a3\n 17208: a5 = a1 + a3\n 17211: a5 = a5 + 0xffffffffffffffff\n 17214: u64 [s1 + 0xd8] = a5\n 17218: a2 = a5 ^ a1\n 17221: a1 = a5 <u a1\n 17224: a1 = a3 if a2 == 0\n 17227: a3 = a0 + 0xffffffffffffffff\n 17230: a4 = a3 + a1\n 17233: a1 = a4 <u a3\n 17236: a0 = a0 <u 0x1\n 17239: a2 = t0 - a0\n 17242: t0 = a2 + a1\n 17245: u64 [s1 + 0xc0] = t0\n 17249: a0 = t1 & 0xffffffffffffffe0\n 17252: u64 [s1 + 0xd0] = a0\n 17256: a3 = a0 + 0x80\n 17260: u64 [s1 + 0xf8] = a3\n 17264: a0 = a3 <u a0\n 17267: a2 = a5 + a0\n 17270: u64 [s1 + 0xf0] = a2\n 17274: a1 = a2 <u a5\n 17277: a1 = a0 if a0 == 0\n 17280: u64 [s1 + 0xc8] = a4\n 17284: a1 = a1 + a4\n 17287: u64 [s1 + 0xe8] = a1\n 17291: a0 = a1 <u a4\n 17294: t0 = t0 + a0\n 17297: u64 [s1 + 0xe0] = t0\n 17301: u64 [s1 + 0x1a0] = a3\n 17305: u64 [s1 + 0x1a8] = a2\n 17309: u64 [s1 + 0x1b0] = a1\n 17313: a0 = 0x40\n 17316: a1 = s1 + 0x1a0\n 17320: u64 [s1 + 0x1b8] = t0\n 17324: ra = 606, jump @19\n      : @606 [@dyn 303] (gas: 17)\n 17330: u64 [s1 + 344] = 0\n 17334: u64 [s1 + 336] = 0\n 17338: u64 [s1 + 328] = 0\n 17342: a4 = s1 + 0x100\n 17346: u64 [a4 + 64] = 0x80\n 17351: a0 = u64 [s1 + 0xe0]\n 17355: u64 [a4 + 0x78] = a0\n 17358: a0 = u64 [s1 + 0xe8]\n 17362: u64 [a4 + 0x70] = a0\n 17365: a0 = u64 [s1 + 0xf0]\n 17369: u64 [a4 + 0x68] = a0\n 17372: a0 = s1 + 0x180\n 17376: a1 = s1 + 0x160\n 17380: a2 = s1 + 0x140\n 17384: a3 = u64 [s1 + 0xf8]\n 17388: u64 [a4 + 0x60] = a3\n 17391: ra = 608, jump @784\n      : @607 [@dyn 304] (gas: 10)\n 17397: a0 = u64 [s1 + 0xc8]\n 17401: a1 = u64 [s1 + 0xc0]\n 17405: a0 = a0 | a1\n 17408: a1 = 0xffffff80\n 17418: a2 = u64 [s1 + 0xd0]\n 17422: a1 = a2 <u a1\n 17425: a2 = u64 [s1 + 0xd8]\n 17429: a1 = 0 if a2 != 0\n 17431: a1 = 0 if a0 != 0\n 17433: jump @609 if a1 == 0\n      : @608 (gas: 30)\n 17436: ra = u64 [s1 + 0x190]\n 17440: a1 = u64 [s1 + 0x198]\n 17444: t1 = u64 [s1 + 0x180]\n 17448: a3 = u64 [s1 + 0x188]\n 17452: a2 = u64 [s1 + 0xe8]\n 17456: a4 = ra <u a2\n 17459: a1 = a1 - a4\n 17462: a0 = u64 [s1 + 0xe0]\n 17466: t0 = a1 - a0\n 17469: a1 = u64 [s1 + 0xf0]\n 17473: a4 = a3 ^ a1\n 17476: a5 = a3 <u a1\n 17479: a0 = u64 [s1 + 0xf8]\n 17483: t2 = t1 <u a0\n 17486: a5 = t2 if a4 == 0\n 17489: a2 = ra - a2\n 17492: a4 = a2 <u a5\n 17495: a4 = t0 - a4\n 17498: a5 = a2 - a5\n 17501: a3 = a3 - t2\n 17504: a3 = a3 - a1\n 17507: a1 = t1 - a0\n 17510: a2 = a1 | a5\n 17513: a3 = a3 | a4\n 17516: a2 = a2 | a3\n 17519: a2 = a2 >> 0x20\n 17522: a3 = a3 | a5\n 17525: a3 = a3 << 0x20\n 17528: a2 = a2 | a3\n 17531: jump @713 if a2 == 0\n      : @609 (gas: 1)\n 17535: trap\n      : @610 (gas: 10)\n 17536: a2 = s1 + 0x7ff\n 17540: a2 = a2 + 0x71\n 17543: u64 [a2 + 1768] = 0\n 17547: u64 [a2 + 1760] = 0\n 17551: u64 [a2 + 1752] = 0\n 17555: a1 = s1 + 0x7ff\n 17559: a1 = a1 + 0x741\n 17563: u64 [a2 + 1744] = 0x4\n 17568: a0 = 0\n 17570: ra = 610, jump @19\n      : @611 [@dyn 305] (gas: 37)\n 17576: a0 = sp + 0xffffffffffffffe0\n 17579: a4 = a0 & 0xffffffffffffffe0\n 17582: sp = a4\n 17584: u64 [s1 + 248] = 0\n 17588: t2 = 0\n 17590: t1 = 0\n 17592: u64 [s1 + 240] = 0\n 17596: t0 = u64 [0x20028]\n 17601: a3 = u64 [0x20030]\n 17606: a1 = u64 [s1 + 0x70]\n 17609: a0 = a1 + 0x20\n 17612: u64 [s1 + 0x90] = a0\n 17616: a0 = a0 <u a1\n 17619: a1 = u64 [s1 + 0x60]\n 17622: a2 = a1 + a0\n 17625: u64 [s1 + 0x88] = a2\n 17629: a1 = a2 <u a1\n 17632: a1 = a0 if a0 == 0\n 17635: a5 = u64 [0x20038]\n 17640: a0 = u64 [0x20040]\n 17645: ra = t0\n 17647: u64 [a4 + 0x18] = t0\n 17650: u64 [s1 + 0xb8] = a3\n 17654: u64 [a4 + 0x10] = a3\n 17657: t0 = a5\n 17659: u64 [a4 + 0x8] = a5\n 17662: u64 [s1 + 0xd8] = a4\n 17666: a2 = a0\n 17668: u64 [a4] = a0\n 17670: a0 = u64 [s1 + 0x68]\n 17673: a1 = a1 + a0\n 17676: u64 [s1 + 0x80] = a1\n 17680: a0 = a1 <u a0\n 17683: a1 = u64 [s1 + 0x58]\n 17686: a0 = a0 + a1\n 17689: u64 [s1 + 0x78] = a0\n 17692: fallthrough\n      : @612 (gas: 21)\n 17693: u64 [s1 + 0xc0] = a2\n 17697: u64 [s1 + 0xc8] = t0\n 17701: u64 [s1 + 0xd0] = ra\n 17705: a0 = u64 [s1 + 0xb0]\n 17709: a1 = u64 [s1 + 0xf8]\n 17713: a0 = a1 <u a0\n 17716: a2 = u64 [s1 + 0xa0]\n 17720: a1 = t2 ^ a2\n 17723: a2 = t2 <u a2\n 17726: a2 = a0 if a1 == 0\n 17729: a4 = u64 [s1 + 0xa8]\n 17733: a0 = t1 <u a4\n 17736: a3 = u64 [s1 + 0x98]\n 17740: a1 = u64 [s1 + 0xf0]\n 17744: a5 = a1 ^ a3\n 17747: a3 = a1 <u a3\n 17750: a3 = a0 if a5 == 0\n 17753: a0 = t1 ^ a4\n 17756: a0 = a0 | a5\n 17759: a3 = a2 if a0 == 0\n 17762: jump @614 if a3 != 0\n      : @613 (gas: 1)\n 17765: jump @382\n      : @614 (gas: 6)\n 17768: a0 = s1 + 0x7ff\n 17772: a0 = a0 + 0x721\n 17776: a1 = u64 [s1 + 0xd8]\n 17780: u64 [s1 + 0xe8] = t1\n 17784: u64 [s1 + 0xe0] = t2\n 17788: ra = 612, jump @21\n      : @615 [@dyn 306] (gas: 30)\n 17794: t2 = u64 [s1 + 0xf8]\n 17798: t1 = u64 [s1 + 0xe0]\n 17802: ra = u64 [s1 + 0xe8]\n 17806: a1 = u64 [s1 + 0x90]\n 17810: a0 = a1 + t2\n 17813: a1 = a0 <u a1\n 17816: a4 = u64 [s1 + 0x88]\n 17820: a2 = a4 + t1\n 17823: a2 = a2 + a1\n 17826: a5 = a2 ^ a4\n 17829: a4 = a2 <u a4\n 17832: a4 = a1 if a5 == 0\n 17835: a5 = u64 [s1 + 0x80]\n 17839: a1 = a5 + ra\n 17842: t0 = a1 <u a5\n 17845: a5 = u64 [s1 + 0xf0]\n 17849: a3 = u64 [s1 + 0x78]\n 17852: a5 = a5 + a3\n 17855: a5 = a5 + t0\n 17858: a4 = a4 + a1\n 17861: a1 = a4 <u a1\n 17864: a1 = a1 + a5\n 17867: a1 = a1 | a2\n 17870: a2 = a0 | a4\n 17873: a2 = a2 | a1\n 17876: a1 = a1 | a4\n 17879: a2 = a2 >> 0x20\n 17882: a1 = a1 << 0x20\n 17885: a1 = a1 | a2\n 17888: jump @609 if a1 != 0\n      : @616 (gas: 15)\n 17892: a5 = s1 + 0x7ff\n 17896: a5 = a5 + 0x71\n 17899: t0 = u64 [a5 + 0x6c8]\n 17903: a3 = a5 + 0x600\n 17907: a1 = u64 [a3 + 0xc0]\n 17911: a2 = u64 [a3 + 0xb8]\n 17915: a4 = u64 [a3 + 0xb0]\n 17919: u64 [a3 + 0x90] = a4\n 17923: u64 [a3 + 0x98] = a2\n 17927: u64 [a3 + 0xa0] = a1\n 17931: a1 = s1 + 0x7ff\n 17935: a1 = a1 + 0x701\n 17939: u64 [a5 + 0x6a8] = t0\n 17943: u64 [s1 + 0xf8] = t2\n 17947: ra = 614, jump @19\n      : @617 [@dyn 307] (gas: 39)\n 17953: a3 = u64 [s1 + 0xc0]\n 17957: a3 = a3 + 0x1\n 17960: a0 = a3 <u 0x1\n 17963: ra = u64 [s1 + 0xc8]\n 17967: ra = ra + a0\n 17970: a0 = a3 | ra\n 17973: a0 = a0 <u 0x1\n 17976: a1 = u64 [s1 + 0xb8]\n 17980: t2 = a1 + a0\n 17983: a1 = t2 <u a1\n 17986: a0 = u64 [s1 + 0xd0]\n 17990: a0 = a0 + a1\n 17993: a1 = u64 [s1 + 0xf8]\n 17997: t1 = a1 + 0x20\n 18000: a2 = t1 <u a1\n 18003: a4 = u64 [s1 + 0xe0]\n 18007: a1 = a4 + a2\n 18010: a4 = a1 <u a4\n 18013: a4 = a2 if a2 == 0\n 18016: a2 = u64 [s1 + 0xe8]\n 18020: a4 = a4 + a2\n 18023: a2 = a4 <u a2\n 18026: a5 = u64 [s1 + 0xf0]\n 18030: a5 = a5 + a2\n 18033: u64 [s1 + 0xf0] = a5\n 18037: t0 = ra\n 18039: a5 = u64 [s1 + 0xd8]\n 18043: u64 [a5 + 0x8] = ra\n 18046: a2 = a3\n 18048: u64 [a5] = a3\n 18050: a3 = t2\n 18052: u64 [a5 + 0x10] = a3\n 18055: ra = a0\n 18057: u64 [a5 + 0x18] = a0\n 18060: u64 [s1 + 0xb8] = a3\n 18064: u64 [s1 + 0xf8] = t1\n 18068: t2 = a1\n 18070: t1 = a4\n 18072: jump @612\n      : @618 (gas: 6)\n 18075: a0 = u64 [s1 + 0xe0]\n 18079: ra = 0x268\n 18083: ecalli 3 // 'caller'\n 18085: a2 = u64 [s1 + 0xf0]\n 18089: t0 = 0x26a\n 18093: jump @934\n      : @619 [@dyn 308] (gas: 2)\n 18096: a2 = u64 [s1 + 0xf0]\n 18100: t0 = 618, jump @934\n      : @620 [@dyn 309] (gas: 1)\n 18106: jump @685 if a0 == 0\n      : @621 (gas: 28)\n 18110: a0 = u64 [s1 + 0xe0]\n 18114: ecalli 3 // 'caller'\n 18116: a2 = u64 [s1 + 0xf0]\n 18120: a0 = u64 [a2 + 0x8]\n 18123: a1 = i32 [a2 + 0x10]\n 18126: a3 = u64 [a2]\n 18128: a0 = reverse a0\n 18130: a2 = a0 << 0x20\n 18133: a1 = reverse a1\n 18135: a1 = a1 >> 0x20\n 18138: a2 = a2 | a1\n 18141: a0 = a0 >> 0x20\n 18144: a1 = reverse a3\n 18146: a3 = a1 << 0x20\n 18149: a0 = a0 | a3\n 18152: a1 = a1 >> 0x20\n 18155: u64 [s1 + 1400] = 0\n 18159: u64 [s1 + 1392] = 0\n 18163: u64 [s1 + 1384] = 0x5\n 18168: a3 = 0x6bc75e2d63100000\n 18178: u64 [s1 + 0x560] = a3\n 18182: u64 [s1 + 1432] = 0\n 18186: u64 [s1 + 0x590] = a1\n 18190: u64 [s1 + 0x588] = a0\n 18194: a0 = s1 + 0x580\n 18198: a1 = s1 + 0x560\n 18202: u64 [s1 + 0x580] = a2\n 18206: ra = 620, jump @885\n      : @622 [@dyn 310] (gas: 6)\n 18212: a0 = u64 [s1 + 0xe0]\n 18216: ra = 0x26e\n 18220: ecalli 3 // 'caller'\n 18222: a2 = u64 [s1 + 0xf0]\n 18226: t0 = 0x270\n 18230: jump @908\n      : @623 [@dyn 311] (gas: 2)\n 18233: a2 = u64 [s1 + 0xf0]\n 18237: t0 = 624, jump @908\n      : @624 [@dyn 312] (gas: 7)\n 18243: u64 [s1 + 1368] = 0\n 18247: u64 [s1 + 0x550] = a1\n 18251: u64 [s1 + 0x548] = a0\n 18255: a1 = s1 + 0x540\n 18259: u64 [s1 + 0x540] = a3\n 18263: a0 = 0\n 18265: ra = 626, jump @19\n      : @625 [@dyn 313] (gas: 7)\n 18271: u64 [s1 + 1336] = 0\n 18275: u64 [s1 + 1328] = 0\n 18279: u64 [s1 + 1312] = 0x5\n 18284: a0 = 0x20\n 18287: a1 = s1 + 0x520\n 18291: u64 [s1 + 1320] = 0\n 18295: ra = 628, jump @19\n      : @626 [@dyn 314] (gas: 5)\n 18301: a0 = s1 + 0x1000\n 18305: i32 a0 = a0 + 0x4e0\n 18309: ecalli 7 // 'now'\n 18311: a1 = s1 + 0x1070\n 18315: fallthrough\n      : @627 (gas: 12)\n 18316: a2 = a1 + 0x400\n 18320: a0 = u64 [a2 + 0x88]\n 18324: u64 [s1 + 0xd8] = a0\n 18328: a0 = u64 [a2 + 0x80]\n 18332: u64 [s1 + 0xe0] = a0\n 18336: a0 = u64 [a2 + 0x78]\n 18339: u64 [s1 + 0xf0] = a0\n 18343: a0 = u64 [s1 + 0xf8]\n 18347: a0 = i32 [a0]\n 18349: a1 = u64 [a2 + 0x70]\n 18352: u64 [s1 + 0xd0] = a1\n 18356: jump @629 if a0 >u 63\n      : @628 (gas: 3)\n 18360: a1 = u64 [s1 + 0xf8]\n 18364: u32 [a1 + 0] = 0x40\n 18367: fallthrough\n      : @629 (gas: 12)\n 18368: a0 = sp + 0xffffffffffffffe0\n 18371: a0 = a0 & 0xffffffffffffffe0\n 18374: u64 [s1 + 0xf8] = a0\n 18378: sp = a0\n 18380: i32 a2 = a0 + 0\n 18382: a1 = 0x40\n 18385: a0 = u64 [s1 + 0xe8]\n 18389: ra = 0x276\n 18393: ecalli 6 // 'hash_keccak_256'\n 18395: a3 = u64 [s1 + 0xf8]\n 18399: t0 = 0x278\n 18403: jump @916\n      : @630 [@dyn 315] (gas: 2)\n 18406: a3 = u64 [s1 + 0xf8]\n 18410: t0 = 632, jump @916\n      : @631 [@dyn 316] (gas: 15)\n 18416: u64 [a5 + 0xa8] = a3\n 18420: u64 [a5 + 0xa0] = a2\n 18424: u64 [a5 + 0x98] = a1\n 18428: u64 [a5 + 0x90] = a0\n 18432: a0 = u64 [s1 + 0xd8]\n 18436: u64 [a5 + 0xc8] = a0\n 18440: a0 = u64 [s1 + 0xe0]\n 18444: u64 [a5 + 0xc0] = a0\n 18448: a0 = u64 [s1 + 0xf0]\n 18452: u64 [a5 + 0xb8] = a0\n 18456: a0 = u64 [s1 + 0xd0]\n 18460: u64 [a5 + 0xb0] = a0\n 18464: a0 = s1 + 0x1500\n 18468: a1 = s1 + 0x1520\n 18472: ra = 634, jump @22\n      : @632 [@dyn 317] (gas: 5)\n 18478: a0 = 0\n 18480: a1 = u64 [s1 + 0xe8]\n 18484: a2 = 0\n 18486: ecalli 8 // 'seal_return'\n 18488: jump @721\n      : @633 (gas: 6)\n 18491: a1 = 0x20110\n 18496: i32 a1 = a1 + 0\n 18498: a0 = 0x1\n 18501: a2 = 0\n 18503: ecalli 8 // 'seal_return'\n 18505: jump @721\n      : @634 (gas: 6)\n 18508: a1 = 0x20110\n 18513: i32 a1 = a1 + 0\n 18515: a0 = 0x1\n 18518: a2 = 0\n 18520: ecalli 8 // 'seal_return'\n 18522: jump @721\n      : @635 (gas: 6)\n 18525: a1 = 0x20110\n 18530: i32 a1 = a1 + 0\n 18532: a0 = 0x1\n 18535: a2 = 0\n 18537: ecalli 8 // 'seal_return'\n 18539: jump @721\n      : @636 (gas: 6)\n 18542: a1 = 0x20110\n 18547: i32 a1 = a1 + 0\n 18549: a0 = 0x1\n 18552: a2 = 0\n 18554: ecalli 8 // 'seal_return'\n 18556: jump @721\n      : @637 (gas: 6)\n 18559: a1 = 0x20110\n 18564: i32 a1 = a1 + 0\n 18566: a0 = 0x1\n 18569: a2 = 0\n 18571: ecalli 8 // 'seal_return'\n 18573: jump @721\n      : @638 (gas: 6)\n 18576: a1 = 0x20110\n 18581: i32 a1 = a1 + 0\n 18583: a0 = 0x1\n 18586: a2 = 0\n 18588: ecalli 8 // 'seal_return'\n 18590: jump @721\n      : @639 (gas: 6)\n 18593: a1 = 0x20110\n 18598: i32 a1 = a1 + 0\n 18600: a0 = 0x1\n 18603: a2 = 0\n 18605: ecalli 8 // 'seal_return'\n 18607: jump @721\n      : @640 (gas: 6)\n 18610: a1 = 0x20110\n 18615: i32 a1 = a1 + 0\n 18617: a0 = 0x1\n 18620: a2 = 0\n 18622: ecalli 8 // 'seal_return'\n 18624: jump @721\n      : @641 (gas: 11)\n 18627: a2 = s1 + 0x7ff\n 18631: a2 = a2 + 0x71\n 18634: u64 [a2 + 1440] = 0\n 18638: u64 [a2 + 1432] = 0\n 18642: u64 [a2 + 1424] = 0\n 18646: a0 = 0x4e487b7100000000\n 18656: a1 = s1 + 0x7ff\n 18660: a1 = a1 + 0x601\n 18664: u64 [a2 + 0x5a8] = a0\n 18668: a0 = 0\n 18670: ra = 636, jump @19\n      : @642 [@dyn 318] (gas: 11)\n 18676: a1 = s1 + 0x7ff\n 18680: a1 = a1 + 0x71\n 18683: u64 [a1 + 1416] = 0\n 18687: u64 [a1 + 1408] = 0\n 18691: u64 [a1 + 1392] = 0x22\n 18696: a2 = a1\n 18698: a0 = 0x4\n 18701: a1 = s1 + 0x7ff\n 18705: a1 = a1 + 0x5e1\n 18709: u64 [a2 + 1400] = 0\n 18713: ra = 638, jump @19\n      : @643 [@dyn 319] (gas: 2)\n 18719: a1 = i32 [0x200fc]\n 18724: jump @645 if a1 >u 63\n      : @644 (gas: 3)\n 18728: u32 [0x200fc] = 0x40\n 18734: a1 = 0x20110\n 18739: jump @695\n      : @645 (gas: 2)\n 18742: a1 = 0x20110\n 18747: jump @695\n      : @646 (gas: 6)\n 18750: a1 = 0x20110\n 18755: i32 a1 = a1 + 0\n 18757: a0 = 0x1\n 18760: a2 = 0\n 18762: ecalli 8 // 'seal_return'\n 18764: jump @721\n      : @647 (gas: 6)\n 18767: a1 = 0x20110\n 18772: i32 a1 = a1 + 0\n 18774: a0 = 0x1\n 18777: a2 = 0\n 18779: ecalli 8 // 'seal_return'\n 18781: jump @721\n      : @648 (gas: 8)\n 18784: u64 [s1 + 688] = 0\n 18788: u64 [s1 + 680] = 0\n 18792: u64 [s1 + 672] = 0\n 18796: a0 = 0xe602df0500000000\n 18806: a1 = s1 + 0x2a0\n 18810: u64 [s1 + 0x2b8] = a0\n 18814: a0 = 0\n 18816: ra = 640, jump @19\n      : @649 [@dyn 320] (gas: 7)\n 18822: u64 [s1 + 664] = 0\n 18826: u64 [s1 + 656] = 0\n 18830: u64 [s1 + 648] = 0\n 18834: a0 = 0x4\n 18837: a1 = s1 + 0x280\n 18841: u64 [s1 + 640] = 0\n 18845: ra = 642, jump @19\n      : @650 [@dyn 321] (gas: 2)\n 18851: a1 = i32 [0x200fc]\n 18856: jump @652 if a1 >u 63\n      : @651 (gas: 3)\n 18860: u32 [0x200fc] = 0x40\n 18866: a1 = 0x20110\n 18871: jump @695\n      : @652 (gas: 2)\n 18874: a1 = 0x20110\n 18879: jump @695\n      : @653 (gas: 8)\n 18882: u64 [s1 + 752] = 0\n 18886: u64 [s1 + 744] = 0\n 18890: u64 [s1 + 736] = 0\n 18894: a0 = 0x94280d6200000000\n 18904: a1 = s1 + 0x2e0\n 18908: u64 [s1 + 0x2f8] = a0\n 18912: a0 = 0\n 18914: ra = 644, jump @19\n      : @654 [@dyn 322] (gas: 7)\n 18920: u64 [s1 + 728] = 0\n 18924: u64 [s1 + 720] = 0\n 18928: u64 [s1 + 712] = 0\n 18932: a0 = 0x4\n 18935: a1 = s1 + 0x2c0\n 18939: u64 [s1 + 704] = 0\n 18943: ra = 646, jump @19\n      : @655 [@dyn 323] (gas: 2)\n 18949: a1 = i32 [0x200fc]\n 18954: jump @657 if a1 >u 63\n      : @656 (gas: 3)\n 18958: u32 [0x200fc] = 0x40\n 18964: a1 = 0x20110\n 18969: jump @695\n      : @657 (gas: 2)\n 18972: a1 = 0x20110\n 18977: jump @695\n      : @658 (gas: 6)\n 18980: a1 = 0x20110\n 18985: i32 a1 = a1 + 0\n 18987: a0 = 0x1\n 18990: a2 = 0\n 18992: ecalli 8 // 'seal_return'\n 18994: jump @721\n      : @659 (gas: 6)\n 18997: a1 = 0x20110\n 19002: i32 a1 = a1 + 0\n 19004: a0 = 0x1\n 19007: a2 = 0\n 19009: ecalli 8 // 'seal_return'\n 19011: jump @721\n      : @660 (gas: 6)\n 19014: a1 = 0x20110\n 19019: i32 a1 = a1 + 0\n 19021: a0 = 0x1\n 19024: a2 = 0\n 19026: ecalli 8 // 'seal_return'\n 19028: jump @721\n      : @661 (gas: 6)\n 19031: a1 = 0x20110\n 19036: i32 a1 = a1 + 0\n 19038: a0 = 0x1\n 19041: a2 = 0\n 19043: ecalli 8 // 'seal_return'\n 19045: jump @721\n      : @662 (gas: 6)\n 19048: a1 = 0x20110\n 19053: i32 a1 = a1 + 0\n 19055: a0 = 0x1\n 19058: a2 = 0\n 19060: ecalli 8 // 'seal_return'\n 19062: jump @721\n      : @663 (gas: 6)\n 19065: a1 = 0x20110\n 19070: i32 a1 = a1 + 0\n 19072: a0 = 0x1\n 19075: a2 = 0\n 19077: ecalli 8 // 'seal_return'\n 19079: jump @721\n      : @664 (gas: 6)\n 19082: a1 = 0x20110\n 19087: i32 a1 = a1 + 0\n 19089: a0 = 0x1\n 19092: a2 = 0\n 19094: ecalli 8 // 'seal_return'\n 19096: jump @721\n      : @665 (gas: 6)\n 19099: a1 = 0x20110\n 19104: i32 a1 = a1 + 0\n 19106: a0 = 0x1\n 19109: a2 = 0\n 19111: ecalli 8 // 'seal_return'\n 19113: jump @721\n      : @666 (gas: 6)\n 19116: a1 = 0x20110\n 19121: i32 a1 = a1 + 0\n 19123: a0 = 0x1\n 19126: a2 = 0\n 19128: ecalli 8 // 'seal_return'\n 19130: jump @721\n      : @667 (gas: 6)\n 19133: a1 = 0x20110\n 19138: i32 a1 = a1 + 0\n 19140: a0 = 0x1\n 19143: a2 = 0\n 19145: ecalli 8 // 'seal_return'\n 19147: jump @721\n      : @668 (gas: 6)\n 19150: a1 = 0x20110\n 19155: i32 a1 = a1 + 0\n 19157: a0 = 0x1\n 19160: a2 = 0\n 19162: ecalli 8 // 'seal_return'\n 19164: jump @721\n      : @669 (gas: 6)\n 19167: a1 = 0x20110\n 19172: i32 a1 = a1 + 0\n 19174: a0 = 0x1\n 19177: a2 = 0\n 19179: ecalli 8 // 'seal_return'\n 19181: jump @721\n      : @670 (gas: 6)\n 19184: u64 [s1 + 304] = 0\n 19188: u64 [s1 + 296] = 0\n 19192: u64 [s1 + 288] = 0\n 19196: t0 = 0x288\n 19200: a0 = 0x4e487b7100000000\n 19210: fallthrough\n      : @671 [@dyn 324] (gas: 4)\n 19211: a1 = s1 + 0x120\n 19215: u64 [s1 + 0x138] = a0\n 19219: a0 = 0\n 19221: ra = 650, jump @19\n      : @672 [@dyn 325] (gas: 7)\n 19227: u64 [s1 + 280] = 0\n 19231: u64 [s1 + 272] = 0\n 19235: u64 [s1 + 256] = 0x22\n 19240: a0 = 0x4\n 19243: a1 = s1 + 0x100\n 19247: u64 [s1 + 264] = 0\n 19251: ra = 652, jump @19\n      : @673 [@dyn 326] (gas: 2)\n 19257: a1 = i32 [0x200fc]\n 19262: jump @675 if a1 >u 63\n      : @674 (gas: 3)\n 19266: u32 [0x200fc] = 0x40\n 19272: a1 = 0x20110\n 19277: jump @695\n      : @675 (gas: 2)\n 19280: a1 = 0x20110\n 19285: jump @695\n      : @676 (gas: 6)\n 19288: a1 = 0x20110\n 19293: i32 a1 = a1 + 0\n 19295: a0 = 0x1\n 19298: a2 = 0\n 19300: ecalli 8 // 'seal_return'\n 19302: jump @721\n      : @677 (gas: 6)\n 19305: a1 = 0x20110\n 19310: i32 a1 = a1 + 0\n 19312: a0 = 0x1\n 19315: a2 = 0\n 19317: ecalli 8 // 'seal_return'\n 19319: jump @721\n      : @678 (gas: 1)\n 19322: jump @715 if a0 != 581501058\n      : @679 (gas: 10)\n 19330: a0 = s1 + 0x1070\n 19334: u64 [a0 + 1256] = 0\n 19338: u64 [a0 + 1248] = 0\n 19342: u64 [a0 + 1240] = 0\n 19346: u64 [a0 + 1232] = 0\n 19350: a0 = s1 + 0x1000\n 19354: i32 a0 = a0 + 0x540\n 19358: ra = 0x28e\n 19362: ecalli 11 // 'value_transferred'\n 19364: fallthrough\n      : @680 [@dyn 327] (gas: 3)\n 19365: a3 = s1 + 0x1070\n 19369: a4 = a3 + 0x400\n 19373: t0 = 656, jump @926\n      : @681 [@dyn 328] (gas: 1)\n 19379: jump @721 if a0 == 0\n      : @682 (gas: 6)\n 19383: a1 = 0x20110\n 19388: i32 a1 = a1 + 0\n 19390: a0 = 0x1\n 19393: a2 = 0\n 19395: ecalli 8 // 'seal_return'\n 19397: jump @721\n      : @683 (gas: 6)\n 19400: a1 = 0x20110\n 19405: i32 a1 = a1 + 0\n 19407: a0 = 0x1\n 19410: a2 = 0\n 19412: ecalli 8 // 'seal_return'\n 19414: jump @721\n      : @684 (gas: 6)\n 19417: a1 = 0x20110\n 19422: i32 a1 = a1 + 0\n 19424: a0 = 0x1\n 19427: a2 = 0\n 19429: ecalli 8 // 'seal_return'\n 19431: jump @721\n      : @685 (gas: 8)\n 19434: u64 [s1 + 1296] = 0\n 19438: u64 [s1 + 1288] = 0\n 19442: u64 [s1 + 1280] = 0\n 19446: a0 = 0xec442f0500000000\n 19456: a1 = s1 + 0x500\n 19460: u64 [s1 + 0x518] = a0\n 19464: a0 = 0\n 19466: ra = 658, jump @19\n      : @686 [@dyn 329] (gas: 7)\n 19472: u64 [s1 + 1272] = 0\n 19476: u64 [s1 + 1264] = 0\n 19480: u64 [s1 + 1256] = 0\n 19484: a0 = 0x4\n 19487: a1 = s1 + 0x4e0\n 19491: u64 [s1 + 1248] = 0\n 19495: ra = 660, jump @19\n      : @687 [@dyn 330] (gas: 3)\n 19501: a0 = u64 [s1 + 0xf8]\n 19505: a0 = i32 [a0]\n 19507: jump @689 if a0 >u 63\n      : @688 (gas: 3)\n 19511: a1 = u64 [s1 + 0xf8]\n 19515: u32 [a1 + 0] = 0x40\n 19518: fallthrough\n      : @689 (gas: 5)\n 19519: a0 = 0x1\n 19522: a2 = 0x24\n 19525: a1 = u64 [s1 + 0xe8]\n 19529: ecalli 8 // 'seal_return'\n 19531: fallthrough\n      : @690 (gas: 12)\n 19532: a0 = s1 + 0x7ff\n 19536: a0 = a0 + 0x71\n 19539: u64 [a0 + 1504] = 0\n 19543: u64 [a0 + 1496] = 0\n 19547: u64 [a0 + 1488] = 0\n 19551: a2 = a0\n 19553: a0 = 0x4e487b7100000000\n 19563: a1 = s1 + 0x7ff\n 19567: a1 = a1 + 0x641\n 19571: u64 [a2 + 0x5e8] = a0\n 19575: a0 = 0\n 19577: ra = 662, jump @19\n      : @691 [@dyn 331] (gas: 11)\n 19583: a1 = s1 + 0x7ff\n 19587: a1 = a1 + 0x71\n 19590: u64 [a1 + 1480] = 0\n 19594: u64 [a1 + 1472] = 0\n 19598: u64 [a1 + 1456] = 0x41\n 19603: a2 = a1\n 19605: a0 = 0x4\n 19608: a1 = s1 + 0x7ff\n 19612: a1 = a1 + 0x621\n 19616: u64 [a2 + 1464] = 0\n 19620: ra = 664, jump @19\n      : @692 [@dyn 332] (gas: 2)\n 19626: a1 = i32 [0x200fc]\n 19631: jump @694 if a1 >u 63\n      : @693 (gas: 3)\n 19635: u32 [0x200fc] = 0x40\n 19641: a1 = 0x20110\n 19646: jump @695\n      : @694 (gas: 2)\n 19648: a1 = 0x20110\n 19653: fallthrough\n      : @695 (gas: 5)\n 19654: i32 a1 = a1 + 0\n 19656: a0 = 0x1\n 19659: a2 = 0x24\n 19662: ecalli 8 // 'seal_return'\n 19664: fallthrough\n      : @696 (gas: 9)\n 19665: u64 [a3 + 128] = 0\n 19669: u64 [a3 + 120] = 0\n 19672: u64 [a3 + 112] = 0\n 19675: a0 = 0xfb8f41b200000000\n 19685: a1 = s1 + 0x7ff\n 19689: a1 = a1 + 0xe1\n 19693: u64 [a3 + 0x88] = a0\n 19697: a0 = 0\n 19699: ra = 666, jump @19\n      : @697 [@dyn 333] (gas: 5)\n 19705: a0 = u64 [s1 + 0x80]\n 19709: ra = 0x29c\n 19713: ecalli 3 // 'caller'\n 19715: t0 = 0x29e\n 19719: jump @909\n      : @698 [@dyn 334] (gas: 1)\n 19722: t0 = 670, jump @909\n      : @699 [@dyn 335] (gas: 8)\n 19728: u64 [a2 + 104] = 0\n 19731: u64 [a2 + 0x60] = a1\n 19734: u64 [a2 + 0x58] = a0\n 19737: a0 = 0x4\n 19740: a1 = s1 + 0x7ff\n 19744: a1 = a1 + 0xc1\n 19748: u64 [a2 + 0x50] = a3\n 19751: ra = 672, jump @19\n      : @700 [@dyn 336] (gas: 14)\n 19757: a2 = s1 + 0x7ff\n 19761: a2 = a2 + 0x71\n 19764: a0 = u64 [s1 + 0x60]\n 19767: u64 [a2 + 0x48] = a0\n 19770: a0 = u64 [s1 + 0x58]\n 19773: u64 [a2 + 0x40] = a0\n 19776: a0 = u64 [s1 + 0x68]\n 19779: u64 [a2 + 0x38] = a0\n 19782: a0 = 0x24\n 19785: a1 = s1 + 0x7ff\n 19789: a1 = a1 + 0xa1\n 19793: a3 = u64 [s1 + 0x70]\n 19796: u64 [a2 + 0x30] = a3\n 19799: ra = 674, jump @19\n      : @701 [@dyn 337] (gas: 15)\n 19805: a0 = u64 [s1 + 0xe8]\n 19809: a1 = s1 + 0x7ff\n 19813: a1 = a1 + 0x71\n 19816: u64 [a1 + 0x28] = a0\n 19819: a0 = u64 [s1 + 0xe0]\n 19823: u64 [a1 + 0x20] = a0\n 19826: a0 = u64 [s1 + 0xd0]\n 19830: u64 [a1 + 0x18] = a0\n 19833: a3 = a1\n 19835: a0 = 0x44\n 19838: a1 = s1 + 0x7ff\n 19842: a1 = a1 + 0x81\n 19846: a2 = u64 [s1 + 0xd8]\n 19850: u64 [a3 + 0x10] = a2\n 19853: ra = 676, jump @19\n      : @702 [@dyn 338] (gas: 3)\n 19859: a0 = u64 [s1 + 0xb8]\n 19863: a0 = i32 [a0]\n 19865: jump @704 if a0 >u 127\n      : @703 (gas: 5)\n 19869: a1 = u64 [s1 + 0xb8]\n 19873: u32 [a1 + 0] = 0x80\n 19877: a0 = 0x1\n 19880: a2 = 0x64\n 19883: jump @712\n      : @704 (gas: 7)\n 19886: a0 = 0x1\n 19889: a2 = 0x64\n 19892: a1 = u64 [s1 + 0xc0]\n 19896: ecalli 8 // 'seal_return'\n 19898: u64 [s1 + 0xf8] = a1\n 19902: ra = 0x2ac\n 19906: jump @26\n      : @705 (gas: 12)\n 19909: a0 = s1 + 0x7ff\n 19913: a0 = a0 + 0x71\n 19916: u64 [a0 + 192] = 0\n 19920: u64 [a0 + 184] = 0\n 19924: u64 [a0 + 176] = 0\n 19928: a2 = a0\n 19930: a0 = 0xe602df0500000000\n 19940: a1 = s1 + 0x7ff\n 19944: a1 = a1 + 0x121\n 19948: u64 [a2 + 0xc8] = a0\n 19952: a0 = 0\n 19954: ra = 678, jump @19\n      : @706 [@dyn 339] (gas: 12)\n 19960: a0 = s1 + 0x7ff\n 19964: a0 = a0 + 0x71\n 19967: u64 [a0 + 168] = 0\n 19971: u64 [a0 + 160] = 0\n 19975: u64 [a0 + 152] = 0\n 19979: a2 = a0\n 19981: a0 = 0x4\n 19984: a1 = s1 + 0x7ff\n 19988: a1 = a1 + 0x101\n 19992: u64 [a2 + 144] = 0\n 19996: ra = 0x2aa\n 20000: jump @19\n      : @707 (gas: 12)\n 20003: a0 = s1 + 0x7ff\n 20007: a0 = a0 + 0x71\n 20010: u64 [a0 + 256] = 0\n 20014: u64 [a0 + 248] = 0\n 20018: u64 [a0 + 240] = 0\n 20022: a2 = a0\n 20024: a0 = 0x94280d6200000000\n 20034: a1 = s1 + 0x7ff\n 20038: a1 = a1 + 0x161\n 20042: u64 [a2 + 0x108] = a0\n 20046: a0 = 0\n 20048: ra = 680, jump @19\n      : @708 [@dyn 340] (gas: 11)\n 20054: a0 = s1 + 0x7ff\n 20058: a0 = a0 + 0x71\n 20061: u64 [a0 + 232] = 0\n 20065: u64 [a0 + 224] = 0\n 20069: u64 [a0 + 216] = 0\n 20073: a2 = a0\n 20075: a0 = 0x4\n 20078: a1 = s1 + 0x7ff\n 20082: a1 = a1 + 0x141\n 20086: u64 [a2 + 208] = 0\n 20090: ra = 682, jump @19\n      : @709 [@dyn 341] (gas: 3)\n 20096: a0 = u64 [s1 + 0xb8]\n 20100: a0 = i32 [a0]\n 20102: jump @711 if a0 >u 63\n      : @710 (gas: 5)\n 20106: a1 = u64 [s1 + 0xb8]\n 20110: u32 [a1 + 0] = 0x40\n 20113: a0 = 0x1\n 20116: a2 = 0x24\n 20119: jump @712\n      : @711 (gas: 7)\n 20121: a0 = 0x1\n 20124: a2 = 0x24\n 20127: a1 = u64 [s1 + 0xc0]\n 20131: ecalli 8 // 'seal_return'\n 20133: u64 [s1 + 0xf8] = a1\n 20137: ra = 0x2ac\n 20141: jump @26\n      : @712 (gas: 5)\n 20144: a1 = u64 [s1 + 0xc0]\n 20148: ecalli 8 // 'seal_return'\n 20150: u64 [s1 + 0xf8] = a1\n 20154: ra = 0x2ac\n 20158: jump @26\n      : @713 (gas: 2)\n 20161: u64 [s1 + 0xf8] = a1\n 20165: ra = 684, jump @26\n      : @714 [@dyn 342] (gas: 5)\n 20171: i32 a1 = a0 + 0\n 20173: a2 = i32 [s1 + 0xf8]\n 20177: a0 = 0\n 20179: ecalli 8 // 'seal_return'\n 20181: jump @597\n      : @715 (gas: 2)\n 20184: a2 = s1 + 0x1070\n 20188: jump @719 if a0 != 1212913468\n      : @716 (gas: 8)\n 20195: u64 [a2 + 1544] = 0\n 20199: u64 [a2 + 1536] = 0\n 20203: u64 [a2 + 1528] = 0\n 20207: u64 [a2 + 1520] = 0\n 20211: a0 = s1 + 0x1000\n 20215: i32 a0 = a0 + 0x660\n 20219: ecalli 11 // 'value_transferred'\n 20221: fallthrough\n      : @717 (gas: 9)\n 20222: a3 = s1 + 0x1070\n 20226: a0 = u64 [a3 + 0x600]\n 20230: a1 = u64 [a3 + 0x608]\n 20234: a2 = u64 [a3 + 0x5f8]\n 20238: a3 = u64 [a3 + 0x5f0]\n 20242: a1 = a1 | a2\n 20245: a0 = a0 | a3\n 20248: a0 = a0 | a1\n 20251: jump @723 if a0 == 0\n      : @718 (gas: 6)\n 20254: a1 = 0x20110\n 20259: i32 a1 = a1 + 0\n 20261: a0 = 0x1\n 20264: a2 = 0\n 20266: ecalli 8 // 'seal_return'\n 20268: jump @721\n      : @719 (gas: 6)\n 20270: a1 = 0x20110\n 20275: i32 a1 = a1 + 0\n 20277: a0 = 0x1\n 20280: a2 = 0\n 20282: ecalli 8 // 'seal_return'\n 20284: jump @721\n      : @720 (gas: 5)\n 20286: i32 a1 = a1 + 0\n 20288: a0 = 0x1\n 20291: a2 = 0\n 20293: ecalli 8 // 'seal_return'\n 20295: fallthrough\n      : @721 (gas: 3)\n 20296: a0 = u64 [s1 + 0xf8]\n 20300: a0 = i32 [a0]\n 20302: jump @725 if a0 >u 35\n      : @722 (gas: 2)\n 20306: a1 = 0x20110\n 20311: jump @720\n      : @723 (gas: 4)\n 20313: a0 = u64 [s1 + 0xf8]\n 20317: a0 = i32 [a0]\n 20319: a1 = 0x43\n 20322: jump @731 if a1 <u a0\n      : @724 (gas: 2)\n 20326: a1 = 0x20110\n 20331: jump @720\n      : @725 (gas: 8)\n 20333: a1 = s1 + 0x1070\n 20337: u64 [a1 + 1288] = 0\n 20341: u64 [a1 + 1280] = 0\n 20345: u64 [a1 + 1272] = 0\n 20349: u64 [a1 + 1264] = 0x7\n 20354: a0 = s1 + 0x7c0\n 20358: a1 = s1 + 0x1560\n 20362: ra = 686, jump @21\n      : @726 [@dyn 343] (gas: 14)\n 20368: a0 = u64 [s1 + 0x7c8]\n 20372: u64 [s1 + 0xf8] = a0\n 20376: a0 = u64 [s1 + 0x7c0]\n 20380: u64 [s1 + 0xf0] = a0\n 20384: a0 = u32 [s1 + 0x7d0]\n 20388: u64 [s1 + 0xe8] = a0\n 20392: a0 = 0x30110\n 20397: u64 [s1 + 0xe0] = a0\n 20401: i32 a0 = a0 + 0\n 20403: ra = 0x2b0\n 20407: ecalli 3 // 'caller'\n 20409: a2 = u64 [s1 + 0xe0]\n 20413: t0 = 0x2b2\n 20417: jump @914\n      : @727 [@dyn 344] (gas: 2)\n 20420: a2 = u64 [s1 + 0xe0]\n 20424: t0 = 690, jump @914\n      : @728 [@dyn 345] (gas: 15)\n 20430: a2 = u64 [s1 + 0xe8]\n 20434: a1 = a1 ^ a2\n 20437: a2 = u64 [s1 + 0xf0]\n 20441: a0 = a0 ^ a2\n 20444: a0 = a0 | a1\n 20447: a1 = u64 [s1 + 0xf8]\n 20451: a1 = a1 ^ a3\n 20454: a0 = a0 | a1\n 20457: a0 = a0 <u 0x1\n 20460: u64 [s1 + 1976] = 0\n 20464: u64 [s1 + 1968] = 0\n 20468: u64 [s1 + 0x7a0] = a0\n 20472: a0 = s1 + 0x7a0\n 20476: u64 [s1 + 1960] = 0\n 20480: ra = 692, jump @821\n      : @729 [@dyn 346] (gas: 21)\n 20486: a0 = s1 + 0x1000\n 20490: i32 a0 = a0 + 0x580\n 20494: a1 = 0x4\n 20497: ecalli 1 // 'call_data_load'\n 20499: a5 = s1 + 0x1070\n 20503: a0 = u64 [a5 + 0x510]\n 20507: a1 = u64 [a5 + 0x518]\n 20511: a2 = u64 [a5 + 0x520]\n 20515: a3 = u64 [a5 + 0x528]\n 20519: u64 [a5 + 1352] = 0\n 20523: u64 [a5 + 1344] = 0\n 20527: u64 [a5 + 1336] = 0\n 20531: u64 [a5 + 1328] = 0x6\n 20536: a4 = a5 + 0x500\n 20540: u64 [a4 + 0x68] = a3\n 20543: u64 [a4 + 0x60] = a2\n 20546: u64 [a4 + 0x58] = a1\n 20549: u64 [a4 + 0x50] = a0\n 20552: a0 = s1 + 0x15a0\n 20556: a1 = s1 + 0x15c0\n 20560: ra = 694, jump @22\n      : @730 [@dyn 347] (gas: 6)\n 20566: a1 = 0x20110\n 20571: i32 a1 = a1 + 0\n 20573: a0 = 0\n 20575: a2 = 0\n 20577: ecalli 8 // 'seal_return'\n 20579: jump @721\n      : @731 (gas: 5)\n 20582: a0 = s1 + 0x7ff\n 20586: a0 = a0 + 0x3e1\n 20590: ra = 0x2b8\n 20594: t0 = 0x2fc\n 20598: jump @946\n      : @732 [@dyn 348] (gas: 20)\n 20601: a1 = s1 + 0x7ff\n 20605: a1 = a1 + 0x71\n 20608: a2 = a1 + 0x300\n 20612: a0 = u64 [a2 + 0x88]\n 20616: u64 [s1 + 0xe0] = a0\n 20620: a0 = u64 [a2 + 0x80]\n 20624: u64 [s1 + 0xe8] = a0\n 20628: a0 = u64 [a2 + 0x78]\n 20631: u64 [s1 + 0xf0] = a0\n 20635: a0 = u64 [a2 + 0x70]\n 20638: u64 [s1 + 0xf8] = a0\n 20642: a1 = s1 + 0x1070\n 20646: u64 [a1 + 1576] = 0\n 20650: u64 [a1 + 1568] = 0\n 20654: u64 [a1 + 1560] = 0\n 20658: u64 [a1 + 1552] = 0x7\n 20663: a0 = s1 + 0x7ff\n 20667: a0 = a0 + 0x3c1\n 20671: a1 = s1 + 0x1680\n 20675: ra = 698, jump @21\n      : @733 [@dyn 349] (gas: 16)\n 20681: a0 = s1 + 0x7ff\n 20685: a0 = a0 + 0x71\n 20688: a1 = u64 [a0 + 0x358]\n 20692: u64 [s1 + 0xd8] = a1\n 20696: a1 = u64 [a0 + 0x350]\n 20700: u64 [s1 + 0xd0] = a1\n 20704: a0 = u32 [a0 + 0x360]\n 20708: u64 [s1 + 0xc8] = a0\n 20712: a0 = 0x30110\n 20717: u64 [s1 + 0xc0] = a0\n 20721: i32 a0 = a0 + 0\n 20723: ra = 0x2bc\n 20727: ecalli 3 // 'caller'\n 20729: a2 = u64 [s1 + 0xc0]\n 20733: t0 = 0x2be\n 20737: jump @914\n      : @734 [@dyn 350] (gas: 2)\n 20740: a2 = u64 [s1 + 0xc0]\n 20744: t0 = 702, jump @914\n      : @735 [@dyn 351] (gas: 18)\n 20750: a2 = u64 [s1 + 0xc8]\n 20754: a1 = a1 ^ a2\n 20757: a2 = u64 [s1 + 0xd0]\n 20761: a0 = a0 ^ a2\n 20764: a0 = a0 | a1\n 20767: a1 = u64 [s1 + 0xd8]\n 20771: a1 = a1 ^ a3\n 20774: a0 = a0 | a1\n 20777: a0 = a0 <u 0x1\n 20780: a1 = s1 + 0x7ff\n 20784: a1 = a1 + 0x71\n 20787: u64 [a1 + 840] = 0\n 20791: u64 [a1 + 832] = 0\n 20795: u64 [a1 + 0x330] = a0\n 20799: a0 = s1 + 0x7ff\n 20803: a0 = a0 + 0x3a1\n 20807: u64 [a1 + 824] = 0\n 20811: ra = 704, jump @821\n      : @736 [@dyn 352] (gas: 8)\n 20817: a0 = u64 [s1 + 0xe8]\n 20821: a0 = a0 << 0x20\n 20824: a0 = a0 >> 0x20\n 20827: a1 = u64 [s1 + 0xf0]\n 20831: a2 = u64 [s1 + 0xf8]\n 20835: a1 = a1 | a2\n 20838: a0 = a0 | a1\n 20841: jump @741 if a0 == 0\n      : @737 (gas: 7)\n 20845: a0 = s1 + 0x1000\n 20849: i32 a0 = a0 + 0x6a0\n 20853: a1 = 0x24\n 20856: ra = 0x2c2\n 20860: ecalli 1 // 'call_data_load'\n 20862: t0 = 0x2c4\n 20866: jump @925\n      : @738 [@dyn 353] (gas: 1)\n 20869: t0 = 708, jump @925\n      : @739 [@dyn 354] (gas: 24)\n 20875: a0 = u64 [a4 + 0x30]\n 20878: a1 = u64 [a4 + 0x38]\n 20881: a2 = u64 [a4 + 0x40]\n 20884: a3 = u64 [a4 + 0x48]\n 20887: a4 = s1 + 0x7ff\n 20891: a4 = a4 + 0x71\n 20894: a5 = a4 + 0x300\n 20898: u64 [a5 + 0x8] = a3\n 20901: u64 [a5] = a2\n 20903: u64 [a4 + 0x2f8] = a1\n 20907: u64 [a4 + 0x2f0] = a0\n 20911: a0 = u64 [s1 + 0xe0]\n 20915: u64 [a5 + 0x28] = a0\n 20918: a0 = u64 [s1 + 0xe8]\n 20922: u64 [a5 + 0x20] = a0\n 20925: a0 = u64 [s1 + 0xf0]\n 20929: u64 [a5 + 0x18] = a0\n 20932: a0 = s1 + 0x7ff\n 20936: a0 = a0 + 0x381\n 20940: a1 = s1 + 0x7ff\n 20944: a1 = a1 + 0x361\n 20948: a2 = u64 [s1 + 0xf8]\n 20952: u64 [a5 + 0x10] = a2\n 20955: ra = 710, jump @885\n      : @740 [@dyn 355] (gas: 6)\n 20961: a1 = 0x20110\n 20966: i32 a1 = a1 + 0\n 20968: a0 = 0\n 20970: a2 = 0\n 20972: ecalli 8 // 'seal_return'\n 20974: jump @721\n      : @741 (gas: 12)\n 20977: a0 = s1 + 0x7ff\n 20981: a0 = a0 + 0x71\n 20984: u64 [a0 + 736] = 0\n 20988: u64 [a0 + 728] = 0\n 20992: u64 [a0 + 720] = 0\n 20996: a2 = a0\n 20998: a0 = 0xec442f0500000000\n 21008: a1 = s1 + 0x7ff\n 21012: a1 = a1 + 0x341\n 21016: u64 [a2 + 0x2e8] = a0\n 21020: a0 = 0\n 21022: ra = 712, jump @19\n      : @742 [@dyn 356] (gas: 11)\n 21028: a0 = s1 + 0x7ff\n 21032: a0 = a0 + 0x71\n 21035: u64 [a0 + 712] = 0\n 21039: u64 [a0 + 704] = 0\n 21043: u64 [a0 + 696] = 0\n 21047: a2 = a0\n 21049: a0 = 0x4\n 21052: a1 = s1 + 0x7ff\n 21056: a1 = a1 + 0x321\n 21060: u64 [a2 + 688] = 0\n 21064: ra = 714, jump @19\n      : @743 [@dyn 357] (gas: 2)\n 21070: a1 = i32 [0x200fc]\n 21075: jump @745 if a1 >u 63\n      : @744 (gas: 3)\n 21079: u32 [0x200fc] = 0x40\n 21085: a1 = 0x20110\n 21090: jump @695\n      : @745 (gas: 2)\n 21093: a1 = 0x20110\n 21098: jump @695\n      : @746 (gas: 17)\n 21101: sp = sp + 0xffffffffffffff30\n 21105: u64 [sp + 0xc8] = ra\n 21109: u64 [sp + 0xc0] = s0\n 21113: u64 [sp + 0xb8] = s1\n 21117: s0 = sp + 0xd0\n 21121: sp = sp & 0xfffffffffffffff0\n 21124: a2 = u64 [a1 + 0x18]\n 21127: u64 [sp + 0x10] = a2\n 21130: a2 = u64 [a1 + 0x10]\n 21133: u64 [sp + 0x8] = a2\n 21136: a2 = u64 [a1 + 0x8]\n 21139: u64 [sp] = a2\n 21141: s1 = u64 [a1]\n 21143: u64 [sp + 0x28] = a0\n 21146: a0 = sp + 0x90\n 21150: a1 = 0x40\n 21153: ra = 716, jump @17\n      : @747 [@dyn 358] (gas: 39)\n 21159: a1 = u64 [sp + 0x98]\n 21163: a2 = u64 [sp + 0x90]\n 21167: a0 = s1 + 0x1f\n 21170: ra = a0 <u s1\n 21173: a3 = u64 [sp]\n 21175: a4 = a3 + ra\n 21178: a0 = a0 & 0xffffffffffffffe0\n 21181: t1 = a1 + a4\n 21184: t0 = a2 + a0\n 21187: u64 [sp + 0x20] = a2\n 21190: a5 = t0 <u a2\n 21193: t1 = t1 + a5\n 21196: s1 = t1 ^ a1\n 21199: u64 [sp + 0x18] = a1\n 21202: a2 = t1 <u a1\n 21205: a2 = a5 if s1 == 0\n 21208: t2 = u64 [sp + 0xa8]\n 21212: a4 = a4 <u a3\n 21215: s1 = u64 [sp + 0xa0]\n 21219: a4 = ra if ra == 0\n 21222: a0 = u64 [sp + 0x8]\n 21225: a4 = a4 + a0\n 21228: a5 = a4 <u a0\n 21231: a4 = a4 + s1\n 21234: a3 = a4 + a2\n 21237: a0 = u64 [sp + 0x10]\n 21240: a0 = a0 + t2\n 21243: a0 = a0 + a5\n 21246: a5 = a3 <u a4\n 21249: a4 = a4 <u s1\n 21252: a0 = a0 + a4\n 21255: a4 = a0 + a5\n 21258: a0 = a4 >u 0\n 21260: a5 = a3 >u 0\n 21262: a5 = a0 if a4 != 0\n 21265: a0 = a3 | a4\n 21268: a1 = t1 >u 0\n 21270: a1 = a5 if a0 != 0\n 21273: jump @751 if a1 != 0\n      : @748 (gas: 8)\n 21276: a0 = a3 <u s1\n 21279: a1 = a4 ^ t2\n 21282: a5 = a4 <u t2\n 21285: a5 = a0 if a1 == 0\n 21288: a0 = a3 ^ s1\n 21291: a0 = a0 | a1\n 21294: a2 = a5 if a0 != 0\n 21297: jump @751 if a2 != 0\n      : @749 (gas: 8)\n 21300: u64 [sp + 0x70] = t0\n 21303: u64 [sp + 0x78] = t1\n 21306: u64 [sp + 0x80] = a3\n 21310: a0 = 0x40\n 21313: a1 = sp + 0x70\n 21316: u64 [sp + 0x88] = a4\n 21320: u64 [sp + 0x10] = t2\n 21323: ra = 718, jump @19\n      : @750 [@dyn 359] (gas: 14)\n 21329: a0 = u64 [sp + 0x28]\n 21332: a1 = u64 [sp + 0x10]\n 21335: u64 [a0 + 0x18] = a1\n 21338: u64 [a0 + 0x10] = s1\n 21341: a1 = u64 [sp + 0x18]\n 21344: u64 [a0 + 0x8] = a1\n 21347: a1 = u64 [sp + 0x20]\n 21350: u64 [a0] = a1\n 21352: sp = s0 + 0xffffffffffffff30\n 21356: ra = u64 [sp + 0xc8]\n 21360: s0 = u64 [sp + 0xc0]\n 21364: s1 = u64 [sp + 0xb8]\n 21368: sp = sp + 0xd0\n 21372: ret\n      : @751 (gas: 6)\n 21374: u64 [sp + 96] = 0\n 21377: u64 [sp + 88] = 0\n 21380: u64 [sp + 80] = 0\n 21383: t0 = 0x2d0\n 21387: a0 = 0x4e487b7100000000\n 21397: fallthrough\n      : @752 [@dyn 360] (gas: 4)\n 21398: a1 = sp + 0x50\n 21401: u64 [sp + 0x68] = a0\n 21404: a0 = 0\n 21406: ra = 722, jump @19\n      : @753 [@dyn 361] (gas: 7)\n 21412: u64 [sp + 72] = 0\n 21415: u64 [sp + 64] = 0\n 21418: u64 [sp + 48] = 0x41\n 21422: a0 = 0x4\n 21425: a1 = sp + 0x30\n 21428: u64 [sp + 56] = 0\n 21431: ra = 724, jump @19\n      : @754 [@dyn 362] (gas: 2)\n 21437: a1 = i32 [0x200fc]\n 21442: jump @756 if a1 >u 63\n      : @755 (gas: 2)\n 21446: u32 [0x200fc] = 0x40\n 21452: fallthrough\n      : @756 (gas: 7)\n 21453: a1 = 0x20110\n 21458: i32 a1 = a1 + 0\n 21460: a0 = 0x1\n 21463: a2 = 0x24\n 21466: ra = 0x2d6\n 21470: ecalli 8 // 'seal_return'\n 21472: fallthrough\n      : @757 [@dyn 363] (gas: 37)\n 21473: sp = sp + 0xfffffffffffffe70\n 21477: u64 [sp + 0x188] = ra\n 21481: u64 [sp + 0x180] = s0\n 21485: u64 [sp + 0x178] = s1\n 21489: s0 = sp + 0x190\n 21493: sp = sp & 0xfffffffffffffff0\n 21496: t2 = u64 [a1]\n 21498: a4 = u64 [a2 + 0x8]\n 21501: ra = u64 [a1 + 0x8]\n 21504: s1 = u64 [a2]\n 21506: a3 = t2 + 0x1f\n 21509: t0 = a3 <u t2\n 21512: a5 = ra + t0\n 21515: u64 [sp + 0x20] = s1\n 21518: t1 = a3 <u s1\n 21521: a3 = a5 ^ a4\n 21524: u64 [sp + 0x28] = a4\n 21527: a4 = a5 <u a4\n 21530: a4 = t1 if a3 == 0\n 21533: s1 = u64 [a1 + 0x10]\n 21536: a3 = a5 <u ra\n 21539: a3 = t0 if t0 == 0\n 21542: a5 = u64 [a2 + 0x18]\n 21545: t0 = u64 [a1 + 0x18]\n 21548: t1 = u64 [a2 + 0x10]\n 21551: a3 = a3 + s1\n 21554: a1 = a3 <u s1\n 21557: a1 = a1 + t0\n 21560: a2 = a1 ^ a5\n 21563: u64 [sp + 0x10] = a5\n 21566: a1 = a1 <s a5\n 21569: a5 = a3 <u t1\n 21572: a1 = a5 if a2 == 0\n 21575: a3 = a3 ^ t1\n 21578: a2 = a2 | a3\n 21581: a4 = a1 if a2 != 0\n 21584: jump @775 if a4 == 0\n      : @758 (gas: 13)\n 21588: u64 [sp + 0x8] = a0\n 21591: u64 [sp + 0x18] = t1\n 21594: a0 = t2 | s1\n 21597: u64 [sp + 0x38] = ra\n 21600: u64 [sp + 0x30] = t0\n 21603: a1 = ra | t0\n 21606: a0 = a0 | a1\n 21609: a0 = a0 >> 0x20\n 21612: u64 [sp + 0x58] = s1\n 21615: a1 = a1 | s1\n 21618: a1 = a1 << 0x20\n 21621: a0 = a0 | a1\n 21624: jump @774 if a0 != 0\n      : @759 (gas: 4)\n 21628: a0 = sp + 0x150\n 21632: u64 [sp + 0x50] = t2\n 21635: a1 = t2\n 21637: ra = 728, jump @17\n      : @760 [@dyn 364] (gas: 12)\n 21643: a3 = u64 [sp + 0x168]\n 21647: a2 = u64 [sp + 0x160]\n 21651: a4 = u64 [sp + 0x158]\n 21655: a0 = a3 >u 0\n 21657: a1 = a2 >u 0\n 21659: a1 = a0 if a3 != 0\n 21662: u64 [sp + 0x80] = a2\n 21666: u64 [sp + 0x88] = a3\n 21670: a0 = a2 | a3\n 21673: a2 = a4 >u 0\n 21675: a2 = a1 if a0 != 0\n 21678: jump @776 if a2 != 0\n      : @761 (gas: 20)\n 21682: a1 = u64 [sp + 0x150]\n 21686: a0 = a1 + 0x1f\n 21689: u64 [sp + 0x48] = a1\n 21692: a1 = a0 <u a1\n 21695: u64 [sp + 0x78] = a4\n 21698: a1 = a1 + a4\n 21701: a1 = a1 & 0x1\n 21704: a0 = a0 & 0xffffffffffffffe0\n 21707: a2 = a0 + 0x20\n 21710: a0 = a2 <u a0\n 21713: a3 = a1 + a0\n 21716: a4 = a3 <u a1\n 21719: a4 = a0 if a0 == 0\n 21722: u64 [sp + 296] = 0\n 21726: u64 [sp + 0x110] = a2\n 21730: u64 [sp + 0x118] = a3\n 21734: a0 = sp + 0x130\n 21738: a1 = sp + 0x110\n 21742: u64 [sp + 0x120] = a4\n 21746: ra = 730, jump @746\n      : @762 [@dyn 365] (gas: 15)\n 21752: a2 = u64 [sp + 0x148]\n 21756: a3 = u64 [sp + 0x140]\n 21760: a1 = u64 [sp + 0x138]\n 21764: a0 = u64 [sp + 0x130]\n 21768: u64 [sp + 0x40] = a1\n 21771: u64 [sp + 0x68] = a2\n 21774: a2 = a2 | a1\n 21777: a1 = a0 | a3\n 21780: a1 = a1 | a2\n 21783: a1 = a1 >> 0x20\n 21786: u64 [sp + 0x70] = a3\n 21789: a2 = a2 | a3\n 21792: a2 = a2 << 0x20\n 21795: a1 = a1 | a2\n 21798: jump @774 if a1 != 0\n      : @763 (gas: 11)\n 21802: s1 = u64 [sp + 0x48]\n 21805: u64 [sp + 0xf0] = s1\n 21809: a1 = u64 [sp + 0x78]\n 21812: u64 [sp + 0xf8] = a1\n 21816: a1 = u64 [sp + 0x80]\n 21820: u64 [sp + 0x100] = a1\n 21824: a1 = sp + 0xf0\n 21828: a2 = u64 [sp + 0x88]\n 21832: u64 [sp + 0x108] = a2\n 21836: u64 [sp + 0x60] = a0\n 21839: ra = 732, jump @19\n      : @764 [@dyn 366] (gas: 45)\n 21845: a0 = u64 [sp + 0x50]\n 21848: a3 = a0 + s1\n 21851: a2 = a3 <u a0\n 21854: t2 = u64 [sp + 0x38]\n 21857: a0 = u64 [sp + 0x78]\n 21860: a0 = a0 + t2\n 21863: a0 = a0 + a2\n 21866: a4 = a0 ^ t2\n 21869: a1 = a0 <u t2\n 21872: a1 = a2 if a4 == 0\n 21875: t1 = u64 [sp + 0x58]\n 21878: a2 = u64 [sp + 0x80]\n 21882: a2 = a2 + t1\n 21885: a5 = a3 + 0x20\n 21888: t0 = a5 <u a3\n 21891: a4 = a0 + t0\n 21894: a3 = u64 [sp + 0x20]\n 21897: a5 = a3 <u a5\n 21900: a3 = u64 [sp + 0x28]\n 21903: s1 = a4 ^ a3\n 21906: a3 = a3 <u a4\n 21909: a5 = a3 if s1 != 0\n 21912: a3 = a2 <u t1\n 21915: t1 = u64 [sp + 0x30]\n 21918: s1 = u64 [sp + 0x88]\n 21922: s1 = s1 + t1\n 21925: a3 = a3 + s1\n 21928: a1 = a1 + a2\n 21931: a2 = a1 <u a2\n 21934: a2 = a2 + a3\n 21937: a0 = a4 <u a0\n 21940: a0 = t0 if t0 == 0\n 21943: a0 = a0 + a1\n 21946: a1 = a0 <u a1\n 21949: a1 = a1 + a2\n 21952: a3 = u64 [sp + 0x10]\n 21955: a2 = a1 ^ a3\n 21958: a1 = a3 <u a1\n 21961: a4 = u64 [sp + 0x18]\n 21964: a3 = a4 <u a0\n 21967: a1 = a3 if a2 == 0\n 21970: a0 = a0 ^ a4\n 21973: a0 = a0 | a2\n 21976: a5 = a1 if a0 != 0\n 21979: jump @782 if a5 != 0\n      : @765 (gas: 10)\n 21983: a0 = u64 [sp + 0x70]\n 21986: a1 = u64 [sp + 0x68]\n 21989: a1 = a1 | a0\n 21992: a0 = 0xffffffe0\n 22002: a4 = u64 [sp + 0x60]\n 22005: a2 = a4 <u a0\n 22008: a3 = u64 [sp + 0x40]\n 22011: a2 = 0 if a3 != 0\n 22013: a2 = 0 if a1 != 0\n 22015: jump @774 if a2 == 0\n      : @766 (gas: 12)\n 22019: a3 = a4\n 22021: a1 = u64 [sp + 0x58]\n 22024: a1 = a1 | t1\n 22027: a5 = u64 [sp + 0x50]\n 22030: a0 = a5 <u a0\n 22033: a0 = 0 if t2 != 0\n 22035: a0 = 0 if a1 != 0\n 22037: ra = u64 [sp + 0x88]\n 22041: a2 = u64 [sp + 0x80]\n 22045: a4 = u64 [sp + 0x78]\n 22048: s1 = u64 [sp + 0x48]\n 22051: jump @774 if a0 == 0\n      : @767 (gas: 8)\n 22055: a0 = s1 | a2\n 22058: a1 = a4 | ra\n 22061: a0 = a0 | a1\n 22064: a0 = a0 >> 0x20\n 22067: a1 = a1 | a2\n 22070: a1 = a1 << 0x20\n 22073: a0 = a0 | a1\n 22076: jump @774 if a0 != 0\n      : @768 (gas: 5)\n 22080: i32 a0 = a3 + 0x20\n 22083: i32 a1 = a5 + 0x20\n 22086: u64 [sp + 0x58] = a1\n 22089: a1 = s1\n 22091: ra = 734, jump @26\n      : @769 [@dyn 367] (gas: 4)\n 22097: u64 [sp + 0x50] = a0\n 22100: a0 = u64 [sp + 0x58]\n 22103: a1 = s1\n 22105: ra = 736, jump @26\n      : @770 [@dyn 368] (gas: 4)\n 22111: a1 = a0\n 22113: a0 = u64 [sp + 0x50]\n 22116: a2 = s1\n 22118: ra = 738, jump @0\n      : @771 [@dyn 369] (gas: 27)\n 22124: a1 = u64 [sp + 0x60]\n 22127: a0 = a1 + s1\n 22130: a1 = a0 <u a1\n 22133: s1 = u64 [sp + 0x40]\n 22136: a2 = u64 [sp + 0x78]\n 22139: a2 = a2 + s1\n 22142: a2 = a2 + a1\n 22145: a3 = a2 ^ s1\n 22148: a4 = a2 <u s1\n 22151: a4 = a1 if a3 == 0\n 22154: a5 = u64 [sp + 0x70]\n 22157: a1 = u64 [sp + 0x80]\n 22161: a1 = a1 + a5\n 22164: a4 = a4 + a1\n 22167: t0 = a4 <u a1\n 22170: a1 = a1 <u a5\n 22173: a5 = u64 [sp + 0x88]\n 22177: a3 = u64 [sp + 0x68]\n 22180: a5 = a5 + a3\n 22183: a1 = a1 + a5\n 22186: a1 = a1 + t0\n 22189: a1 = a1 | a4\n 22192: a3 = 0xffffffe0\n 22202: a3 = a0 <u a3\n 22205: a3 = 0 if a2 != 0\n 22207: a3 = 0 if a1 != 0\n 22209: jump @774 if a3 == 0\n      : @772 (gas: 7)\n 22212: i32 a0 = a0 + 0x20\n 22215: u64 [sp + 232] = 0\n 22219: u64 [sp + 224] = 0\n 22223: u64 [sp + 216] = 0\n 22227: a1 = sp + 0xd0\n 22231: u64 [sp + 208] = 0\n 22235: ra = 740, jump @19\n      : @773 [@dyn 370] (gas: 14)\n 22241: a0 = u64 [sp + 0x8]\n 22244: a1 = u64 [sp + 0x68]\n 22247: u64 [a0 + 0x18] = a1\n 22250: a1 = u64 [sp + 0x70]\n 22253: u64 [a0 + 0x10] = a1\n 22256: u64 [a0 + 0x8] = s1\n 22259: a1 = u64 [sp + 0x60]\n 22262: u64 [a0] = a1\n 22264: sp = s0 + 0xfffffffffffffe70\n 22268: ra = u64 [sp + 0x188]\n 22272: s0 = u64 [sp + 0x180]\n 22276: s1 = u64 [sp + 0x178]\n 22280: sp = sp + 0x190\n 22284: ret\n      : @774 (gas: 1)\n 22286: trap\n      : @775 (gas: 2)\n 22287: a1 = 0x20110\n 22292: jump @783\n      : @776 (gas: 6)\n 22294: u64 [sp + 192] = 0\n 22298: u64 [sp + 184] = 0\n 22302: u64 [sp + 176] = 0\n 22306: t0 = 0x2e6\n 22310: a0 = 0x4e487b7100000000\n 22320: fallthrough\n      : @777 [@dyn 371] (gas: 4)\n 22321: a1 = sp + 0xb0\n 22325: u64 [sp + 0xc8] = a0\n 22329: a0 = 0\n 22331: ra = 744, jump @19\n      : @778 [@dyn 372] (gas: 7)\n 22337: u64 [sp + 168] = 0\n 22341: u64 [sp + 160] = 0\n 22345: u64 [sp + 144] = 0x41\n 22350: a0 = 0x4\n 22353: a1 = sp + 0x90\n 22357: u64 [sp + 152] = 0\n 22361: ra = 746, jump @19\n      : @779 [@dyn 373] (gas: 2)\n 22367: a1 = i32 [0x200fc]\n 22372: jump @781 if a1 >u 63\n      : @780 (gas: 2)\n 22376: u32 [0x200fc] = 0x40\n 22382: fallthrough\n      : @781 (gas: 7)\n 22383: a1 = 0x20110\n 22388: i32 a1 = a1 + 0\n 22390: a0 = 0x1\n 22393: a2 = 0x24\n 22396: ecalli 8 // 'seal_return'\n 22398: a1 = 0x20110\n 22403: jump @783\n      : @782 (gas: 2)\n 22405: a1 = 0x20110\n 22410: fallthrough\n      : @783 (gas: 6)\n 22411: i32 a1 = a1 + 0\n 22413: a0 = 0x1\n 22416: a2 = 0\n 22418: ra = 0x2ec\n 22422: ecalli 8 // 'seal_return'\n 22424: fallthrough\n      : @784 [@dyn 374] (gas: 22)\n 22425: sp = sp + 0xfffffffffffffee0\n 22429: u64 [sp + 0x118] = ra\n 22433: u64 [sp + 0x110] = s0\n 22437: u64 [sp + 0x108] = s1\n 22441: s0 = sp + 0x120\n 22445: sp = sp & 0xfffffffffffffff0\n 22448: a4 = u64 [a1 + 0x10]\n 22451: a3 = u64 [a1 + 0x18]\n 22454: a5 = u64 [a1 + 0x8]\n 22457: t0 = u64 [a1]\n 22459: u64 [sp + 0x68] = a3\n 22462: u64 [sp + 0x78] = a5\n 22465: a1 = a5 | a3\n 22468: a3 = t0 | a4\n 22471: a3 = a3 | a1\n 22474: a3 = a3 >> 0x20\n 22477: u64 [sp + 0x70] = a4\n 22480: a1 = a1 | a4\n 22483: a1 = a1 << 0x20\n 22486: a1 = a1 | a3\n 22489: u64 [sp + 0x8] = a0\n 22492: jump @799 if a1 != 0\n      : @785 (gas: 15)\n 22496: a0 = u64 [a2 + 0x18]\n 22499: u64 [sp + 0x48] = a0\n 22502: s1 = u64 [a2 + 0x10]\n 22505: a0 = u64 [a2 + 0x8]\n 22508: u64 [sp + 0x50] = a0\n 22511: a0 = u64 [a2]\n 22513: u64 [sp + 0x58] = a0\n 22516: u64 [sp + 248] = 0\n 22520: u64 [sp + 240] = 0\n 22524: u64 [sp + 232] = 0\n 22528: a1 = sp + 0xe0\n 22532: u64 [sp + 224] = 0x20\n 22537: a0 = t0\n 22539: u64 [sp + 0x60] = t0\n 22542: ra = 750, jump @19\n      : @786 [@dyn 375] (gas: 12)\n 22548: a1 = u64 [sp + 0x58]\n 22551: a0 = a1 | s1\n 22554: a2 = u64 [sp + 0x48]\n 22557: a3 = u64 [sp + 0x50]\n 22560: a2 = a2 | a3\n 22563: a0 = a0 | a2\n 22566: a0 = a0 >> 0x20\n 22569: u64 [sp + 0x20] = s1\n 22572: a2 = a2 | s1\n 22575: a2 = a2 << 0x20\n 22578: a0 = a0 | a2\n 22581: jump @799 if a0 != 0\n      : @787 (gas: 2)\n 22585: a0 = sp + 0xc0\n 22589: ra = 752, jump @17\n      : @788 [@dyn 376] (gas: 13)\n 22595: a0 = u64 [sp + 0x70]\n 22598: a1 = u64 [sp + 0x68]\n 22601: a1 = a1 | a0\n 22604: a0 = 0x100000000\n 22614: u64 [sp + 0x10] = a0\n 22617: a0 = 0xffffffe0\n 22627: a2 = u64 [sp + 0x60]\n 22630: a0 = a2 <u a0\n 22633: a3 = u64 [sp + 0x78]\n 22636: a0 = 0 if a3 != 0\n 22638: u64 [sp + 0x18] = a1\n 22641: a0 = 0 if a1 != 0\n 22643: jump @799 if a0 == 0\n      : @789 (gas: 16)\n 22647: a3 = u64 [sp + 0xd8]\n 22651: a4 = u64 [sp + 0xd0]\n 22655: a5 = u64 [sp + 0xc8]\n 22659: a1 = u64 [sp + 0xc0]\n 22663: i32 a0 = a2 + 0x20\n 22666: u64 [sp + 0x28] = a1\n 22669: u64 [sp + 0xa0] = a1\n 22673: u64 [sp + 0x30] = a5\n 22676: u64 [sp + 0xa8] = a5\n 22680: u64 [sp + 0x38] = a4\n 22683: u64 [sp + 0xb0] = a4\n 22687: a1 = sp + 0xa0\n 22691: u64 [sp + 0x40] = a3\n 22694: u64 [sp + 0xb8] = a3\n 22698: s1 = a2\n 22700: ra = 754, jump @19\n      : @790 [@dyn 377] (gas: 8)\n 22706: a0 = u64 [sp + 0x10]\n 22709: a0 = a0 + 0xffffffffffffffc0\n 22712: a0 = s1 <u a0\n 22715: a1 = u64 [sp + 0x78]\n 22718: a0 = 0 if a1 != 0\n 22720: a1 = u64 [sp + 0x18]\n 22723: a0 = 0 if a1 != 0\n 22725: jump @799 if a0 == 0\n      : @791 (gas: 10)\n 22729: a0 = u64 [sp + 0x48]\n 22732: a1 = u64 [sp + 0x20]\n 22735: a0 = a0 | a1\n 22738: a1 = 0xffffffe0\n 22748: a3 = u64 [sp + 0x58]\n 22751: a1 = a3 <u a1\n 22754: a4 = u64 [sp + 0x50]\n 22757: a1 = 0 if a4 != 0\n 22759: a1 = 0 if a0 != 0\n 22761: jump @799 if a1 == 0\n      : @792 (gas: 13)\n 22765: a2 = s1\n 22767: a1 = u64 [sp + 0x28]\n 22770: a5 = u64 [sp + 0x38]\n 22773: a0 = a1 | a5\n 22776: a4 = u64 [sp + 0x40]\n 22779: s1 = u64 [sp + 0x30]\n 22782: a4 = a4 | s1\n 22785: a0 = a0 | a4\n 22788: a0 = a0 >> 0x20\n 22791: a4 = a4 | a5\n 22794: a4 = a4 << 0x20\n 22797: a0 = a0 | a4\n 22800: jump @799 if a0 != 0\n      : @793 (gas: 5)\n 22804: i32 a0 = a2 + 0x40\n 22807: i32 a3 = a3 + 0x20\n 22810: u64 [sp + 0x58] = a3\n 22813: s1 = a1\n 22815: ra = 756, jump @26\n      : @794 [@dyn 378] (gas: 4)\n 22821: u64 [sp + 0x50] = a0\n 22824: a0 = u64 [sp + 0x58]\n 22827: a1 = s1\n 22829: ra = 758, jump @26\n      : @795 [@dyn 379] (gas: 4)\n 22835: a1 = a0\n 22837: a0 = u64 [sp + 0x50]\n 22840: a2 = s1\n 22842: ra = 760, jump @0\n      : @796 [@dyn 380] (gas: 27)\n 22848: a0 = u64 [sp + 0x60]\n 22851: a0 = a0 + s1\n 22854: a1 = a0 <u s1\n 22857: a2 = u64 [sp + 0x78]\n 22860: a4 = u64 [sp + 0x30]\n 22863: a2 = a2 + a4\n 22866: a2 = a2 + a1\n 22869: a3 = a2 ^ a4\n 22872: a4 = a2 <u a4\n 22875: a4 = a1 if a3 == 0\n 22878: a1 = u64 [sp + 0x70]\n 22881: a3 = u64 [sp + 0x38]\n 22884: a1 = a1 + a3\n 22887: a3 = a1 <u a3\n 22890: a5 = u64 [sp + 0x68]\n 22893: s1 = u64 [sp + 0x40]\n 22896: a5 = a5 + s1\n 22899: a3 = a3 + a5\n 22902: a4 = a4 + a1\n 22905: a1 = a4 <u a1\n 22908: a1 = a1 + a3\n 22911: a1 = a1 | a4\n 22914: a3 = 0xffffffc0\n 22924: a3 = a0 <u a3\n 22927: a3 = 0 if a2 != 0\n 22929: a3 = 0 if a1 != 0\n 22931: jump @799 if a3 == 0\n      : @797 (gas: 7)\n 22935: i32 a0 = a0 + 0x40\n 22938: u64 [sp + 152] = 0\n 22942: u64 [sp + 144] = 0\n 22946: u64 [sp + 136] = 0\n 22950: a1 = sp + 0x80\n 22954: u64 [sp + 128] = 0\n 22958: ra = 762, jump @19\n      : @798 [@dyn 381] (gas: 35)\n 22964: s1 = u64 [sp + 0x28]\n 22967: s1 = s1 + 0x1f\n 22970: a0 = 0x1ffffffe0\n 22980: a0 = a0 & s1\n 22983: a1 = u64 [sp + 0x60]\n 22986: a0 = a0 + a1\n 22989: a1 = a0 <u a1\n 22992: a3 = u64 [sp + 0x78]\n 22995: a2 = a3 + a1\n 22998: a3 = a2 <u a3\n 23001: a3 = a1 if a1 == 0\n 23004: a1 = u64 [sp + 0x70]\n 23007: a3 = a3 + a1\n 23010: a1 = a3 <u a1\n 23013: a4 = u64 [sp + 0x68]\n 23016: a1 = a1 + a4\n 23019: a4 = a0 + 0x40\n 23022: a0 = a4 <u a0\n 23025: a5 = a2 + a0\n 23028: a2 = a5 <u a2\n 23031: a2 = a0 if a0 == 0\n 23034: a2 = a2 + a3\n 23037: a0 = a2 <u a3\n 23040: a0 = a0 + a1\n 23043: a1 = u64 [sp + 0x8]\n 23046: u64 [a1] = a4\n 23048: u64 [a1 + 0x8] = a5\n 23051: u64 [a1 + 0x10] = a2\n 23054: u64 [a1 + 0x18] = a0\n 23057: sp = s0 + 0xfffffffffffffee0\n 23061: ra = u64 [sp + 0x118]\n 23065: s0 = u64 [sp + 0x110]\n 23069: s1 = u64 [sp + 0x108]\n 23073: sp = sp + 0x120\n 23077: ret\n      : @799 (gas: 1)\n 23079: trap\n      : @800 [@dyn 382] (gas: 5)\n 23080: a1 = 0x4\n 23083: ra = 0x2fe\n 23087: ecalli 1 // 'call_data_load'\n 23089: t0 = 0x300\n 23093: jump @922\n      : @801 [@dyn 383] (gas: 1)\n 23096: t0 = 768, jump @922\n      : @802 [@dyn 384] (gas: 1)\n 23102: jump @805 if a3 == 0\n      : @803 (gas: 1)\n 23105: t0 = 770, jump @929\n      : @804 [@dyn 385] (gas: 1)\n 23111: ret\n      : @805 (gas: 8)\n 23113: a1 = 0x20110\n 23118: i32 a1 = a1 + 0\n 23120: a0 = 0x1\n 23123: a2 = 0\n 23125: ra = 0x304\n 23129: ecalli 8 // 'seal_return'\n 23131: t0 = 0x306\n 23135: jump @946\n      : @806 [@dyn 386] (gas: 1)\n 23138: t0 = 774, jump @946\n      : @807 [@dyn 387] (gas: 5)\n 23144: a1 = 0x24\n 23147: ra = 0x308\n 23151: ecalli 1 // 'call_data_load'\n 23153: t0 = 0x30a\n 23157: jump @922\n      : @808 [@dyn 388] (gas: 1)\n 23160: t0 = 778, jump @922\n      : @809 [@dyn 389] (gas: 1)\n 23166: jump @812 if a3 == 0\n      : @810 (gas: 1)\n 23169: t0 = 780, jump @929\n      : @811 [@dyn 390] (gas: 1)\n 23175: ret\n      : @812 (gas: 7)\n 23177: a1 = 0x20110\n 23182: i32 a1 = a1 + 0\n 23184: a0 = 0x1\n 23187: a2 = 0\n 23189: ra = 0x30e\n 23193: ecalli 8 // 'seal_return'\n 23195: fallthrough\n      : @813 [@dyn 391] (gas: 45)\n 23196: sp = sp + 0xffffffffffffff90\n 23199: u64 [sp + 0x68] = ra\n 23202: u64 [sp + 0x60] = s0\n 23205: u64 [sp + 0x58] = s1\n 23208: s0 = sp + 0x70\n 23211: sp = sp & 0xfffffffffffffff0\n 23214: a3 = u64 [a1 + 0x18]\n 23217: u64 [sp + 0x8] = a3\n 23220: a4 = u64 [a2 + 0x18]\n 23223: t2 = u64 [a1]\n 23225: u64 [sp] = t2\n 23227: a3 = u64 [a1 + 0x8]\n 23230: s1 = u64 [a2 + 0x8]\n 23233: a5 = u64 [a2]\n 23235: t1 = u64 [a1 + 0x10]\n 23238: t0 = u64 [a2 + 0x10]\n 23241: a2 = s1 + a3\n 23244: t2 = t2 + a5\n 23247: a5 = t2 <u a5\n 23250: a2 = a2 + a5\n 23253: ra = a2 ^ s1\n 23256: s1 = a2 <u s1\n 23259: s1 = a5 if ra == 0\n 23262: a1 = t0 + t1\n 23265: a5 = u64 [sp + 0x8]\n 23268: a5 = a5 + a4\n 23271: a4 = a1 <u t0\n 23274: a4 = a4 + a5\n 23277: a5 = a1 + s1\n 23280: a1 = a5 <u a1\n 23283: ra = a4 + a1\n 23286: a4 = a2 ^ a3\n 23289: a3 = a2 <u a3\n 23292: a1 = u64 [sp]\n 23294: s1 = t2 <u a1\n 23297: s1 = a3 if a4 != 0\n 23300: t0 = a5 <u t1\n 23303: a1 = u64 [sp + 0x8]\n 23306: a4 = ra ^ a1\n 23309: a3 = ra <u a1\n 23312: a3 = t0 if a4 == 0\n 23315: a1 = a5 ^ t1\n 23318: a1 = a1 | a4\n 23321: s1 = a3 if a1 != 0\n 23324: jump @815 if s1 != 0\n      : @814 (gas: 10)\n 23327: u64 [a0] = t2\n 23329: u64 [a0 + 0x8] = a2\n 23332: u64 [a0 + 0x10] = a5\n 23335: u64 [a0 + 0x18] = ra\n 23338: sp = s0 + 0xffffffffffffff90\n 23341: ra = u64 [sp + 0x68]\n 23344: s0 = u64 [sp + 0x60]\n 23347: s1 = u64 [sp + 0x58]\n 23350: sp = sp + 0x70\n 23353: ret\n      : @815 (gas: 6)\n 23355: u64 [sp + 64] = 0\n 23358: u64 [sp + 56] = 0\n 23361: u64 [sp + 48] = 0\n 23364: t0 = 0x310\n 23368: a0 = 0x4e487b7100000000\n 23378: fallthrough\n      : @816 [@dyn 392] (gas: 4)\n 23379: a1 = sp + 0x30\n 23382: u64 [sp + 0x48] = a0\n 23385: a0 = 0\n 23387: ra = 786, jump @19\n      : @817 [@dyn 393] (gas: 7)\n 23393: u64 [sp + 40] = 0\n 23396: u64 [sp + 32] = 0\n 23399: u64 [sp + 16] = 0x11\n 23403: a0 = 0x4\n 23406: a1 = sp + 0x10\n 23409: u64 [sp + 24] = 0\n 23412: ra = 788, jump @19\n      : @818 [@dyn 394] (gas: 2)\n 23418: a1 = i32 [0x200fc]\n 23423: jump @820 if a1 >u 63\n      : @819 (gas: 2)\n 23427: u32 [0x200fc] = 0x40\n 23433: fallthrough\n      : @820 (gas: 7)\n 23434: a1 = 0x20110\n 23439: i32 a1 = a1 + 0\n 23441: a0 = 0x1\n 23444: a2 = 0x24\n 23447: ra = 0x316\n 23451: ecalli 8 // 'seal_return'\n 23453: fallthrough\n      : @821 [@dyn 395] (gas: 14)\n 23454: sp = sp + 0xffffffffffffff20\n 23458: u64 [sp + 0xd8] = ra\n 23462: u64 [sp + 0xd0] = s0\n 23466: u64 [sp + 0xc8] = s1\n 23470: s0 = sp + 0xe0\n 23474: sp = sp & 0xfffffffffffffff0\n 23477: a1 = u64 [a0 + 0x10]\n 23480: a2 = u64 [a0 + 0x18]\n 23483: a3 = u64 [a0 + 0x8]\n 23486: a0 = u64 [a0]\n 23488: a2 = a2 | a3\n 23491: a0 = a0 | a1\n 23494: a0 = a0 | a2\n 23497: jump @823 if a0 == 0\n      : @822 (gas: 6)\n 23500: sp = s0 + 0xffffffffffffff20\n 23504: ra = u64 [sp + 0xd8]\n 23508: s0 = u64 [sp + 0xd0]\n 23512: s1 = u64 [sp + 0xc8]\n 23516: sp = sp + 0xe0\n 23520: ret\n      : @823 (gas: 3)\n 23522: a0 = sp + 0xa0\n 23526: a1 = 0x40\n 23529: ra = 792, jump @17\n      : @824 [@dyn 396] (gas: 15)\n 23535: a2 = u64 [sp + 0xb8]\n 23539: s1 = u64 [sp + 0xb0]\n 23543: a0 = u64 [sp + 0xa8]\n 23547: a1 = u64 [sp + 0xa0]\n 23551: u64 [sp + 0x10] = a0\n 23554: u64 [sp + 0x8] = a2\n 23557: a0 = a0 | a2\n 23560: u64 [sp + 0x18] = a1\n 23563: a1 = a1 | s1\n 23566: a1 = a1 | a0\n 23569: a1 = a1 >> 0x20\n 23572: a0 = a0 | s1\n 23575: a0 = a0 << 0x20\n 23578: a0 = a0 | a1\n 23581: jump @831 if a0 != 0\n      : @825 (gas: 8)\n 23585: u64 [sp + 144] = 0\n 23589: u64 [sp + 136] = 0\n 23593: u64 [sp + 128] = 0\n 23597: a0 = 0x8c379a000000000\n 23607: a1 = sp + 0x80\n 23611: u64 [sp + 0x98] = a0\n 23615: a0 = u64 [sp + 0x18]\n 23618: ra = 794, jump @19\n      : @826 [@dyn 397] (gas: 11)\n 23624: a2 = u64 [sp + 0x8]\n 23627: a2 = a2 | s1\n 23630: s1 = 0x100000000\n 23640: a0 = 0xfffffffc\n 23650: a1 = u64 [sp + 0x18]\n 23653: a0 = a1 <u a0\n 23656: a1 = u64 [sp + 0x10]\n 23659: a0 = 0 if a1 != 0\n 23661: u64 [sp + 0x8] = a2\n 23664: a0 = 0 if a2 != 0\n 23666: jump @831 if a0 == 0\n      : @827 (gas: 8)\n 23669: a0 = u64 [sp + 0x18]\n 23672: i32 a0 = a0 + 0x4\n 23675: u64 [sp + 120] = 0\n 23678: u64 [sp + 112] = 0\n 23681: u64 [sp + 96] = 0x20\n 23685: a1 = sp + 0x60\n 23688: u64 [sp + 104] = 0\n 23691: ra = 796, jump @19\n      : @828 [@dyn 398] (gas: 8)\n 23697: a0 = s1 + 0xffffffffffffffdc\n 23700: a1 = u64 [sp + 0x18]\n 23703: a0 = a1 <u a0\n 23706: a1 = u64 [sp + 0x10]\n 23709: a0 = 0 if a1 != 0\n 23711: a1 = u64 [sp + 0x8]\n 23714: a0 = 0 if a1 != 0\n 23716: jump @831 if a0 == 0\n      : @829 (gas: 8)\n 23719: s1 = u64 [sp + 0x18]\n 23722: i32 a0 = s1 + 0x24\n 23725: u64 [sp + 88] = 0\n 23728: u64 [sp + 80] = 0\n 23731: u64 [sp + 64] = 0x9\n 23735: a1 = sp + 0x40\n 23738: u64 [sp + 72] = 0\n 23741: ra = 798, jump @19\n      : @830 [@dyn 399] (gas: 7)\n 23747: a0 = 0xffffffbc\n 23757: a0 = s1 <u a0\n 23760: a1 = u64 [sp + 0x10]\n 23763: a0 = 0 if a1 != 0\n 23765: a1 = u64 [sp + 0x8]\n 23768: a0 = 0 if a1 != 0\n 23770: jump @832 if a0 != 0\n      : @831 (gas: 1)\n 23773: trap\n      : @832 (gas: 10)\n 23774: s1 = u64 [sp + 0x18]\n 23777: i32 a0 = s1 + 0x44\n 23780: a1 = u64 [0x200b0]\n 23785: u64 [sp + 40] = 0\n 23788: u64 [sp + 0x38] = a1\n 23791: a1 = 0x7200000000000000\n 23801: u64 [sp + 0x30] = a1\n 23804: a1 = sp + 0x20\n 23807: u64 [sp + 32] = 0\n 23810: ra = 800, jump @19\n      : @833 [@dyn 400] (gas: 3)\n 23816: a1 = 0x64\n 23819: a0 = s1\n 23821: ra = 802, jump @26\n      : @834 [@dyn 401] (gas: 6)\n 23827: i32 a1 = a0 + 0\n 23829: a0 = 0x1\n 23832: a2 = 0x64\n 23835: ra = 0x324\n 23839: ecalli 8 // 'seal_return'\n 23841: fallthrough\n      : @835 [@dyn 402] (gas: 14)\n 23842: sp = sp + 0xfffffffffffffc20\n 23846: a3 = sp + 0x300\n 23850: u64 [a3 + 0xd8] = ra\n 23854: u64 [a3 + 0xd0] = s0\n 23858: u64 [a3 + 0xc8] = s1\n 23862: s0 = sp + 0x3e0\n 23866: sp = sp & 0xffffffffffffffe0\n 23869: s1 = sp\n 23871: t2 = u32 [a0 + 0x10]\n 23874: a3 = u64 [a0]\n 23876: a4 = u64 [a0 + 0x8]\n 23879: a0 = a3 | t2\n 23882: a0 = a0 | a4\n 23885: jump @867 if a0 == 0\n      : @836 (gas: 13)\n 23889: t0 = u64 [a1 + 0x10]\n 23892: t1 = u64 [a1 + 0x8]\n 23895: ra = u64 [a1]\n 23897: a5 = 0xffffffff\n 23907: a1 = t1 & 0xffffffffffffffff\n 23910: a0 = ra & 0xffffffffffffffff\n 23913: a5 = t0 & a5\n 23916: u64 [s1 + 0x48] = a0\n 23919: u64 [s1 + 0x38] = a5\n 23922: a0 = a0 | a5\n 23925: u64 [s1 + 0x40] = a1\n 23928: a0 = a0 | a1\n 23931: jump @872 if a0 == 0\n      : @837 (gas: 18)\n 23935: a0 = u64 [a2 + 0x18]\n 23938: u64 [s1 + 0x98] = a0\n 23942: a0 = u64 [a2 + 0x10]\n 23945: u64 [s1 + 0x88] = a0\n 23949: a0 = u64 [a2 + 0x8]\n 23952: u64 [s1 + 0x80] = a0\n 23956: a0 = u64 [a2]\n 23958: u64 [s1 + 0x90] = a0\n 23962: u64 [s1 + 824] = 0\n 23966: u64 [s1 + 0x60] = a3\n 23969: u64 [s1 + 0x320] = a3\n 23973: u64 [s1 + 0x58] = a4\n 23976: u64 [s1 + 0x328] = a4\n 23980: a1 = s1 + 0x320\n 23984: u64 [s1 + 0x50] = t2\n 23987: u64 [s1 + 0x330] = t2\n 23991: a0 = 0\n 23993: ra = 806, jump @19\n      : @838 [@dyn 403] (gas: 7)\n 23999: u64 [s1 + 792] = 0\n 24003: u64 [s1 + 784] = 0\n 24007: u64 [s1 + 776] = 0\n 24011: a0 = 0x20\n 24014: a1 = s1 + 0x300\n 24018: u64 [s1 + 768] = 0\n 24022: ra = 808, jump @19\n      : @839 [@dyn 404] (gas: 3)\n 24028: a2 = 0x200fc\n 24033: a0 = i32 [0x200fc]\n 24038: jump @841 if a0 >u 63\n      : @840 (gas: 2)\n 24042: u32 [0x200fc] = 0x40\n 24048: fallthrough\n      : @841 (gas: 15)\n 24049: u64 [s1 + 0x70] = a2\n 24052: a0 = sp + 0xffffffffffffffe0\n 24055: a2 = a0 & 0xffffffffffffffe0\n 24058: u64 [s1 + 0x68] = a2\n 24061: sp = a2\n 24063: a0 = 0x20110\n 24068: i32 a0 = a0 + 0\n 24070: i32 a2 = a2 + 0\n 24072: a1 = 0x40\n 24075: u64 [s1 + 0x78] = a0\n 24078: ra = 0x32a\n 24082: ecalli 6 // 'hash_keccak_256'\n 24084: a3 = u64 [s1 + 0x68]\n 24087: t0 = 0x32c\n 24091: jump @923\n      : @842 [@dyn 405] (gas: 2)\n 24094: a3 = u64 [s1 + 0x68]\n 24097: t0 = 812, jump @923\n      : @843 [@dyn 406] (gas: 7)\n 24103: u64 [a4 + 0x58] = a3\n 24106: u64 [a4 + 0x50] = a2\n 24109: u64 [a4 + 0x48] = a1\n 24112: u64 [a4 + 0x40] = a0\n 24115: a0 = s1 + 0x2e0\n 24119: a1 = s1 + 0x340\n 24123: ra = 814, jump @21\n      : @844 [@dyn 407] (gas: 28)\n 24129: a1 = s1 + 0x200\n 24133: a2 = u64 [a1 + 0xf8]\n 24137: a0 = u64 [a1 + 0xf0]\n 24141: a5 = u64 [a1 + 0xe8]\n 24145: a4 = u64 [a1 + 0xe0]\n 24149: a1 = u64 [s1 + 0x98]\n 24153: t1 = a2 ^ a1\n 24156: u64 [s1 + 0x28] = a2\n 24159: a1 = a2 <u a1\n 24162: a2 = u64 [s1 + 0x88]\n 24166: a3 = a0 <u a2\n 24169: u64 [s1 + 0x10] = a3\n 24172: a1 = a3 if t1 == 0\n 24175: a3 = u64 [s1 + 0x80]\n 24179: t0 = a5 ^ a3\n 24182: u64 [s1 + 0x30] = a5\n 24185: a5 = a5 <u a3\n 24188: a3 = u64 [s1 + 0x90]\n 24192: u64 [s1 + 0x68] = a4\n 24195: a3 = a4 <u a3\n 24198: u64 [s1 + 0x18] = a3\n 24201: a5 = a3 if t0 == 0\n 24204: u64 [s1 + 0x20] = a0\n 24207: a2 = a2 ^ a0\n 24210: a0 = a2 | t1\n 24213: u64 [s1 + 0x8] = a5\n 24216: a1 = a5 if a0 == 0\n 24219: jump @878 if a1 != 0\n      : @845 (gas: 11)\n 24223: u64 [s1 + 728] = 0\n 24227: a0 = u64 [s1 + 0x60]\n 24230: a2 = s1 + 0x200\n 24234: u64 [a2 + 0xc0] = a0\n 24238: a0 = u64 [s1 + 0x58]\n 24241: u64 [a2 + 0xc8] = a0\n 24245: a1 = s1 + 0x2c0\n 24249: a0 = u64 [s1 + 0x50]\n 24252: u64 [a2 + 0xd0] = a0\n 24256: a0 = 0\n 24258: ra = 816, jump @19\n      : @846 [@dyn 408] (gas: 7)\n 24264: u64 [s1 + 696] = 0\n 24268: u64 [s1 + 688] = 0\n 24272: u64 [s1 + 680] = 0\n 24276: a0 = 0x20\n 24279: a1 = s1 + 0x2a0\n 24283: u64 [s1 + 672] = 0\n 24287: ra = 818, jump @19\n      : @847 [@dyn 409] (gas: 27)\n 24293: a0 = u64 [s1 + 0x88]\n 24297: a1 = u64 [s1 + 0x20]\n 24300: a0 = a1 - a0\n 24303: a2 = u64 [s1 + 0x8]\n 24306: a1 = a0 - a2\n 24309: u64 [s1 + 0x20] = a1\n 24312: a0 = a0 <u a2\n 24315: a1 = u64 [s1 + 0x98]\n 24319: a2 = u64 [s1 + 0x28]\n 24322: a1 = a2 - a1\n 24325: a2 = u64 [s1 + 0x10]\n 24328: a1 = a1 - a2\n 24331: a1 = a1 - a0\n 24334: u64 [s1 + 0x28] = a1\n 24337: a2 = u64 [s1 + 0x70]\n 24340: a0 = i32 [a2]\n 24342: a1 = u64 [s1 + 0x80]\n 24346: a3 = u64 [s1 + 0x30]\n 24349: a1 = a3 - a1\n 24352: a3 = u64 [s1 + 0x18]\n 24355: a1 = a1 - a3\n 24358: u64 [s1 + 0x30] = a1\n 24361: a1 = u64 [s1 + 0x90]\n 24365: a3 = u64 [s1 + 0x68]\n 24368: a3 = a3 - a1\n 24371: u64 [s1 + 0x68] = a3\n 24374: jump @849 if a0 >u 63\n      : @848 (gas: 2)\n 24378: u32 [a2 + 0] = 0x40\n 24381: fallthrough\n      : @849 (gas: 12)\n 24382: a0 = sp + 0xffffffffffffffe0\n 24385: a0 = a0 & 0xffffffffffffffe0\n 24388: u64 [s1 + 0x18] = a0\n 24391: sp = a0\n 24393: i32 a2 = a0 + 0\n 24395: a1 = 0x40\n 24398: a0 = u64 [s1 + 0x78]\n 24401: ra = 0x334\n 24405: ecalli 6 // 'hash_keccak_256'\n 24407: a3 = u64 [s1 + 0x18]\n 24410: t0 = 0x336\n 24414: jump @923\n      : @850 [@dyn 410] (gas: 2)\n 24417: a3 = u64 [s1 + 0x18]\n 24420: t0 = 822, jump @923\n      : @851 [@dyn 411] (gas: 15)\n 24426: u64 [a4 + 0x78] = a3\n 24429: u64 [a4 + 0x70] = a2\n 24432: u64 [a4 + 0x68] = a1\n 24435: u64 [a4 + 0x60] = a0\n 24438: a0 = u64 [s1 + 0x28]\n 24441: u64 [a4 + 0x98] = a0\n 24445: a0 = u64 [s1 + 0x20]\n 24448: u64 [a4 + 0x90] = a0\n 24452: a0 = u64 [s1 + 0x30]\n 24455: u64 [a4 + 0x88] = a0\n 24459: a0 = u64 [s1 + 0x68]\n 24462: u64 [a4 + 0x80] = a0\n 24466: a0 = s1 + 0x360\n 24470: a1 = s1 + 0x380\n 24474: ra = 824, jump @22\n      : @852 [@dyn 412] (gas: 11)\n 24480: u64 [s1 + 664] = 0\n 24484: a0 = u64 [s1 + 0x38]\n 24487: a2 = s1 + 0x200\n 24491: u64 [a2 + 0x90] = a0\n 24495: a0 = u64 [s1 + 0x40]\n 24498: u64 [a2 + 0x88] = a0\n 24502: a1 = s1 + 0x280\n 24506: a0 = u64 [s1 + 0x48]\n 24509: u64 [a2 + 0x80] = a0\n 24513: a0 = 0\n 24515: ra = 826, jump @19\n      : @853 [@dyn 413] (gas: 7)\n 24521: u64 [s1 + 632] = 0\n 24525: u64 [s1 + 624] = 0\n 24529: u64 [s1 + 616] = 0\n 24533: a0 = 0x20\n 24536: a1 = s1 + 0x260\n 24540: u64 [s1 + 608] = 0\n 24544: ra = 828, jump @19\n      : @854 [@dyn 414] (gas: 7)\n 24550: a1 = u64 [s1 + 0x70]\n 24553: a0 = sp + 0xffffffffffffffe0\n 24556: a0 = a0 & 0xffffffffffffffe0\n 24559: u64 [s1 + 0x68] = a0\n 24562: sp = a0\n 24564: a0 = i32 [a1]\n 24566: jump @856 if a0 >u 63\n      : @855 (gas: 2)\n 24570: u32 [a1 + 0] = 0x40\n 24573: fallthrough\n      : @856 (gas: 12)\n 24574: a0 = sp + 0xffffffffffffffe0\n 24577: a0 = a0 & 0xffffffffffffffe0\n 24580: u64 [s1 + 0x70] = a0\n 24583: sp = a0\n 24585: i32 a2 = a0 + 0\n 24587: a1 = 0x40\n 24590: a0 = u64 [s1 + 0x78]\n 24593: ra = 0x33e\n 24597: ecalli 6 // 'hash_keccak_256'\n 24599: a3 = u64 [s1 + 0x70]\n 24602: t0 = 0x340\n 24606: jump @911\n      : @857 [@dyn 415] (gas: 2)\n 24609: a3 = u64 [s1 + 0x70]\n 24612: t0 = 832, jump @911\n      : @858 [@dyn 416] (gas: 7)\n 24618: a1 = u64 [s1 + 0x68]\n 24621: u64 [a1 + 0x18] = a3\n 24624: u64 [a1 + 0x10] = a2\n 24627: u64 [a1 + 0x8] = a4\n 24630: u64 [a1] = a0\n 24632: a0 = s1 + 0x240\n 24636: ra = 834, jump @21\n      : @859 [@dyn 417] (gas: 30)\n 24642: a0 = u64 [s1 + 0x248]\n 24646: a1 = u64 [s1 + 0x240]\n 24650: t0 = u64 [s1 + 0x258]\n 24654: a3 = u64 [s1 + 0x250]\n 24658: a4 = u64 [s1 + 0x80]\n 24662: a4 = a4 + a0\n 24665: a5 = u64 [s1 + 0x90]\n 24669: a5 = a5 + a1\n 24672: a1 = a5 <u a1\n 24675: a4 = a4 + a1\n 24678: a2 = a4 ^ a0\n 24681: a0 = a4 <u a0\n 24684: a0 = a1 if a2 == 0\n 24687: a1 = u64 [s1 + 0x88]\n 24691: a1 = a1 + a3\n 24694: a2 = u64 [s1 + 0x98]\n 24698: t0 = t0 + a2\n 24701: a2 = a1 <u a3\n 24704: a2 = a2 + t0\n 24707: a0 = a0 + a1\n 24710: a1 = a0 <u a1\n 24713: a1 = a1 + a2\n 24716: a2 = s1 + 0x300\n 24720: u64 [a2 + 0xa0] = a5\n 24724: u64 [a2 + 0xa8] = a4\n 24728: u64 [a2 + 0xb0] = a0\n 24732: u64 [a2 + 0xb8] = a1\n 24736: a1 = s1 + 0x3a0\n 24740: a0 = u64 [s1 + 0x68]\n 24743: ra = 836, jump @22\n      : @860 [@dyn 418] (gas: 3)\n 24749: a0 = s1 + 0x220\n 24753: a1 = 0x40\n 24756: ra = 838, jump @17\n      : @861 [@dyn 419] (gas: 6)\n 24762: a4 = s1 + 0x200\n 24766: a3 = u64 [a4 + 0x38]\n 24769: a1 = u64 [a4 + 0x30]\n 24772: a2 = u64 [a4 + 0x28]\n 24775: a0 = u64 [a4 + 0x20]\n 24778: t0 = 840, jump @918\n      : @862 [@dyn 420] (gas: 1)\n 24784: jump @866 if a1 != 0\n      : @863 (gas: 12)\n 24788: a1 = u64 [s1 + 0x90]\n 24792: a3 = s1 + 0x200\n 24796: u64 [a3] = a1\n 24798: a1 = u64 [s1 + 0x80]\n 24802: u64 [a3 + 0x8] = a1\n 24805: a1 = u64 [s1 + 0x88]\n 24809: u64 [a3 + 0x10] = a1\n 24812: a1 = s1 + 0x200\n 24816: a2 = u64 [s1 + 0x98]\n 24820: u64 [a3 + 0x18] = a2\n 24823: u64 [s1 + 0x98] = a0\n 24827: ra = 842, jump @19\n      : @864 [@dyn 421] (gas: 29)\n 24833: u64 [s1 + 440] = 0\n 24837: a0 = u64 [s1 + 0x38]\n 24840: a5 = s1 + 0x100\n 24844: u64 [a5 + 0xb0] = a0\n 24848: a0 = u64 [s1 + 0x40]\n 24851: u64 [a5 + 0xa8] = a0\n 24855: a0 = u64 [s1 + 0x48]\n 24858: u64 [a5 + 0xa0] = a0\n 24862: u64 [s1 + 472] = 0\n 24866: a0 = u64 [s1 + 0x50]\n 24869: u64 [a5 + 0xd0] = a0\n 24873: a0 = u64 [s1 + 0x58]\n 24876: u64 [a5 + 0xc8] = a0\n 24880: a0 = u64 [0x200b8]\n 24885: a1 = u64 [0x200c0]\n 24890: a2 = u64 [0x200c8]\n 24895: a3 = u64 [s1 + 0x60]\n 24898: u64 [a5 + 0xc0] = a3\n 24902: u64 [a5 + 0xf8] = a0\n 24906: u64 [a5 + 0xf0] = a1\n 24910: u64 [a5 + 0xe8] = a2\n 24914: a0 = u64 [0x200d0]\n 24919: a1 = 0x20\n 24922: a2 = s1 + 0x1e0\n 24926: a3 = s1 + 0x1c0\n 24930: a4 = s1 + 0x1a0\n 24934: u64 [a5 + 0xe0] = a0\n 24938: a0 = u64 [s1 + 0x98]\n 24942: ra = 844, jump @23\n      : @865 [@dyn 422] (gas: 7)\n 24948: sp = s0 + 0xfffffffffffffc20\n 24952: a0 = sp + 0x300\n 24956: ra = u64 [a0 + 0xd8]\n 24960: s0 = u64 [a0 + 0xd0]\n 24964: s1 = u64 [a0 + 0xc8]\n 24968: sp = sp + 0x3e0\n 24972: ret\n      : @866 (gas: 1)\n 24974: trap\n      : @867 (gas: 8)\n 24975: u64 [s1 + 208] = 0\n 24979: u64 [s1 + 200] = 0\n 24983: u64 [s1 + 192] = 0\n 24987: a0 = 0x96c6fd1e00000000\n 24997: a1 = s1 + 0xc0\n 25001: u64 [s1 + 0xd8] = a0\n 25005: a0 = 0\n 25007: ra = 846, jump @19\n      : @868 [@dyn 423] (gas: 7)\n 25013: u64 [s1 + 184] = 0\n 25017: u64 [s1 + 176] = 0\n 25021: u64 [s1 + 168] = 0\n 25025: a0 = 0x4\n 25028: a1 = s1 + 0xa0\n 25032: u64 [s1 + 160] = 0\n 25036: ra = 848, jump @19\n      : @869 [@dyn 424] (gas: 2)\n 25042: a1 = i32 [0x200fc]\n 25047: jump @871 if a1 >u 63\n      : @870 (gas: 3)\n 25051: u32 [0x200fc] = 0x40\n 25057: a1 = 0x20110\n 25062: jump @877\n      : @871 (gas: 2)\n 25064: a1 = 0x20110\n 25069: jump @877\n      : @872 (gas: 8)\n 25071: u64 [s1 + 272] = 0\n 25075: u64 [s1 + 264] = 0\n 25079: u64 [s1 + 256] = 0\n 25083: a0 = 0xec442f0500000000\n 25093: a1 = s1 + 0x100\n 25097: u64 [s1 + 0x118] = a0\n 25101: a0 = 0\n 25103: ra = 850, jump @19\n      : @873 [@dyn 425] (gas: 7)\n 25109: u64 [s1 + 248] = 0\n 25113: u64 [s1 + 240] = 0\n 25117: u64 [s1 + 232] = 0\n 25121: a0 = 0x4\n 25124: a1 = s1 + 0xe0\n 25128: u64 [s1 + 224] = 0\n 25132: ra = 852, jump @19\n      : @874 [@dyn 426] (gas: 2)\n 25138: a1 = i32 [0x200fc]\n 25143: jump @876 if a1 >u 63\n      : @875 (gas: 3)\n 25147: u32 [0x200fc] = 0x40\n 25153: a1 = 0x20110\n 25158: jump @877\n      : @876 (gas: 2)\n 25160: a1 = 0x20110\n 25165: fallthrough\n      : @877 (gas: 5)\n 25166: i32 a1 = a1 + 0\n 25168: a0 = 0x1\n 25171: a2 = 0x24\n 25174: ecalli 8 // 'seal_return'\n 25176: fallthrough\n      : @878 (gas: 8)\n 25177: u64 [s1 + 400] = 0\n 25181: u64 [s1 + 392] = 0\n 25185: u64 [s1 + 384] = 0\n 25189: a0 = 0xe450d38c00000000\n 25199: a1 = s1 + 0x180\n 25203: u64 [s1 + 0x198] = a0\n 25207: a0 = 0\n 25209: ra = 854, jump @19\n      : @879 [@dyn 427] (gas: 10)\n 25215: u64 [s1 + 376] = 0\n 25219: a0 = u64 [s1 + 0x50]\n 25222: u64 [s1 + 0x170] = a0\n 25226: a0 = u64 [s1 + 0x58]\n 25229: u64 [s1 + 0x168] = a0\n 25233: a0 = 0x4\n 25236: a1 = s1 + 0x160\n 25240: a2 = u64 [s1 + 0x60]\n 25243: u64 [s1 + 0x160] = a2\n 25247: ra = 856, jump @19\n      : @880 [@dyn 428] (gas: 11)\n 25253: a0 = u64 [s1 + 0x28]\n 25256: u64 [s1 + 0x158] = a0\n 25260: a0 = u64 [s1 + 0x20]\n 25263: u64 [s1 + 0x150] = a0\n 25267: a0 = u64 [s1 + 0x30]\n 25270: u64 [s1 + 0x148] = a0\n 25274: a0 = 0x24\n 25277: a1 = s1 + 0x140\n 25281: a2 = u64 [s1 + 0x68]\n 25284: u64 [s1 + 0x140] = a2\n 25288: ra = 858, jump @19\n      : @881 [@dyn 429] (gas: 12)\n 25294: a0 = u64 [s1 + 0x98]\n 25298: a3 = s1 + 0x100\n 25302: u64 [a3 + 0x38] = a0\n 25305: a0 = u64 [s1 + 0x88]\n 25309: u64 [a3 + 0x30] = a0\n 25312: a0 = u64 [s1 + 0x80]\n 25316: u64 [a3 + 0x28] = a0\n 25319: a0 = 0x44\n 25322: a1 = s1 + 0x120\n 25326: a2 = u64 [s1 + 0x90]\n 25330: u64 [a3 + 0x20] = a2\n 25333: ra = 860, jump @19\n      : @882 [@dyn 430] (gas: 3)\n 25339: a0 = u64 [s1 + 0x70]\n 25342: a0 = i32 [a0]\n 25344: jump @884 if a0 >u 127\n      : @883 (gas: 3)\n 25348: a1 = u64 [s1 + 0x70]\n 25351: u32 [a1 + 0] = 0x80\n 25355: fallthrough\n      : @884 (gas: 6)\n 25356: a0 = 0x1\n 25359: a2 = 0x64\n 25362: a1 = u64 [s1 + 0x78]\n 25365: ra = 0x35e\n 25369: ecalli 8 // 'seal_return'\n 25371: fallthrough\n      : @885 [@dyn 431] (gas: 29)\n 25372: sp = sp + 0xfffffffffffffd00\n 25376: a2 = sp + 0x200\n 25380: u64 [a2 + 0xf8] = ra\n 25384: u64 [a2 + 0xf0] = s0\n 25388: u64 [a2 + 0xe8] = s1\n 25392: s0 = sp + 0x300\n 25396: sp = sp & 0xffffffffffffffe0\n 25399: s1 = sp\n 25401: a2 = u64 [a0 + 0x8]\n 25404: u64 [s1 + 0x38] = a2\n 25407: a2 = u32 [a0 + 0x10]\n 25410: u64 [s1 + 0x28] = a2\n 25413: a0 = u64 [a0]\n 25415: u64 [s1 + 0x30] = a0\n 25418: a0 = u64 [a1]\n 25420: u64 [s1 + 0x50] = a0\n 25423: a0 = u64 [a1 + 0x8]\n 25426: u64 [s1 + 0x48] = a0\n 25429: a0 = u64 [a1 + 0x10]\n 25432: u64 [s1 + 0x40] = a0\n 25435: a0 = u64 [a1 + 0x18]\n 25438: u64 [s1 + 0x58] = a0\n 25441: u64 [s1 + 536] = 0\n 25445: u64 [s1 + 528] = 0\n 25449: u64 [s1 + 520] = 0\n 25453: u64 [s1 + 512] = 0x2\n 25458: a0 = s1 + 0x1e0\n 25462: a1 = s1 + 0x200\n 25466: ra = 864, jump @21\n      : @886 [@dyn 432] (gas: 20)\n 25472: a3 = u64 [s1 + 0x1e0]\n 25476: a0 = u64 [s1 + 0x1e8]\n 25480: a1 = u64 [s1 + 0x1f0]\n 25484: a2 = u64 [s1 + 0x1f8]\n 25488: a4 = u64 [s1 + 0x58]\n 25491: u64 [s1 + 0x198] = a4\n 25495: a4 = u64 [s1 + 0x40]\n 25498: u64 [s1 + 0x190] = a4\n 25502: a4 = u64 [s1 + 0x48]\n 25505: u64 [s1 + 0x188] = a4\n 25509: a4 = u64 [s1 + 0x50]\n 25512: u64 [s1 + 0x180] = a4\n 25516: u64 [s1 + 0x1b8] = a2\n 25520: u64 [s1 + 0x1b0] = a1\n 25524: u64 [s1 + 0x1a8] = a0\n 25528: a0 = s1 + 0x1c0\n 25532: a1 = s1 + 0x1a0\n 25536: a2 = s1 + 0x180\n 25540: u64 [s1 + 0x1a0] = a3\n 25544: ra = 866, jump @813\n      : @887 [@dyn 433] (gas: 17)\n 25550: a4 = s1 + 0x100\n 25554: a0 = u64 [a4 + 0xc0]\n 25558: a1 = u64 [a4 + 0xc8]\n 25562: a2 = u64 [a4 + 0xd0]\n 25566: a3 = u64 [a4 + 0xd8]\n 25570: u64 [s1 + 568] = 0\n 25574: u64 [s1 + 560] = 0\n 25578: u64 [s1 + 552] = 0\n 25582: a5 = s1 + 0x200\n 25586: u64 [a5 + 32] = 0x2\n 25590: u64 [a5 + 0x58] = a3\n 25593: u64 [a5 + 0x50] = a2\n 25596: u64 [a5 + 0x48] = a1\n 25599: u64 [a5 + 0x40] = a0\n 25602: a0 = s1 + 0x220\n 25606: a1 = s1 + 0x240\n 25610: ra = 868, jump @22\n      : @888 [@dyn 434] (gas: 6)\n 25616: a3 = u64 [s1 + 0x28]\n 25619: a2 = u64 [s1 + 0x30]\n 25622: a1 = u64 [s1 + 0x38]\n 25625: a0 = a2 | a3\n 25628: a0 = a0 | a1\n 25631: jump @897 if a0 == 0\n      : @889 (gas: 8)\n 25635: u64 [s1 + 376] = 0\n 25639: a0 = s1 + 0x100\n 25643: u64 [a0 + 0x60] = a2\n 25646: u64 [a0 + 0x68] = a1\n 25649: a1 = s1 + 0x160\n 25653: u64 [a0 + 0x70] = a3\n 25656: a0 = 0\n 25658: ra = 870, jump @19\n      : @890 [@dyn 435] (gas: 7)\n 25664: u64 [s1 + 344] = 0\n 25668: u64 [s1 + 336] = 0\n 25672: u64 [s1 + 328] = 0\n 25676: a0 = 0x20\n 25679: a1 = s1 + 0x140\n 25683: u64 [s1 + 320] = 0\n 25687: ra = 872, jump @19\n      : @891 [@dyn 436] (gas: 6)\n 25693: a0 = sp + 0xffffffffffffffe0\n 25696: a0 = a0 & 0xffffffffffffffe0\n 25699: u64 [s1 + 0x20] = a0\n 25702: sp = a0\n 25704: a1 = i32 [0x200fc]\n 25709: jump @893 if a1 >u 63\n      : @892 (gas: 2)\n 25713: u32 [0x200fc] = 0x40\n 25719: fallthrough\n      : @893 (gas: 13)\n 25720: a0 = sp + 0xffffffffffffffe0\n 25723: a2 = a0 & 0xffffffffffffffe0\n 25726: u64 [s1 + 0x18] = a2\n 25729: sp = a2\n 25731: a0 = 0x20110\n 25736: i32 a0 = a0 + 0\n 25738: i32 a2 = a2 + 0\n 25740: a1 = 0x40\n 25743: ra = 0x36a\n 25747: ecalli 6 // 'hash_keccak_256'\n 25749: a3 = u64 [s1 + 0x18]\n 25752: t0 = 0x36c\n 25756: jump @911\n      : @894 [@dyn 437] (gas: 2)\n 25759: a3 = u64 [s1 + 0x18]\n 25762: t0 = 876, jump @911\n      : @895 [@dyn 438] (gas: 7)\n 25768: a1 = u64 [s1 + 0x20]\n 25771: u64 [a1 + 0x18] = a3\n 25774: u64 [a1 + 0x10] = a2\n 25777: u64 [a1 + 0x8] = a4\n 25780: u64 [a1] = a0\n 25782: a0 = s1 + 0x120\n 25786: ra = 878, jump @21\n      : @896 [@dyn 439] (gas: 32)\n 25792: a2 = s1 + 0x100\n 25796: a0 = u64 [a2 + 0x28]\n 25799: a1 = u64 [a2 + 0x20]\n 25802: t0 = u64 [s1 + 0x138]\n 25806: a3 = u64 [a2 + 0x30]\n 25809: a4 = u64 [s1 + 0x48]\n 25812: a4 = a4 + a0\n 25815: a5 = u64 [s1 + 0x50]\n 25818: a5 = a5 + a1\n 25821: a1 = a5 <u a1\n 25824: a4 = a4 + a1\n 25827: a2 = a4 ^ a0\n 25830: a0 = a4 <u a0\n 25833: a0 = a1 if a2 == 0\n 25836: a1 = u64 [s1 + 0x40]\n 25839: a1 = a1 + a3\n 25842: a2 = u64 [s1 + 0x58]\n 25845: t0 = t0 + a2\n 25848: a2 = a1 <u a3\n 25851: a2 = a2 + t0\n 25854: a0 = a0 + a1\n 25857: a1 = a0 <u a1\n 25860: a1 = a1 + a2\n 25863: a2 = s1 + 0x200\n 25867: u64 [a2 + 0x60] = a5\n 25870: u64 [a2 + 0x68] = a4\n 25873: u64 [a2 + 0x70] = a0\n 25876: u64 [a2 + 0x78] = a1\n 25879: a1 = s1 + 0x260\n 25883: a0 = u64 [s1 + 0x20]\n 25886: ra = 0x372\n 25890: jump @22\n      : @897 (gas: 7)\n 25893: u64 [s1 + 664] = 0\n 25897: u64 [s1 + 656] = 0\n 25901: u64 [s1 + 648] = 0\n 25905: u64 [s1 + 640] = 0x2\n 25910: a0 = s1 + 0x100\n 25914: a1 = s1 + 0x280\n 25918: ra = 880, jump @21\n      : @898 [@dyn 440] (gas: 34)\n 25924: a1 = u64 [s1 + 0x108]\n 25928: t0 = u64 [s1 + 0x118]\n 25932: t1 = u64 [s1 + 0x100]\n 25936: a3 = u64 [s1 + 0x110]\n 25940: a4 = u64 [s1 + 0x48]\n 25943: a0 = a1 ^ a4\n 25946: a5 = a1 <u a4\n 25949: ra = u64 [s1 + 0x50]\n 25952: t2 = t1 <u ra\n 25955: a5 = t2 if a0 == 0\n 25958: a0 = u64 [s1 + 0x40]\n 25961: a2 = a3 - a0\n 25964: a3 = a3 <u a0\n 25967: a0 = u64 [s1 + 0x58]\n 25970: a0 = t0 - a0\n 25973: a0 = a0 - a3\n 25976: a3 = a2 <u a5\n 25979: a0 = a0 - a3\n 25982: a3 = a2 - a5\n 25985: a1 = a1 - a4\n 25988: a1 = a1 - t2\n 25991: a4 = s1 + 0x200\n 25995: u64 [a4 + 160] = 0x2\n 26000: a2 = t1 - ra\n 26003: u64 [a4 + 0xc0] = a2\n 26007: u64 [a4 + 0xc8] = a1\n 26011: u64 [a4 + 0xd0] = a3\n 26015: u64 [a4 + 0xd8] = a0\n 26019: u64 [s1 + 696] = 0\n 26023: u64 [s1 + 688] = 0\n 26027: u64 [s1 + 680] = 0\n 26031: a0 = s1 + 0x2a0\n 26035: a1 = s1 + 0x2c0\n 26039: ra = 882, jump @22\n      : @899 [@dyn 441] (gas: 3)\n 26045: a0 = s1 + 0xe0\n 26049: a1 = 0x40\n 26052: ra = 884, jump @17\n      : @900 [@dyn 442] (gas: 5)\n 26058: a0 = u64 [s1 + 0xf8]\n 26062: a1 = u64 [s1 + 0xf0]\n 26066: a2 = u64 [s1 + 0xe8]\n 26070: a3 = u64 [s1 + 0xe0]\n 26074: t0 = 886, jump @920\n      : @901 [@dyn 443] (gas: 1)\n 26080: jump @905 if a0 != 0\n      : @902 (gas: 12)\n 26084: a0 = u64 [s1 + 0x50]\n 26087: u64 [s1 + 0xc0] = a0\n 26091: a0 = u64 [s1 + 0x48]\n 26094: u64 [s1 + 0xc8] = a0\n 26098: a0 = u64 [s1 + 0x40]\n 26101: u64 [s1 + 0xd0] = a0\n 26105: a1 = s1 + 0xc0\n 26109: a0 = u64 [s1 + 0x58]\n 26112: u64 [s1 + 0xd8] = a0\n 26116: a0 = a3\n 26118: u64 [s1 + 0x58] = a3\n 26121: ra = 888, jump @19\n      : @903 [@dyn 444] (gas: 25)\n 26127: u64 [s1 + 120] = 0\n 26130: a0 = u64 [s1 + 0x28]\n 26133: u64 [s1 + 0x70] = a0\n 26136: a0 = u64 [s1 + 0x38]\n 26139: u64 [s1 + 0x68] = a0\n 26142: a0 = u64 [s1 + 0x30]\n 26145: u64 [s1 + 0x60] = a0\n 26148: u64 [s1 + 152] = 0\n 26152: u64 [s1 + 144] = 0\n 26156: u64 [s1 + 136] = 0\n 26160: a0 = u64 [0x200d8]\n 26165: a1 = u64 [0x200e0]\n 26170: a2 = u64 [0x200e8]\n 26175: u64 [s1 + 128] = 0\n 26179: u64 [s1 + 0xb8] = a0\n 26183: u64 [s1 + 0xb0] = a1\n 26187: u64 [s1 + 0xa8] = a2\n 26191: a0 = u64 [0x200f0]\n 26196: a1 = 0x20\n 26199: a2 = s1 + 0xa0\n 26203: a3 = s1 + 0x80\n 26207: a4 = s1 + 0x60\n 26210: u64 [s1 + 0xa0] = a0\n 26214: a0 = u64 [s1 + 0x58]\n 26217: ra = 890, jump @23\n      : @904 [@dyn 445] (gas: 7)\n 26223: sp = s0 + 0xfffffffffffffd00\n 26227: a0 = sp + 0x200\n 26231: ra = u64 [a0 + 0xf8]\n 26235: s0 = u64 [a0 + 0xf0]\n 26239: s1 = u64 [a0 + 0xe8]\n 26243: sp = sp + 0x300\n 26247: ret\n      : @905 (gas: 1)\n 26249: trap\n      : @906 [export #0: 'call'] (gas: 2)\n 26250: a0 = 0\n 26252: ra = 892, jump @32\n      : @907 [@dyn 446] [export #1: 'deploy'] (gas: 2)\n 26258: a0 = 0x1\n 26261: ra = 894, jump @32\n      : @908 [@dyn 447] (gas: 14)\n 26267: a0 = u64 [a2 + 0x8]\n 26270: a1 = i32 [a2 + 0x10]\n 26273: a2 = u64 [a2]\n 26275: a0 = reverse a0\n 26277: a3 = a0 << 0x20\n 26280: a1 = reverse a1\n 26282: a1 = a1 >> 0x20\n 26285: a3 = a3 | a1\n 26288: a0 = a0 >> 0x20\n 26291: a1 = reverse a2\n 26293: a2 = a1 << 0x20\n 26296: a0 = a0 | a2\n 26299: a1 = a1 >> 0x20\n 26302: jump [t0]\n      : @909 (gas: 17)\n 26304: a2 = u64 [s1 + 0xb0]\n 26308: a0 = u64 [a2 + 0x8]\n 26311: a1 = i32 [a2 + 0x10]\n 26314: a2 = u64 [a2]\n 26316: a0 = reverse a0\n 26318: a3 = a0 << 0x20\n 26321: a1 = reverse a1\n 26323: a1 = a1 >> 0x20\n 26326: a3 = a3 | a1\n 26329: a0 = a0 >> 0x20\n 26332: a1 = reverse a2\n 26334: a2 = a1 << 0x20\n 26337: a0 = a0 | a2\n 26340: a1 = a1 >> 0x20\n 26343: a2 = s1 + 0x7ff\n 26347: a2 = a2 + 0x71\n 26350: jump [t0]\n      : @910 (gas: 22)\n 26352: a4 = u64 [s1 + 0x118]\n 26356: a2 = a4 <u 0x80\n 26360: a3 = u64 [s1 + 0xd0]\n 26364: a1 = a3 if a2 != 0\n 26367: a5 = u64 [s1 + 0xd8]\n 26371: a3 = u64 [s1 + 0xe8]\n 26375: a3 = a3 | a5\n 26378: a3 = a0 if a2 == 0\n 26381: a1 = 0xffffffffffffffff if a4 == 0\n 26384: a3 = 0xffffffffffffffff if a4 == 0\n 26387: a4 = u64 [s1 + 0xe0]\n 26391: a4 = 0 if a2 == 0\n 26393: a5 = 0 if a2 == 0\n 26395: a0 = u64 [s1 + 0xf8]\n 26399: a0 = a0 & ~a3\n 26402: a2 = u64 [s1 + 0x100]\n 26406: a1 = a2 & ~a1\n 26409: a2 = u64 [s1 + 0x108]\n 26413: a2 = a2 & ~a5\n 26416: a3 = u64 [s1 + 0x110]\n 26420: a3 = a3 & ~a4\n 26423: jump [t0]\n      : @911 (gas: 9)\n 26425: a0 = u64 [a3 + 0x18]\n 26428: a1 = u64 [a3 + 0x10]\n 26431: a2 = u64 [a3 + 0x8]\n 26434: a3 = u64 [a3]\n 26436: a0 = reverse a0\n 26438: a4 = reverse a1\n 26440: a2 = reverse a2\n 26442: a3 = reverse a3\n 26444: jump [t0]\n      : @912 (gas: 12)\n 26446: a3 = u64 [s1 + 0xf8]\n 26450: a0 = u64 [a3 + 0x18]\n 26453: a1 = u64 [a3 + 0x10]\n 26456: a2 = u64 [a3 + 0x8]\n 26459: a3 = u64 [a3]\n 26461: a0 = reverse a0\n 26463: a1 = reverse a1\n 26465: a2 = reverse a2\n 26467: a3 = reverse a3\n 26469: a4 = s1 + 0x1070\n 26473: a5 = a4 + 0x700\n 26477: jump [t0]\n      : @913 (gas: 12)\n 26479: a3 = u64 [s1 + 0xf8]\n 26483: a0 = u64 [a3 + 0x18]\n 26486: a1 = u64 [a3 + 0x10]\n 26489: a2 = u64 [a3 + 0x8]\n 26492: a3 = u64 [a3]\n 26494: a0 = reverse a0\n 26496: a1 = reverse a1\n 26498: a2 = reverse a2\n 26500: a3 = reverse a3\n 26502: a4 = s1 + 0x1070\n 26506: a5 = a4 + 0x600\n 26510: jump [t0]\n      : @914 (gas: 14)\n 26512: a0 = u64 [a2 + 0x8]\n 26515: a1 = u64 [a2]\n 26517: a2 = i32 [a2 + 0x10]\n 26520: a0 = reverse a0\n 26522: a3 = a0 >> 0x20\n 26525: a1 = reverse a1\n 26527: a4 = a1 << 0x20\n 26530: a3 = a3 | a4\n 26533: a0 = a0 << 0x20\n 26536: a2 = reverse a2\n 26538: a2 = a2 >> 0x20\n 26541: a0 = a0 | a2\n 26544: a1 = a1 >> 0x20\n 26547: jump [t0]\n      : @915 (gas: 13)\n 26549: a4 = a0 << 0x3f\n 26552: a5 = a1 >> 0x1\n 26555: t1 = a5 | a4\n 26558: a5 = a3 << 0x3f\n 26561: a0 = a0 >> 0x1\n 26564: a0 = a0 | a5\n 26567: a1 = a1 << 0x3f\n 26570: a5 = a2 >> 0x1\n 26573: a1 = a1 | a5\n 26576: a3 = a3 >> 0x1\n 26579: a2 = a2 & 0x1\n 26582: a5 = -a2\n 26584: jump [t0]\n      : @916 (gas: 11)\n 26586: a0 = u64 [a3 + 0x18]\n 26589: a1 = u64 [a3 + 0x10]\n 26592: a2 = u64 [a3 + 0x8]\n 26595: a3 = u64 [a3]\n 26597: a0 = reverse a0\n 26599: a1 = reverse a1\n 26601: a2 = reverse a2\n 26603: a3 = reverse a3\n 26605: a4 = s1 + 0x1070\n 26609: a5 = a4 + 0x400\n 26613: jump [t0]\n      : @917 (gas: 10)\n 26615: a4 = 0 if a2 == 0\n 26617: a1 = u64 [s1 + 0xf8]\n 26621: a1 = a1 & ~a3\n 26624: a2 = u64 [s1 + 0x100]\n 26628: a0 = a2 & ~a0\n 26631: a2 = u64 [s1 + 0x108]\n 26635: a2 = a2 & ~a4\n 26638: a3 = u64 [s1 + 0x110]\n 26642: a3 = a3 & ~a5\n 26645: jump [t0]\n      : @918 (gas: 8)\n 26647: a3 = a3 | a2\n 26650: a2 = a0 | a1\n 26653: a2 = a2 | a3\n 26656: a2 = a2 >> 0x20\n 26659: a1 = a1 | a3\n 26662: a1 = a1 << 0x20\n 26665: a1 = a1 | a2\n 26668: jump [t0]\n      : @919 (gas: 8)\n 26670: a0 = a0 | a2\n 26673: a2 = a4 | a1\n 26676: a2 = a2 | a0\n 26679: a2 = a2 >> 0x20\n 26682: a0 = a0 | a1\n 26685: a0 = a0 << 0x20\n 26688: a0 = a0 | a2\n 26691: jump [t0]\n      : @920 (gas: 8)\n 26693: a0 = a0 | a2\n 26696: a2 = a3 | a1\n 26699: a2 = a2 | a0\n 26702: a2 = a2 >> 0x20\n 26705: a0 = a0 | a1\n 26708: a0 = a0 << 0x20\n 26711: a0 = a0 | a2\n 26714: jump [t0]\n      : @921 (gas: 8)\n 26716: a2 = a4 >u 0\n 26718: a1 = a1 ^ 0x1\n 26721: a1 = a2 if a4 != 0\n 26724: a2 = t2 >u 0\n 26726: a3 = a5 >u 0\n 26728: a3 = a2 if a5 == 0\n 26731: a3 = a1 if a0 == 0\n 26734: jump [t0]\n      : @922 (gas: 10)\n 26736: a0 = u64 [sp + 0x10]\n 26739: a1 = u64 [sp + 0x18]\n 26742: a2 = 0x100000000\n 26752: a2 = a2 ^ a0\n 26755: a2 = a2 | a1\n 26758: a3 = a0 >> 0x20\n 26761: a3 = a3 <u 0x1\n 26764: a3 = 0 if a1 != 0\n 26766: a3 = 0 if a2 == 0\n 26768: jump [t0]\n      : @923 (gas: 10)\n 26770: a0 = u64 [a3 + 0x18]\n 26773: a1 = u64 [a3 + 0x10]\n 26776: a2 = u64 [a3 + 0x8]\n 26779: a3 = u64 [a3]\n 26781: a0 = reverse a0\n 26783: a1 = reverse a1\n 26785: a2 = reverse a2\n 26787: a3 = reverse a3\n 26789: a4 = s1 + 0x300\n 26793: jump [t0]\n      : @924 (gas: 4)\n 26795: a0 = 0x1070\n 26799: a3 = s1 + a0\n 26802: a4 = a3 + 0x300\n 26806: jump [t0]\n      : @925 (gas: 4)\n 26808: a0 = 0x1070\n 26812: a3 = s1 + a0\n 26815: a4 = a3 + 0x600\n 26819: jump [t0]\n      : @926 (gas: 8)\n 26821: a0 = u64 [a4 + 0xe0]\n 26825: a1 = u64 [a4 + 0xe8]\n 26829: a2 = u64 [a4 + 0xd8]\n 26833: a3 = u64 [a4 + 0xd0]\n 26837: a1 = a1 | a2\n 26840: a0 = a0 | a3\n 26843: a0 = a0 | a1\n 26846: jump [t0]\n      : @927 (gas: 8)\n 26848: a2 = a1 | a5\n 26851: a0 = a0 | a3\n 26854: a2 = a2 | a0\n 26857: a2 = a2 >> 0x20\n 26860: a0 = a0 | a5\n 26863: a0 = a0 << 0x20\n 26866: a0 = a0 | a2\n 26869: jump [t0]\n      : @928 (gas: 10)\n 26871: u64 [s1 + 264] = 0\n 26875: a4 = 0\n 26877: ra = 0\n 26879: u64 [s1 + 248] = 0\n 26883: u64 [s1 + 256] = 0\n 26887: a3 = u64 [s1 + 0xe8]\n 26891: a0 = u64 [a3 + 0x18]\n 26894: a1 = u64 [a3 + 0x10]\n 26897: a2 = u64 [a3 + 0x8]\n 26900: jump [t0]\n      : @929 (gas: 12)\n 26902: a2 = u64 [sp]\n 26904: a3 = u64 [sp + 0x8]\n 26907: u64 [s1] = a2\n 26909: u64 [s1 + 0x8] = a3\n 26912: u64 [s1 + 0x10] = a0\n 26915: u64 [s1 + 0x18] = a1\n 26918: sp = s0 + 0xffffffffffffffc0\n 26921: ra = u64 [sp + 0x38]\n 26924: s0 = u64 [sp + 0x30]\n 26927: s1 = u64 [sp + 0x28]\n 26930: sp = sp + 0x40\n 26933: jump [t0]\n      : @930 (gas: 8)\n 26935: a4 = a4 | a2\n 26938: a2 = a0 | a1\n 26941: a2 = a2 | a4\n 26944: a2 = a2 >> 0x20\n 26947: a1 = a1 | a4\n 26950: a1 = a1 << 0x20\n 26953: a1 = a1 | a2\n 26956: jump [t0]\n      : @931 (gas: 7)\n 26958: a0 = a0 << 0x3b\n 26961: a1 = a0 >> 0x38\n 26964: u64 [s1 + 0x118] = a1\n 26968: a2 = 0x80 - a1\n 26972: a0 = 0xffffffffffffffff\n 26975: a1 = 0xffffffffffffffff\n 26978: jump [t0]\n      : @932 (gas: 9)\n 26980: a0 = u64 [a2 + 0x8]\n 26983: a1 = i32 [a2 + 0x10]\n 26986: a2 = u64 [a2]\n 26988: a0 = reverse a0\n 26990: a3 = a0 << 0x20\n 26993: a1 = reverse a1\n 26995: a1 = a1 >> 0x20\n 26998: a1 = a1 | a3\n 27001: jump [t0]\n      : @933 (gas: 10)\n 27003: u64 [s1 + 0xd8] = a0\n 27007: u64 [s1 + 0xe0] = a1\n 27011: a0 = u64 [s1 + 0xd0]\n 27015: a0 = a0 | a1\n 27018: u64 [s1 + 0xd0] = a0\n 27022: a0 = u64 [s1 + 0x118]\n 27026: a2 = a0 + 0xffffffffffffff80\n 27029: a0 = 0xffffffffffffffff\n 27032: a1 = 0xffffffffffffffff\n 27035: jump [t0]\n      : @934 (gas: 6)\n 27037: a0 = u32 [a2 + 0x10]\n 27040: a1 = u64 [a2]\n 27042: a2 = u64 [a2 + 0x8]\n 27045: a0 = a0 | a1\n 27048: a0 = a0 | a2\n 27051: jump [t0]\n      : @935 (gas: 8)\n 27053: a0 = sp + 0xffffffffffffffe0\n 27056: a0 = a0 & 0xffffffffffffffe0\n 27059: u64 [s1 + 0xf8] = a0\n 27063: sp = a0\n 27065: i32 a2 = a0 + 0\n 27067: a1 = 0x40\n 27070: a0 = u64 [s1 + 0xd0]\n 27074: jump [t0]\n      : @936 (gas: 8)\n 27076: a0 = u64 [a4 + 0x60]\n 27079: a1 = u64 [a4 + 0x68]\n 27082: a2 = u64 [a4 + 0x58]\n 27085: a3 = u64 [a4 + 0x50]\n 27088: a1 = a1 | a2\n 27091: a0 = a0 | a3\n 27094: a0 = a0 | a1\n 27097: jump [t0]\n      : @937 (gas: 8)\n 27099: a0 = u64 [a2 + 0x8]\n 27102: a1 = i32 [a2 + 0x10]\n 27105: a2 = u64 [a2]\n 27107: a3 = reverse a0\n 27109: a0 = a3 << 0x20\n 27112: a1 = reverse a1\n 27114: a1 = a1 >> 0x20\n 27117: jump [t0]\n      : @938 (gas: 8)\n 27119: a0 = a0 + a4\n 27122: a3 = a3 + a1\n 27125: a5 = a3 <u a1\n 27128: a0 = a0 + a5\n 27131: ra = u64 [s1 + 0xe0]\n 27135: ra = ra + a3\n 27138: a3 = ra <u a3\n 27141: jump [t0]\n      : @939 (gas: 4)\n 27143: a0 = 0x1070\n 27147: a3 = s1 + a0\n 27150: a4 = a3 + 0x700\n 27154: jump [t0]\n      : @940 (gas: 6)\n 27156: a1 = a3 << 0x3\n 27159: u64 [s1 + 0x118] = a1\n 27163: i32 a2 = 0x80 - a1\n 27167: a0 = 0xffffffffffffffff\n 27170: a1 = 0xffffffffffffffff\n 27173: jump [t0]\n      : @941 (gas: 7)\n 27175: a3 = a3 | a5\n 27178: a3 = a1 if a2 == 0\n 27181: a1 = 0xffffffffffffffff\n 27184: a0 = a1 if a4 == 0\n 27187: a3 = a1 if a4 == 0\n 27190: a5 = 0 if a2 == 0\n 27192: jump [t0]\n      : @942 (gas: 6)\n 27194: a0 = u64 [a3 + 0x18]\n 27197: a1 = u64 [a3 + 0x10]\n 27200: a2 = u64 [a3 + 0x8]\n 27203: a3 = u64 [a3]\n 27205: a0 = reverse a0\n 27207: jump [t0]\n      : @943 (gas: 8)\n 27209: a1 = sp + 0xffffffffffffffe0\n 27212: a1 = a1 & 0xffffffffffffffe0\n 27215: u64 [s1 + 0xe8] = a1\n 27219: sp = a1\n 27221: i32 a0 = a0 + 0\n 27223: i32 a2 = a1 + 0\n 27225: a1 = 0x20\n 27228: jump [t0]\n      : @944 (gas: 5)\n 27230: sp = a0\n 27232: i32 a2 = a0 + 0\n 27234: a1 = 0x40\n 27237: a0 = u64 [s1 + 0xc0]\n 27241: jump [t0]\n      : @945 (gas: 8)\n 27243: a0 = u64 [a4 + 0xa0]\n 27247: a1 = u64 [a4 + 0xa8]\n 27251: a2 = u64 [a4 + 0x98]\n 27255: a3 = u64 [a4 + 0x90]\n 27259: a1 = a1 | a2\n 27262: a0 = a0 | a3\n 27265: a0 = a0 | a1\n 27268: jump [t0]\n      : @946 (gas: 9)\n 27270: sp = sp + 0xffffffffffffffc0\n 27273: u64 [sp + 0x38] = ra\n 27276: u64 [sp + 0x30] = s0\n 27279: u64 [sp + 0x28] = s1\n 27282: s0 = sp + 0x40\n 27285: sp = sp & 0xffffffffffffffe0\n 27288: s1 = a0\n 27290: i32 a0 = sp + 0\n 27292: jump [t0]\n      : @947 (gas: 2)\n 27294: a3 = a2 & 0x40\n 27297: jump @951 if a3 != 0\n      : @948 (gas: 1)\n 27300: jump @950 if a2 == 0\n      : @949 (gas: 6)\n 27303: i32 a3 = 0x40 - a2\n 27306: a3 = a1 << a3\n 27309: a1 = a1 >> a2\n 27312: a0 = a0 >> a2\n 27315: a0 = a0 | a3\n 27318: ret\n      : @950 (gas: 1)\n 27320: ret\n      : @951 (gas: 4)\n 27322: a0 = a2 + 0xffffffffffffffc0\n 27325: a0 = a1 >> a0\n 27328: a1 = 0\n 27330: ret\n      : @952 (gas: 2)\n 27332: a3 = a2 & 0x40\n 27335: jump @956 if a3 != 0\n      : @953 (gas: 1)\n 27338: jump @955 if a2 == 0\n      : @954 (gas: 6)\n 27341: i32 a3 = 0x40 - a2\n 27344: a3 = a0 >> a3\n 27347: a0 = a0 << a2\n 27350: a1 = a1 << a2\n 27353: a1 = a1 | a3\n 27356: ret\n      : @955 (gas: 1)\n 27358: ret\n      : @956 (gas: 4)\n 27360: a1 = a2 + 0xffffffffffffffc0\n 27363: a1 = a0 << a1\n 27366: a0 = 0\n 27368: ret\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "canMint(address)": "c2ba4744",
              "decimals()": "313ce567",
              "lastMintTime(address)": "6aa71d18",
              "mintToken()": "2004ffd9",
              "name()": "06fdde03",
              "owner()": "8da5cb5b",
              "ownerMint(address,uint256)": "484b973c",
              "setInterval(uint256)": "22a90082",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": "/// @use-src 0:\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\", 1:\"@openzeppelin/contracts/token/ERC20/ERC20.sol\", 2:\"@openzeppelin/contracts/token/ERC20/IERC20.sol\", 3:\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\", 4:\"@openzeppelin/contracts/utils/Context.sol\", 5:\"contracts/MintableERC20.sol\"\nobject \"MintableERC20_926\" {\n    code {\n        {\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"MintableERC20_926\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            let _1 := add(memoryDataOffset, argSize)\n            if slt(sub(_1, memoryDataOffset), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            let offset := mload(memoryDataOffset)\n            if gt(offset, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            let value0 := abi_decode_string_fromMemory(add(memoryDataOffset, offset), _1)\n            let offset_1 := mload(add(memoryDataOffset, 32))\n            if gt(offset_1, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            let value1 := abi_decode_string_fromMemory(add(memoryDataOffset, offset_1), _1)\n            let newLen := mload(value0)\n            if gt(newLen, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            let _2 := sload(/** @src 1:1648:1661  \"_name = name_\" */ 0x03)\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            let length := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            length := shr(1, _2)\n            let outOfPlaceEncoding := and(_2, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            if gt(length, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1648:1661  \"_name = name_\" */ 0x03)\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 32)\n                let deleteStart := add(data, shr(5, add(newLen, 31)))\n                if lt(newLen, 32) { deleteStart := data }\n                let _3 := add(data, shr(5, add(length, 31)))\n                let start := deleteStart\n                for { } lt(start, _3) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            srcOffset := 32\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1648:1661  \"_name = name_\" */ 0x03)\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ srcOffset)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                for { } lt(i, loopEnd) { i := add(i, 32) }\n                {\n                    sstore(dstPtr, mload(add(value0, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, 32)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(value0, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ newLen), 248), not(0)))))\n                }\n                sstore(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                if newLen\n                {\n                    value := mload(add(value0, srcOffset))\n                }\n                sstore(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ or(and(value, not(shr(shl(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ newLen), not(0)))), shl(1, newLen)))\n            }\n            let newLen_1 := mload(value1)\n            if gt(newLen_1, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            let _4 := sload(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04)\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            let length_1 := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            length_1 := shr(1, _4)\n            let outOfPlaceEncoding_1 := and(_4, 1)\n            if iszero(outOfPlaceEncoding_1)\n            {\n                length_1 := and(length_1, 0x7f)\n            }\n            if eq(outOfPlaceEncoding_1, lt(length_1, 32))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            if gt(length_1, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04)\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                let data_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 32)\n                let deleteStart_1 := add(data_1, shr(5, add(newLen_1, 31)))\n                if lt(newLen_1, 32) { deleteStart_1 := data_1 }\n                let _5 := add(data_1, shr(5, add(length_1, 31)))\n                let start_1 := deleteStart_1\n                for { } lt(start_1, _5) { start_1 := add(start_1, 1) }\n                {\n                    sstore(start_1, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            let srcOffset_1 := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            srcOffset_1 := 32\n            switch gt(newLen_1, 31)\n            case 1 {\n                let loopEnd_1 := and(newLen_1, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04)\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ srcOffset_1)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, 32) }\n                {\n                    sstore(dstPtr_1, mload(add(value1, srcOffset_1)))\n                    dstPtr_1 := add(dstPtr_1, 1)\n                    srcOffset_1 := add(srcOffset_1, 32)\n                }\n                if lt(loopEnd_1, newLen_1)\n                {\n                    let lastValue_1 := mload(add(value1, srcOffset_1))\n                    sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ newLen_1), 248), not(0)))))\n                }\n                sstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ add(shl(1, newLen_1), 1))\n            }\n            default {\n                let value_1 := /** @src -1:-1:-1 */ 0\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                if newLen_1\n                {\n                    value_1 := mload(add(value1, srcOffset_1))\n                }\n                sstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ or(and(value_1, not(shr(shl(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ newLen_1), not(0)))), shl(1, newLen_1)))\n            }\n            /// @src 1:7509:7530  \"account == address(0)\"\n            let _6 := iszero(/** @src 5:390:400  \"msg.sender\" */ caller())\n            /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n            if /** @src 1:7509:7530  \"account == address(0)\" */ _6\n            /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n            {\n                /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                mstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src -1:-1:-1 */ 0)\n                /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 36)\n            }\n            let _7 := sload(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02)\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            let sum := add(_7, /** @src 5:402:426  \"100000000000000000000000\" */ 0x152d02c7e14af6800000)\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            if gt(_7, sum)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x11)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            sstore(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sum)\n            /// @src 1:6624:7049  \"if (to == address(0)) {...\"\n            _6 := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            mstore(/** @src -1:-1:-1 */ 0, /** @src 5:390:400  \"msg.sender\" */ caller())\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            mstore(32, /** @src -1:-1:-1 */ 0)\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            let dataSlot := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 64)\n            sstore(dataSlot, add(sload(/** @src 1:7002:7024  \"_balances[to] += value\" */ dataSlot), /** @src 5:402:426  \"100000000000000000000000\" */ 0x152d02c7e14af6800000))\n            /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n            let _8 := /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ mload(64)\n            mstore(_8, /** @src 5:402:426  \"100000000000000000000000\" */ 0x152d02c7e14af6800000)\n            /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n            log3(_8, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 32, /** @src 1:7064:7089  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src -1:-1:-1 */ 0, /** @src 5:390:400  \"msg.sender\" */ caller())\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            sstore(/** @src 5:438:456  \"owner = msg.sender\" */ 0x07, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ or(and(sload(/** @src 5:438:456  \"owner = msg.sender\" */ 0x07), /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ not(sub(shl(160, 1), 1))), /** @src 5:390:400  \"msg.sender\" */ caller()))\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            sstore(/** @src 5:466:481  \"interval = 3600\" */ 0x06, /** @src 5:477:481  \"3600\" */ 0x0e10)\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            let _9 := mload(64)\n            let _10 := datasize(\"MintableERC20_926_deployed\")\n            codecopy(_9, dataoffset(\"MintableERC20_926_deployed\"), _10)\n            return(_9, _10)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n        function abi_decode_string_fromMemory(offset, end) -> array\n        {\n            if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n            let length := mload(offset)\n            if gt(length, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            let array_1 := allocate_memory(add(and(add(length, 0x1f), not(31)), 0x20))\n            mstore(array_1, length)\n            if gt(add(add(offset, length), 0x20), end)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            mcopy(add(array_1, 0x20), add(offset, 0x20), length)\n            mstore(add(add(array_1, length), 0x20), /** @src -1:-1:-1 */ 0)\n            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n            array := array_1\n        }\n    }\n    /// @use-src 1:\"@openzeppelin/contracts/token/ERC20/ERC20.sol\", 4:\"@openzeppelin/contracts/utils/Context.sol\", 5:\"contracts/MintableERC20.sol\"\n    object \"MintableERC20_926_deployed\" {\n        code {\n            {\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x06fdde03 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let ret := 0\n                        let slotValue := sload(/** @src 1:1837:1842  \"_name\" */ 0x03)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        let length := 0\n                        length := shr(1, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(_1, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(_1, 32), and(slotValue, not(255)))\n                            ret := add(add(_1, shl(5, iszero(iszero(length)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, /** @src 1:1837:1842  \"_name\" */ 0x03)\n                            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                            let dataPos := 87903029871075914254377627908054574944891091886930582284385770809450030037083\n                            let i := 0\n                            for { } lt(i, length) { i := add(i, 32) }\n                            {\n                                mstore(add(add(_1, i), 32), sload(dataPos))\n                                dataPos := add(dataPos, 1)\n                            }\n                            ret := add(add(_1, i), 32)\n                        }\n                        let newFreePtr := add(_1, and(add(sub(ret, _1), 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, _1))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                        return(newFreePtr, sub(abi_encode_string(newFreePtr, _1), newFreePtr))\n                    }\n                    case 0x095ea7b3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let value := calldataload(36)\n                        /// @src 1:9790:9879  \"if (owner == address(0)) {...\"\n                        if /** @src 1:9794:9813  \"owner == address(0)\" */ iszero(/** @src 4:735:745  \"msg.sender\" */ caller())\n                        /// @src 1:9790:9879  \"if (owner == address(0)) {...\"\n                        {\n                            /// @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                            mstore(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\" */ shl(224, 0xe602df05))\n                            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                            revert(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                        }\n                        let _2 := and(/** @src 1:9892:9913  \"spender == address(0)\" */ value0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                        /// @src 1:9888:9978  \"if (spender == address(0)) {...\"\n                        if /** @src 1:9892:9913  \"spender == address(0)\" */ iszero(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ _2)\n                        /// @src 1:9888:9978  \"if (spender == address(0)) {...\"\n                        {\n                            /// @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                            mstore(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\" */ shl(225, 0x4a1406b1))\n                            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                            revert(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                        }\n                        mstore(0, /** @src 4:735:745  \"msg.sender\" */ caller())\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(32, 1)\n                        let dataSlot := keccak256(0, 64)\n                        /// @src 1:9987:10014  \"_allowances[owner][spender]\"\n                        let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ _2)\n                        mstore(0x20, /** @src 1:9987:10005  \"_allowances[owner]\" */ dataSlot)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                        sstore(/** @src 1:9987:10014  \"_allowances[owner][spender]\" */ dataSlot_1, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ value)\n                        /// @src 1:10066:10097  \"Approval(owner, spender, value)\"\n                        let _3 := /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ mload(64)\n                        mstore(_3, value)\n                        /// @src 1:10066:10097  \"Approval(owner, spender, value)\"\n                        log3(_3, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 32, /** @src 1:10066:10097  \"Approval(owner, spender, value)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 4:735:745  \"msg.sender\" */ caller(), /** @src 1:10066:10097  \"Approval(owner, spender, value)\" */ _2)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos := mload(64)\n                        mstore(memPos, 1)\n                        return(memPos, 32)\n                    }\n                    case 0x18160ddd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _4 := sload(/** @src 1:2908:2920  \"_totalSupply\" */ 0x02)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, _4)\n                        return(memPos_1, 32)\n                    }\n                    case 0x2004ffd9 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(0, /** @src 5:566:576  \"msg.sender\" */ caller())\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(0x20, /** @src 5:553:565  \"lastMintTime\" */ 0x05)\n                        /// @src 5:553:655  \"lastMintTime[msg.sender] == 0 ||...\"\n                        let expr := /** @src 5:553:582  \"lastMintTime[msg.sender] == 0\" */ iszero(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sload(keccak256(0, 64)))\n                        /// @src 5:553:655  \"lastMintTime[msg.sender] == 0 ||...\"\n                        if iszero(expr)\n                        {\n                            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(0, /** @src 5:566:576  \"msg.sender\" */ caller())\n                            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(0x20, /** @src 5:553:565  \"lastMintTime\" */ 0x05)\n                            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                            let _5 := sload(keccak256(0, 64))\n                            /// @src 5:553:655  \"lastMintTime[msg.sender] == 0 ||...\"\n                            expr := /** @src 5:602:655  \"block.timestamp > lastMintTime[msg.sender] + interval\" */ gt(/** @src 5:602:617  \"block.timestamp\" */ timestamp(), /** @src 5:620:655  \"lastMintTime[msg.sender] + interval\" */ checked_add_uint256(_5, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sload(/** @src 5:647:655  \"interval\" */ 0x06)))\n                        }\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        if iszero(expr)\n                        {\n                            let memPtr := mload(64)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, 4), 0x20)\n                            mstore(add(memPtr, 36), 38)\n                            mstore(add(memPtr, 68), \"You need to wait an hour between\")\n                            mstore(add(memPtr, 100), \" mints\")\n                            revert(memPtr, 132)\n                        }\n                        /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n                        if /** @src 1:7509:7530  \"account == address(0)\" */ iszero(/** @src 5:566:576  \"msg.sender\" */ caller())\n                        /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n                        {\n                            /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                            mstore(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                            revert(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                        }\n                        /// @src 1:7634:7639  \"value\"\n                        fun_update(/** @src 5:566:576  \"msg.sender\" */ caller(), /** @src 5:747:768  \"100000000000000000000\" */ 0x056bc75e2d63100000)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(0, /** @src 5:566:576  \"msg.sender\" */ caller())\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(0x20, /** @src 5:553:565  \"lastMintTime\" */ 0x05)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        sstore(keccak256(0, 64), /** @src 5:806:821  \"block.timestamp\" */ timestamp())\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        return(0, 0)\n                    }\n                    case 0x22a90082 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        /// @src 5:1282:1323  \"require(msg.sender == owner, \\\"Not owner\\\")\"\n                        require_helper_stringliteral_c266(/** @src 5:1290:1309  \"msg.sender == owner\" */ eq(/** @src 5:1290:1300  \"msg.sender\" */ caller(), /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ and(sload(/** @src 5:1304:1309  \"owner\" */ 0x07), /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))))\n                        sstore(/** @src 5:1215:1238  \"interval = _newInterval\" */ 0x06, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ calldataload(4))\n                        return(0, 0)\n                    }\n                    case 0x23b872dd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        let value1 := abi_decode_t_address()\n                        let value_1 := calldataload(68)\n                        let _6 := and(value0_1, sub(shl(160, 1), 1))\n                        mstore(0, _6)\n                        mstore(32, 1)\n                        let dataSlot_2 := keccak256(0, 64)\n                        /// @src 1:3638:3665  \"_allowances[owner][spender]\"\n                        let dataSlot_3 := /** @src -1:-1:-1 */ 0\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ and(/** @src 4:735:745  \"msg.sender\" */ caller(), /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 1:3638:3656  \"_allowances[owner]\" */ dataSlot_2)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                        let _7 := sload(/** @src 1:3638:3665  \"_allowances[owner][spender]\" */ dataSlot_3)\n                        /// @src 1:10557:10866  \"if (currentAllowance < type(uint256).max) {...\"\n                        if /** @src 1:10561:10597  \"currentAllowance < type(uint256).max\" */ lt(_7, /** @src 1:10580:10597  \"type(uint256).max\" */ not(0))\n                        /// @src 1:10557:10866  \"if (currentAllowance < type(uint256).max) {...\"\n                        {\n                            /// @src 1:10613:10743  \"if (currentAllowance < value) {...\"\n                            if /** @src 1:10617:10641  \"currentAllowance < value\" */ lt(_7, value_1)\n                            /// @src 1:10613:10743  \"if (currentAllowance < value) {...\"\n                            {\n                                /// @src 1:10668:10728  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                mstore(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:10668:10728  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\" */ shl(225, 0x7dc7a0d9))\n                                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                                mstore(4, /** @src 4:735:745  \"msg.sender\" */ caller())\n                                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                                mstore(36, _7)\n                                mstore(68, value_1)\n                                /// @src 1:10668:10728  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                revert(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, 100)\n                            }\n                            /// @src 1:9790:9879  \"if (owner == address(0)) {...\"\n                            if /** @src 1:9794:9813  \"owner == address(0)\" */ iszero(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ _6)\n                            /// @src 1:9790:9879  \"if (owner == address(0)) {...\"\n                            {\n                                /// @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                                mstore(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\" */ shl(224, 0xe602df05))\n                                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                                mstore(4, 0)\n                                /// @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                                revert(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                            }\n                            /// @src 1:9888:9978  \"if (spender == address(0)) {...\"\n                            if /** @src 1:9892:9913  \"spender == address(0)\" */ iszero(/** @src 4:735:745  \"msg.sender\" */ caller())\n                            /// @src 1:9888:9978  \"if (spender == address(0)) {...\"\n                            {\n                                /// @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                                mstore(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\" */ shl(225, 0x4a1406b1))\n                                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                                mstore(4, 0)\n                                /// @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                                revert(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                            }\n                            mstore(0, _6)\n                            mstore(32, 1)\n                            let dataSlot_4 := keccak256(0, 64)\n                            /// @src 1:9987:10014  \"_allowances[owner][spender]\"\n                            let dataSlot_5 := /** @src -1:-1:-1 */ 0\n                            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ and(/** @src 4:735:745  \"msg.sender\" */ caller(), /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1)))\n                            mstore(0x20, /** @src 1:9987:10005  \"_allowances[owner]\" */ dataSlot_4)\n                            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                            dataSlot_5 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                            sstore(/** @src 1:9987:10014  \"_allowances[owner][spender]\" */ dataSlot_5, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sub(/** @src 1:10809:10833  \"currentAllowance - value\" */ _7, value_1))\n                        }\n                        /// @src 1:4967:4972  \"value\"\n                        fun_transfer(value0_1, value1, value_1)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, 1)\n                        return(memPos_2, 32)\n                    }\n                    case 0x313ce567 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, /** @src 1:2761:2763  \"18\" */ 0x12)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        return(memPos_3, 32)\n                    }\n                    case 0x484b973c {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_2 := abi_decode_address()\n                        /// @src 5:1282:1323  \"require(msg.sender == owner, \\\"Not owner\\\")\"\n                        require_helper_stringliteral_c266(/** @src 5:1290:1309  \"msg.sender == owner\" */ eq(/** @src 5:1290:1300  \"msg.sender\" */ caller(), /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ and(sload(/** @src 5:1304:1309  \"owner\" */ 0x07), /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n                        if /** @src 1:7509:7530  \"account == address(0)\" */ iszero(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ and(/** @src 1:7509:7530  \"account == address(0)\" */ value0_2, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1)))\n                        /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n                        {\n                            /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                            mstore(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                            revert(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                        }\n                        /// @src 1:7634:7639  \"value\"\n                        fun_update(value0_2, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ calldataload(36))\n                        return(0, 0)\n                    }\n                    case 0x6aa71d18 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 5:170:214  \"mapping(address => uint) public lastMintTime\" */ 5)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        let _8 := sload(keccak256(0, 64))\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, _8)\n                        return(memPos_4, 32)\n                    }\n                    case 0x70a08231 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 0)\n                        let _9 := sload(keccak256(0, 64))\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, _9)\n                        return(memPos_5, 32)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_2 := and(sload(/** @src 5:247:267  \"address public owner\" */ 7), /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, value_2)\n                        return(memPos_6, 32)\n                    }\n                    case 0x95d89b41 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPtr_1 := mload(64)\n                        let ret_1 := 0\n                        let slotValue_1 := sload(4)\n                        let length_1 := 0\n                        length_1 := shr(1, slotValue_1)\n                        let outOfPlaceEncoding_1 := and(slotValue_1, 1)\n                        if iszero(outOfPlaceEncoding_1)\n                        {\n                            length_1 := and(length_1, 0x7f)\n                        }\n                        if eq(outOfPlaceEncoding_1, lt(length_1, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(memPtr_1, length_1)\n                        switch outOfPlaceEncoding_1\n                        case 0 {\n                            mstore(add(memPtr_1, 32), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr_1, shl(5, iszero(iszero(length_1)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, 4)\n                            let dataPos_1 := 62514009886607029107290561805838585334079798074568712924583230797734656856475\n                            let i_1 := 0\n                            for { } lt(i_1, length_1) { i_1 := add(i_1, 32) }\n                            {\n                                mstore(add(add(memPtr_1, i_1), 32), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, 1)\n                            }\n                            ret_1 := add(add(memPtr_1, i_1), 32)\n                        }\n                        let newFreePtr_1 := add(memPtr_1, and(add(sub(ret_1, memPtr_1), 31), not(31)))\n                        if or(gt(newFreePtr_1, 0xffffffffffffffff), lt(newFreePtr_1, memPtr_1))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr_1)\n                        return(newFreePtr_1, sub(abi_encode_string(newFreePtr_1, memPtr_1), newFreePtr_1))\n                    }\n                    case 0xa9059cbb {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_3 := abi_decode_address()\n                        /// @src 1:3440:3445  \"value\"\n                        fun_transfer(/** @src 4:735:745  \"msg.sender\" */ caller(), /** @src 1:3440:3445  \"value\" */ value0_3, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ calldataload(36))\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, 1)\n                        return(memPos_7, 32)\n                    }\n                    case 0xc2ba4744 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let _10 := and(abi_decode_address(), sub(shl(160, 1), 1))\n                        mstore(0, _10)\n                        mstore(32, /** @src 5:1041:1053  \"lastMintTime\" */ 0x05)\n                        /// @src 5:1041:1135  \"lastMintTime[_address] == 0 ||...\"\n                        let expr_1 := /** @src 5:1041:1068  \"lastMintTime[_address] == 0\" */ iszero(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sload(keccak256(0, 64)))\n                        /// @src 5:1041:1135  \"lastMintTime[_address] == 0 ||...\"\n                        if iszero(expr_1)\n                        {\n                            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(0, _10)\n                            mstore(32, /** @src 5:1041:1053  \"lastMintTime\" */ 0x05)\n                            /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                            let _11 := sload(keccak256(0, 64))\n                            /// @src 5:1041:1135  \"lastMintTime[_address] == 0 ||...\"\n                            expr_1 := /** @src 5:1084:1135  \"block.timestamp > lastMintTime[_address] + interval\" */ gt(/** @src 5:1084:1099  \"block.timestamp\" */ timestamp(), /** @src 5:1102:1135  \"lastMintTime[_address] + interval\" */ checked_add_uint256(_11, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sload(/** @src 5:1127:1135  \"interval\" */ 0x06)))\n                        }\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, iszero(iszero(expr_1)))\n                        return(memPos_8, 32)\n                    }\n                    case 0xdd62ed3e {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_4 := abi_decode_address()\n                        let value1_1 := abi_decode_t_address()\n                        mstore(0, and(value0_4, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 1:3638:3649  \"_allowances\" */ 0x01)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        let dataSlot_6 := keccak256(0, 64)\n                        /// @src 1:3638:3665  \"_allowances[owner][spender]\"\n                        let dataSlot_7 := /** @src -1:-1:-1 */ 0\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ and(value1_1, sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 1:3638:3656  \"_allowances[owner]\" */ dataSlot_6)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        dataSlot_7 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                        let _12 := sload(/** @src 1:3638:3665  \"_allowances[owner][spender]\" */ dataSlot_7)\n                        /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_9 := mload(64)\n                        mstore(memPos_9, _12)\n                        return(memPos_9, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                mstore(headStart, 32)\n                let length := mload(value0)\n                mstore(add(headStart, 32), length)\n                mcopy(add(headStart, 64), add(value0, 32), length)\n                mstore(add(add(headStart, length), 64), 0)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_t_address() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                sum := add(x, y)\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function require_helper_stringliteral_c266(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 9)\n                    mstore(add(memPtr, 68), \"Not owner\")\n                    revert(memPtr, 100)\n                }\n            }\n            /// @ast-id 381 @src 1:5374:5674  \"function _transfer(address from, address to, uint256 value) internal {...\"\n            function fun_transfer(var_from, var_to, var_value)\n            {\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                let _1 := and(/** @src 1:5457:5475  \"from == address(0)\" */ var_from, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:5457:5475  \"from == address(0)\"\n                let _2 := iszero(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                /// @src 1:5453:5539  \"if (from == address(0)) {...\"\n                if /** @src 1:5457:5475  \"from == address(0)\" */ _2\n                /// @src 1:5453:5539  \"if (from == address(0)) {...\"\n                {\n                    /// @src 1:5498:5528  \"ERC20InvalidSender(address(0))\"\n                    mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 1:5498:5528  \"ERC20InvalidSender(address(0))\" */ shl(225, 0x4b637e8f))\n                    /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                    mstore(/** @src 1:5498:5528  \"ERC20InvalidSender(address(0))\" */ 4, /** @src 1:5473:5474  \"0\" */ 0x00)\n                    /// @src 1:5498:5528  \"ERC20InvalidSender(address(0))\"\n                    revert(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 36)\n                }\n                let _3 := and(/** @src 1:5552:5568  \"to == address(0)\" */ var_to, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:5552:5568  \"to == address(0)\"\n                let _4 := iszero(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ _3)\n                /// @src 1:5548:5634  \"if (to == address(0)) {...\"\n                if /** @src 1:5552:5568  \"to == address(0)\" */ _4\n                /// @src 1:5548:5634  \"if (to == address(0)) {...\"\n                {\n                    /// @src 1:5591:5623  \"ERC20InvalidReceiver(address(0))\"\n                    mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                    /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                    mstore(/** @src 1:5591:5623  \"ERC20InvalidReceiver(address(0))\" */ 4, /** @src 1:5473:5474  \"0\" */ 0x00)\n                    /// @src 1:5591:5623  \"ERC20InvalidReceiver(address(0))\"\n                    revert(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 36)\n                }\n                /// @src 1:6074:6614  \"if (from == address(0)) {...\"\n                _2 := /** @src 1:5473:5474  \"0\" */ 0x00\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                mstore(0x20, /** @src 1:5473:5474  \"0\" */ 0x00)\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                let _5 := sload(keccak256(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x40))\n                /// @src 1:6317:6432  \"if (fromBalance < value) {...\"\n                if /** @src 1:6321:6340  \"fromBalance < value\" */ lt(_5, var_value)\n                /// @src 1:6317:6432  \"if (fromBalance < value) {...\"\n                {\n                    /// @src 1:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 1:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ shl(226, 0x391434e3))\n                    /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                    mstore(/** @src 1:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ 4, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                    mstore(36, _5)\n                    mstore(68, var_value)\n                    /// @src 1:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    revert(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 100)\n                }\n                mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                mstore(0x20, /** @src 1:5473:5474  \"0\" */ 0x00)\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                sstore(keccak256(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x40), sub(/** @src 1:6570:6589  \"fromBalance - value\" */ _5, var_value))\n                /// @src 1:6624:7049  \"if (to == address(0)) {...\"\n                _4 := /** @src 1:5473:5474  \"0\" */ 0x00\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ _3)\n                mstore(0x20, /** @src 1:5473:5474  \"0\" */ 0x00)\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                let dataSlot := keccak256(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                sstore(dataSlot, add(sload(/** @src 1:7002:7024  \"_balances[to] += value\" */ dataSlot), /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ var_value))\n                /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n                let _6 := /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ mload(64)\n                mstore(_6, var_value)\n                /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n                log3(_6, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 32, /** @src 1:7064:7089  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _1, _3)\n            }\n            /// @ast-id 458 @src 1:5989:7096  \"function _update(address from, address to, uint256 value) internal virtual {...\"\n            function fun_update(var_to, var_value)\n            {\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                sstore(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02, checked_add_uint256(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sload(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02), var_value))\n                /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                let _1 := and(/** @src 1:6628:6644  \"to == address(0)\" */ var_to, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:6624:7049  \"if (to == address(0)) {...\"\n                switch /** @src 1:6628:6644  \"to == address(0)\" */ iszero(/** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                case /** @src 1:6624:7049  \"if (to == address(0)) {...\" */ 0 {\n                    /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                    mstore(0, _1)\n                    mstore(0x20, 0)\n                    let dataSlot := keccak256(0, 0x40)\n                    sstore(dataSlot, add(sload(/** @src 1:7002:7024  \"_balances[to] += value\" */ dataSlot), /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ var_value))\n                }\n                default /// @src 1:6624:7049  \"if (to == address(0)) {...\"\n                {\n                    /// @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\"\n                    sstore(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ sub(sload(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02), /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ var_value))\n                }\n                /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n                let _2 := /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ mload(64)\n                mstore(_2, var_value)\n                /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n                log3(_2, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 32, /** @src 1:7064:7089  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 5:115:1343  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:7064:7089  \"Transfer(from, to, value)\" */ _1)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220ec6039d571003e72d91784d7e008396ef57e07226b52396d9c563f48af4f829f64736f6c634300081e0033\"\n    }\n}\n",
          "hash": "c9d65f525932ea6caf6b2e507d419ce6387b6e2a3db1d7f4ea6170700fce62b6",
          "factoryDependencies": {}
        }
      }
    }
  }
}